[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d DeliveryMANS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T12-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-T12-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d About"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "*DeliveryMANS* is an acronym for Delivery MANagement System. This system is for administrators in food delivery services to manage the restaurants, customers and deliverymen using their food delivery services."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d All-in-one UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "The UI allows the administrator to have a good overview of all the information needed for tasks to be done efficiently."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d ChefHat"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Administrators are able to set recommendations on the restaurant\u0027s menu using the ChefHat system."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d Deliverymen tracking"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Administrators will be able to track the deliverymen on deliveries at a glance. This allows the administrator to manage them better and efficiently queue the orders to each deliverymen."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d Customer reward tiers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Customers have reward tiers depending on how much they order from the food service. Having higher tiers allows the administrator to assign for food to be delivered to them faster than normal."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d Customer recommendations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Each food item on each restaurant\u0027s menu are tagged with a category. Depending on how many times the customer ordered that item, recommendations will be able to be assigned to the customer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d CLI based input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "The application is a combination of GUI outputs and CLI inputs to allow the administrator to input commands efficiently just using the keyboard."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* Original source of the code i.e. AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 29,
      "-": 26,
      "charliechoong": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "mainClassName \u003d \u0027seedu.deliverymans.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    archiveName \u003d \u0027DeliveryMANS.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u0027site-name\u0027: \u0027DeliveryMANs\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "etlow": 1,
      "MackyMaguire": 1,
      "-": 152,
      "charliechoong": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliveryMANs was developed by the https://se-edu.github.io/docs/Team.html[AY2019/20 S1 CS2103-T12-02] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d Choong Jin Yao"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "image::charliechoong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{empty}[https://github.com/charliechoong[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Responsibilities: Code Quality, Documentation, Integration, Testing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d Low Ee Ter"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "image::https://comp.nus.edu.sg/~lowet/n20191002.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "image:etlow.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{empty}[https://github.com/etlow[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Responsibilities: Code Quality, Documentation, Integration, Testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d Ryan Tay"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "image::ryantay232.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{empty}[http://github.com/ryantay232[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Responsibilities: Code Quality, Documentation, Integration, Testing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d Stanley Yuan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::soilingrogue.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{empty}[https://github.com/SoilingRogue[github]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Responsibilities: Code Quality, Documentation, Integration, Testing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d Zhou Tianyu"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "image::mackymaguire.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{empty}[http://github.com/MackyMaguire[github]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Responsibilities: Code Quality, Documentation, Integration, Testing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "ryantay232": 1,
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 33,
      "charliechoong": 18
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d Contact Us :grinning:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T12-2/main/issues[issue tracker] if you"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "   noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* *Email us* : You can also reach any of us through our emails as stated below : +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** *Choong Jin Yao* : _e0202817@u.nus.edu_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** *Low Ee Ter* :     _e0310486@u.nus.edu_"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** *Ryan Tay* :      _e0310823@u.nus.edu_"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** *Stanley Yuan*:   _e0309350@u.nus.edu_"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** *Zhou Tianyu* :   _e0323028@u.nus.edu_"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "charliechoong": 13
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d DeliveryMANS - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "By: `Team AY1920S1-CS2103-T12-2`   Since: `Sept 2019`  Licence: `NUS`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d Software overview"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "*DeliveryMANS* is a command-line application designed specifically for delivery centre administrators who are in charge of food delivery service. It encompasses a well-structured system for users to keep track and manage the entire delivery process. It facilitates food delivery service by coaliasing the delivery men, customers and restaurant menu. From auto-assigning deliverymen for deliveries when orders are made, to viewing statistics of the most popular dish of restaurants as well as customer ordering trends for further promotions, financial and business management decisions, *DeliveryMANs* is everything you need to help improve managing deliveries. With just a few simple commands, this delivery manager can help to kickstart your delivery service."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This document has been created to explain the software architecture and implementations of *DeliveryMANS*. The intended audience for this document are software testers and future developers."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "To setup *DeliveryMANS* on your system, please refer to the user guide \u003c\u003cUserGuide#Quick-start, here\u003e\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "In addition, there are 4 different contexts that the App has:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* `Universal`/`Order`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* `Customer`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* `Restaurant`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* `Deliverymen`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Each context will allow the application the execute commands in the context the application is currently in. For example, `Customer` commands can only be executed in the `Customer` context. This is to allow separation between the 4 contexts, and also the 4 databases the App has. The `Universal` context will also execute commands pertaining to `Order`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Because of this, the context are interchangeable in the diagrams below (and the one above) as changing the context will not change how the application is structured. For example, when the diagram is shown in a `Customer` context, it will also apply in a `Restaurant` context."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "However, there are differences between the 4 different context that will be explained in the \u003c\u003cDesign-Model,*`Model`*\u003e\u003e section."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `CustomerListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ".  `Logic` uses the `CustomerParser` class to parse the user command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "image::ModelArchitecture_alternative_.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* stores the customer, restaurant, deliverymen and order data."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003c\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* can save the customer, restaurant, deliverymen and order data in json format and read it back."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Classes used by multiple components are in the `seedu.deliverymans.commons` package."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003d\u003d\u003d Undo/redo feature"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "etlow"
        },
        "content": "The undo/redo feature lets users undo and redo changes to the data stored in the app, which were"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "etlow"
        },
        "content": "effected by commands they have executed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "etlow"
        },
        "content": "The main class containing the states of the data in the app is `UndoHistory`. The history is"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "etlow"
        },
        "content": "represented as a list of states. It includes the following methods:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "etlow"
        },
        "content": "* `notifyChange()` -- Saves the current state in the history if it is not equal to the previous"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "etlow"
        },
        "content": "state, as defined by its `equals()` method."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "etlow"
        },
        "content": "* `undo()` -- Moves its internal pointer backwards and returns the previous state."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "etlow"
        },
        "content": "* `redo()` -- Moves its internal pointer forwards and returns the next state."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "etlow"
        },
        "content": "`ModelManager` contains an `UndoHistory`, and exposes its functionality via similarly named"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "etlow"
        },
        "content": "methods. When `undo()` or `redo()` of `ModelManager` is called, it sets its own data to that"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "etlow"
        },
        "content": "returned by the respective methods of `UndoHistory`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "etlow"
        },
        "content": "Step 1. The user launches the application for the first time. The `UndoHistory` will be initialized with the initial address book state, and the `current` state pointer pointing to that single address book state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "etlow"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. After each command, `LogicManager` calls `Model#notifyChange()`, causing the modified state of the data after the `delete 5` command executes to be saved in the `history` list, and the `current` state pointer is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "etlow"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. `LogicManager` calls `Model#notifyChange()` again, causing another modified state to be saved into the `history` list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "etlow"
        },
        "content": "If a command does not modify the data, when `UndoHistory` checks whether the current data is equal"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "etlow"
        },
        "content": "to the data in the previous state according to its `equals()` method, it will realise that it is"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "etlow"
        },
        "content": "indeed equal. It will then not store the state into the `history` list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "etlow"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undo()`, which will shift the `current` state pointer once to the left, pointing it to the previous state, and restores the data to that state."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "etlow"
        },
        "content": "If the `current` state pointer is at index 0, i.e. pointing to the initial state, then there are no previous states to restore. The `undo` command uses `Model#hasUndo()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "etlow"
        },
        "content": "image::UndoSequenceDiagram1.png[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "etlow"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redo()`, which shifts the `current` state pointer once to the right, pointing to the previously undone state, and restores the data to that state."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "etlow"
        },
        "content": "If the `current` state pointer is at index `history.size() - 1`, i.e. pointing to the latest address book state, then there are no undone states to restore. The `redo` command uses `Model#hasRedo()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "etlow"
        },
        "content": "Step 5. The user then decides to execute the command `list`. If a command does not modify the data, it will not be stored in the undo history as `UndoHistory` checks for equality with the previous state. Thus, the `history` list remains unchanged."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "etlow"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#notifyChange()`. Since the `current` state pointer is not pointing at the end of the `history` list, all address book states after the `current` state pointer will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "etlow"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "// tag::autocomplete commands[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d Autocomplete commands feature"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "This is a feature which allows you to view all available commands matching the input keyword or letters, eliminating the need to memorize the commands or leave a browser tab open with the UG/DG of this application."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "The autocomplete mechanism is facilitated by the ‘KeyListener’, which will pass the current character that is being pressed on the keyboard to the trie, a tree-like abstract data type (ADT). The list of matching commands will then be passed back to the ‘Ui’ and displayed via a dropdown box below the user input command box."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Given below is an example usage scenario and how the autocomplete mechanism behaves at each step."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Step 1: The user launches the application. The current user input command box will be empty."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "*insert picture of the ui at startup*"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Step 2: The user wants to switch to the customer context for customer-focused commands with the command ‘customer’, however is unsure how to spell the command and types in ‘cus’. The ‘KeyListener’ passes the characters that have been typed to the trie. The trie searches for relevant commands and pass them as a list to the ‘Ui’, which displays the relevant results in a dropdown box below the user input command box."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "*insert picture of \u0027cus\u0027 being typed in/ class diagram*"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Step 3: The user can now complete the command he/she wants by entering the relevant command shown in the dropdown box."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "*insert picture of the ui with the dropdown box*"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "The following activity diagram summarizes what happens when a user types in letters into the user input command box:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "*insert picture of activity diagram*"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Below are a few design considerations of the autocomplete commands feature."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How autocomplete executes"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* **Alternative 1 (current choice):** Use a ‘KeyListener’ to record and handle user inputs in the user input command box before they are entered."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Pros: Looks nice, allows for on-the-fly display of results."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Cons: Laborious to implement, especially in terms of debugging and troubleshooting. May also break OOP principles."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* **Alternative 2:** Handle user input only when the command is entered, utilizing the ‘Parser’ to  handle user inputs and pass it to the trie to be evaluated."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Pros: Adheres to current flow of command executions, will not break any OOP principles."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Cons: Tedious for the user, as the user will have to retype the whole command again. Also does not look as nice."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the autocomplete commands feature"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* **Alternative 1 (current choice):** Use a trie to store substrings of commands as keys."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Pros: Efficient and rapid searching, retrieving and displaying of results due to the tree-like ADT."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Cons: Tedious to implement, tries are not currently implemented in Java, hence requires self-implementation of the ADT."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* **Alternative 2:** Use a list to store all current commands ."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Pros: Easy to implement as lists are already available in Java."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Cons: Inefficient and slow searching, because of the need to iterate through the entire list of commands, while calling ‘.substring()’ and ‘.contains()’ methods."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "// end::autocomplete commands[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "// tag::orders[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d Order Manager"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Order Manager is an address book of Orders and has some useful functions specifically catered towards the ease of management of orders."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Firstly, the automated allocation of deliveryman once new orders are added. When a new order is created on the database, a deliveryman will be assigned to deliver the order based on whether he/she is present as well as whether he/she is currently preoccupied with delivering another order. This helps to ease the burden on the user as they would not need to manually allocate deliverymen to the orders. However, the feature to manually allocate is still present if the user wishes to do so."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Secondly, the Order Manager allows for sorting of orders, based on date, customer, restaurant, menu or even deliveryman, depending on what information the user wishes to see to allow for better management."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Additionally it implements the following operations:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* `-add_order` - adds an order to the database."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* `-edit_order` - edits an existing order in the database."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* `-delete_order` - removes an existing order in the database."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "These operations are exposed in the `ModelManager` class as `ModelManager#addOrder(Order order)`, `ModelManager#setOrder(Order target, Order editedOrder)` and `ModelManager#deleteOrder(Order order)` respectively."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Order manager follows the AB3 style and implements its own \u0027Model\u0027, \u0027Command\u0027 and \u0027Parser\u0027 for the \u0027Logic Component\u0027, `JsonOrderDatabaseStorage`, `JsonSerializableOrderDatabase` and `JsonAdaptedOrder`, along with methods in the `StorageManager` for the `Storage Component` and lastly, `OrderCard` and `OrderListPanel` for displaying on the `Ui Component`."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "*insert object diagrams here + brief explanation of object diagrams*"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "**Add command:** `-add_order`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "The add command adds an order to the `ModelManager` and `UniqueOrderList`. The `UniversalParser` invokes `AddOrderCommandParser#parse()`, which parses the target **customer**, **restaurant**, **food** and **quantity** from a *String* into *Name* and *Integer* objects."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Only valid **customer**, **restaurant**, **food** and **quantity** are allowed. This validation is done through accessing `UniqueCustomerList` and `UniqueRestaurantList` through `ModelManager#getFilteredCustomerList()`, `ModelManager#getFilteredRestaurantList()` and calling their respective `isValidName()` methods. **Food** validity will be checked through retrieving the respective using `Restaurant#getMenu()` and `Menu#isValidName()`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Duplicated `Order` will be checked for using `ModelManager#hasOrder()` and is then added to the `UniqueOrderList` via `ModelManager#addOrder()`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "**Delete command:** `-delete_order`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "The delete command deletes an `Order` from the `ModelManager` and `UniqueOrderList` by a specified index. The `UniversalParser` invokes `DeleteOrderCommandParser#parse()` and user input is used to get the index of the `Order` to be deleted."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Below are a few design considerations of the Order manager class."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure for modelling, storage and utilization of `Order`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* **Alternative 1 (current choice):** Make use of existing data structures present in AB3 as reference to create new data structures needed for the implementation of a Order Manager."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Pros: Straightforward to implement as existing references are present in \u0027Person\u0027 of AB3."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Cons: Tedious to implement as several regions of the codebase needs to be edited for `Order` to run, display and save successfully."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* **Alternative 2:** Implement data structures from scratch."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Pros: Pride and accomplishment of implementing something from scratch."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Cons: Takes too much time to code the necessary classes."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "// end::orders[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "// tag::deliverymen statistics"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d Deliverymen salary adjustment feature"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This is a feature which allows the user to keep track of the deliverymen who have met the requirements for a salary increment"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "based on their delivery rate and duration of service. It extends DeliveryMANS with a delivery record for every deliveryman as well as relevant analysis of the record."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "The salary adjustment feature is primarily monitored by the \u0027Analyzer\u0027, which has access to the delivery record of every deliveryman in the database. From the record, the Analyzer computes two data:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* Delivery rate"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** This is the number of orders per day."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* Time in database"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** This is the time difference between the time when the deliveryman was added to the database and the current time when command is executed."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "With these structure, it implements the following operations:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* `DeliverymenDatabase#getHistoryOf(Deliveryman index)` -- Enters the delivery record of a specified deliveryman."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* `DeliverymenDatabase#suggestPayList()` -- Obtains a list of deliverymen who are eligible for pay rise."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Given below is an example usage scenario and how the `suggestPayList` function works."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Step 1. Hooray! It\u0027s the time of the month for the restaurant to adjust the workers\u0027 pay. The restaurant admin, who is in charge of managing the deliverymen, types in the `paylist` command."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "The command will access the `UniqueDeliverymenList` in order to obtain the list of deliverymen."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Step 2. For each deliveryman on the list, their delivery record will be analyzed."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* Time in data base: The current time will be obtained and the difference between the current time and the time of joining the database will be taken."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* Delivery rate: The number of orders completed over the time in database will be the delivery rate."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Step 3. If the delivery rate exceeds a certain threshold, the deliveryman will be added to the pay list."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "The following sequence diagram summarizes what happens when a user types in letters into the user input command box:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "image::PayRiseSequenceDiagram.png[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Tracking the record of every deliveryman"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This feature necessitates the tracking of the orders each deliveryman has completed."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* Alternative 1(current choice): Saves the number of completed orders for each deliveryman and write to hard disk."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** Pros: Easy to implement and takes up less memory."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** Cons: The details of the order cannot be tracked, even though they might be a potential criteria for pay rise."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* Alternative 2: Saves the specific completed orders (including the content of order) and write to hard disk."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** Pros: Allows for a thorough and more accurate analysis for suggesting pay rise"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** Cons: Takes up significant amount of memory"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "// end::deliverymen statistics"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d EditMode"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "A `Restaurant` object contains many attributes. On top of a `Name`, `Location`, `Rating` and a list of `Tag`,"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "it also includes a list of `Food` as its menu. This makes it difficult to edit an entire `Restaurant` object"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "using just one `Command`. The EditMode feature allows editing of a specific `Restaurant` object\u0027s details and menu"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "separately under 1 mode, using different commands."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* **Model**:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "In addition to the `filteredRestaurantList` that contains all the restaurants in the restaurant database,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "`ModelManager` now contains a `editingRestaurantList`, which contains and allows access to the restaurant"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "currently under EditMode. Upon calling of `editmode INDEX` command, the restaurant"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "referenced by the `INDEX` in the list of restaurants will be placed in the `editingRestaurantList`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Subsequent commands that edit the restaurant, such as `addFoodCommand`, `addRatingCommand` and `editDetailsCommand`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "will create a new restaurant with the edited attributes and replace the restaurant in the `editingRestaurantList`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "with the new edited restaurant."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* **Logic**:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "The `Logic` for EditMode is facilitated by `Context` enum type, which contains the following constants:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "`GLOBAL`, `CUSTOMER`, `RESTAURANT`, `DELIVERYMEN` and `EDITING`. It determines the `Context` the application is in,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "as well as the commands the user can access."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "It is contained inside `UniversalParser` as an attribute. When the user inputs the command,"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "`userInput` will always be parsed by `UniversalParser` first, regardless of the current `Context`."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "The reason for this is to check for universal commands, which are accessible in all `Context`."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Subsequently, if the command word in `userInput` matches none of the universal commands, then `UniversalParser`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "will create a context specific `Parser` based on the current `Context` it is in, which takes over and parses the"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "`userInput`. Any context switching command will then change the `Context` in `UniversalParser`."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "The following class diagram shows the structure of the `UniversalParser`:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "NOTE: Insert PNG for ParserClassDiagram.puml"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "//The `editModeCommand` is only accessible if current `Context` in `UniversalParser` is `Context.RESTAURANT`."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "//The `switch` command will change the current context to `Restaurant`, while"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "//the `editmode` command will change the current context to `Editing`,"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "//the `exitedit` command will exit the `Editing` context and return to the `Restaurant` context."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "//and commands for EditMode can only be accessed / unlocked if under `Editing` Context."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "The following activity diagram summarises what happens when the user enters the command to enter EditMode:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "NOTE: Insert PNG for ParserActivityDiagram.puml"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* **UI**:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Commands that change the `Context`, and hence the UI, will pass the new `Context` to `MainWindow` in the Ui package"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "via the `CommandResult` returned by the command."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "When `MainWindow` receives this , it will do the changes to the Ui accordingly via the function call"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "`MainWindow#changeDisplay()`."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "`editModeCommand` changes the `Context` to `Context.EDITING`. `MainWindow` will then display an extra `StackPane`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "showing the restaurant under EditMode, while the `StackPane` displaying the list of Restaurants"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "originally will be filled with the restaurant\u0027s `Food` menu instead."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Once `exitEditCommand` is called, `Editing` context is exited, the stackpane will be hidden,"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "and the list of restaurants will be shown again."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "The following sequence diagram summarises how the `editModeCommand` changes the Ui:"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "NOTE: Insert PNG for MainWindowSequenceDiagram.puml"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* **Alternative 1:**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* has to juggle among several fronts (customer side, deliverymen side and restaurant side) and act as the point of contact among them"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* prefers a centralised app that brings all 3 fronts together for better management"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "*Value proposition*: Our application allows better management of all fronts for delivery-service-command-centre administrators, and allows for more efficiency and control in handling of daily tasks."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|Priority |As an ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`* * *` |Administrator |check on all of/ sort the deliverymen at once |better manage the deliverymen"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`* * *` |Administrator |help customers add/edit/remove orders |better manage customers\u0027 orders"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`* * *` |Administrator |see the expected timings of the orders |know the priority of the orders"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "|`* * *` |Administrator |add and remove food items from restaurants\u0027 menu  |update restaurants\u0027 menu"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "|`* * *` |Administrator |add and remove restaurants |update the list of restaurants in the database"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "|`* * *` |Administrator |edit restaurants\u0027 details |update the details of restaurants"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "|`* * *` |Administrator |add ratings for restaurants |update the displayed ratings of restaurants"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`* *` |Administrator |see the location of the deliverymen currently |track the progress of delivery (and update customers accordingly)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`*` |Administrator |view the schedule of deliverymen |see how many times deliverymen have delivered and reward them for their hard work"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "etlow": 30,
      "ryantay232": 27,
      "MackyMaguire": 70,
      "SoilingRogue": 95,
      "-": 372,
      "charliechoong": 70
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 215
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003d DeliveryMANS – User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "By: `Team AY1920S1-CS2103-T12-2`   Since: `Sept 2019`  Licence: `NUS`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "*DeliveryMANS* is a command-line application designed specifically for delivery centre administrators who are in charge of food delivery service. It encompasses a well-structured system for users to keep track and manage the entire delivery process. It facilitates food delivery service by coaliasing the delivery men, customers and restaurant menu. From auto-assigning deliverymen for deliveries when orders are made, to viewing statistics of the most popular dish of restaurants as well as customer ordering trends for further promotions, financial and business management decisions, *DeliveryMANS* is everything you need to help improve managing deliveries. With just a few simple commands, this delivery manager can help to kickstart your delivery service."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Get started with \u003c\u003cQuick Start\u003e\u003e and begin managing your deliveries today!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d Quick start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Ensure you have Java 11 or above installed on your computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Click https://github.com/AY1920S1-CS2103T-T12-2/main/releases[here] to download the JAR file for *DeliveryMANS*."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Open the application to begin. Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "// tag::features[]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "**Command Types**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* In *DeliveryMANS*, there are 2 types of commands: universal commands and context-specific commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* Universal commands can be called under any context in the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* Context-specific commands can only be accessed in a specific context. Context-specific commands comprise customer,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "restaurant and deliverymen commands, which can only be called under the customer, restaurant and deliverymen context"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "respectively."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**Command Format**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* Command words for universal commands are prepended with \"-\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Example Usage: `-help`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* Words in `UPPER_CASE` are parameters to be supplied by the user e.g. in `-add_order c/CUSTOMER r/RESTAURANT f/FOOD q/QUANTITY`,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "`CUSTOMER`, `RESTAURANT`, `FOOD` and `QUANTITY` are parameters to be supplied."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "** Example Usage: `-add_order c/Donald Trump r/KFC f/Chicken Bucket q/100`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* Items with `…` after them can be used multiple times e.g. `f/FOOD...` can be used 1 or more:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "** Example Usage: `f/3 Piece Chicken Meal` or `f/Pepperoni Pizza f/Char Kway Teow`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* Items with `[]` are optional and can be omitted e.g. `[t/TAG]...`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "// end::features[]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "// tag::universalCommand[]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d Universal commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "These are general commands to assist you in controlling the app, which are not directly related to the customer,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "restaurant and deliverymen."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `-help`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "This generates a list of commands and tips for you."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-help`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Example: `-help`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Switching context"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "This command switches to a specific context for you to enter targeted commands. The list of contexts include:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "customer, deliveryman and restaurant. By default, the application will be in the universal context upon startup."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Switching to customer context: `-customer`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This command switches to the customer context for you to enter customer-specific commands."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-customer`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Switching to restaurant context: `-restaurant`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This command switches to the restaurant context for you to enter restaurant-specific commands."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-restaurant`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Switching to deliveryman context: `-deliverymen`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This command switches to the deliveryman context for you to enter deliveryman-specific commands."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-deliverymen`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an order: `-add_order`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "This command allows you to add a new order to the database to be processed. The deliveryman to deliver the order will be allocated"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "automatically based on the internal algorithms."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-add_order c/CUSTOMER r/RESTAURANT f/FOOD... q/QUANTITY...`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Example:  `-add_order c/Donald Trump r/KFC f/Chicken Bucket q/100`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[start]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Example use case"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". Type the command statement from the example above into the program and press *Enter* to execute it."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\AddOrder1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". If you are successful, the result box displays the message: \"\"."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\AddOrder2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". The order list shows the newly added order."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\AddOrder3.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* A valid customer `c/CUSTOMER`, restaurant `r/RESTAURANT` and restaurant menu item `f/FOOD` must be provided and"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "exists currently in the database."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* The quantity of food `q/QUANTITY` to be delivered also be provided and be greater than 0."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Tip"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* Fill in the restaurant `r/RESTAURANT` before entering the restaurant menu item `f/FOOD` for the autocompletion feature to load the list of that restaurant\u0027s menu in a drop down box for you."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\autocomplete1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Assigning an order: `-assign_order`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "This command allows you to automatically assign an available deliveryman to an existing order in the database based on the internal algorithms."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-assign_order n/ORDERNAME`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Example:  `-assign_order n/Order 1`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[start]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Example use case"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". Type the command statement from the example above into the program and press *Enter* to execute it."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\AssignOrder1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". If you are successful, the result box displays the message: \"\"."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\AssignOrder1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". The order list shows the newly assigned order."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\AssignOrder1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* The order name `n/ORDERNAME` must exist in the order list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Completing an order: `-complete_order`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "This command allows you to complete an order in the database by its order name. The next unassigned order, if any, will automatically be assigned to an available deliveryman in the database."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-complete_order n/ORDERNAME`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Example:  `-complete_order n/Order 1`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[start]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Example use case"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". Type the command statement from the example above into the program and press *Enter* to execute it."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\CompleteOrder1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". If you are successful, the result box displays the message: \"\"."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\CompleteOrder2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". The order list shows the delivery status of the order as completed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\CompleteOrder3.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* A deliveryman must already be assigned to the order before it can be completed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* The order name `n/ORDERNAME` must exist in the order list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Editing an order: `-edit_order`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "This command enables you to edit an order. The order to edit will have to be specified by its order name when you are entering the command."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "You can change:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* The customer `c/CUSTOMER` who made the order"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* The restaurant `r/RESTAURANT` which the order was made from"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* The food `f/FOOD` ordered as well as its quantity `q/QUANTITY`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-edit_order n/ORDERNAME [c/CUSTOMER] [r/RESTAURANT] [f/FOOD]... [q/QUANTITY]...`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Example: `-edit_order n/Order 1337 c/John Doe`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[start]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Example use case"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". Type the command statement from the example above into the program and press *Enter* to execute it."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\EditOrder1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". If you are successful, the result box displays the message: \"\"."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\EditOrder2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". The order list shows the updated order."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\EditOrder3.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* The order name `n/ORDERNAME` must exist in the order list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* A customer `c/CUSTOMER`, restaurant `r/RESTAURANT` or restaurant menu item `f/FOOD` provided must be valid and exists currently in the database."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* Optional items with \u0027[]\u0027 tags may be ommitted e.g. `[r/RESTAURANT]`. However at least 1 tag has to be present for the order to be edited."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Tip"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* Fill in the restaurant `r/RESTAURANT` before entering the restaurant menu item `f/FOOD` for the autocompletion feature to load the list of that restaurant\u0027s menu in a drop down box for you."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\autocomplete1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an order: `-delete_order`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "This command enables you to delete an unwanted/cancelled order in the database by its order name."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-delete_order n/ORDERNAME`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Example: `-delete_order n/Order 1`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[start]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Example use case"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". Type the command statement from the example above into the program and press *Enter* to execute it."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\DeleteOrder1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". If you are successful, the result box displays the message: \"\"."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\DeleteOrder2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". The order list shows that the order has been deleted."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\DeleteOrder3.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* The order name `n/ORDERNAME` must exist in the order list."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all orders: `-list_orders`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "This command enables you to view all orders currently in the database."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-list_orders`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Example: `-list_orders`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[start]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Example use case"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". Type the command statement from the example above into the program and press *Enter* to execute it."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\ListOrder1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". If you are successful, the result box displays the message: \"\"."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\ListOrder2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ". The order list shows all orders currently in the database."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::userguide\\ListOrder3.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing a command: `-undo`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "etlow"
        },
        "content": "This command undoes the effects of a command that you have previously executed."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-undo`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Say you have accidentally executed a command and now want to reverse it. Just type `-undo` into the"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "etlow"
        },
        "content": "command line and press Enter like any other command. The result pane will then show the following:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "etlow"
        },
        "content": "Successfully undid: (your previous command here)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "The command which you last performed has now been reversed. Subsequent invocations of `-undo` will"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "etlow"
        },
        "content": "reverse commands which you have performed even earlier."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing a command: `-redo`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "etlow"
        },
        "content": "This command redoes the effects of a command that you have just undone, in effect undoing an undo."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Similarly to `-undo`, this command can be used multiple times in succession to bring back multiple"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "etlow"
        },
        "content": "commands which you have undone earlier."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-redo`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "After performing `-redo`, the result pane will show:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "etlow"
        },
        "content": "Successfully redid: (your previous command here)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting program: `-exit`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This command exits the program."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Format: `-exit`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "// end::universalCommand[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "// tag::customerCommand[]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d Customer commands"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "These are commands pertaining to customer context of *DeliveryMANS*. The screenshot below shows how the customer context will look like in *DeliveryMANS*."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " screenshot of finalised DeliveryMANS showing customer list goes here"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "This is a customer and its information."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " screenshot of finalised CustomerCard"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a customer: `add`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "This command allows you to add a new customer to the customer list. `USERNAME`, `NAME`, `PHONE` and `ADDRESS` are necessary to a customer."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "The `USERNAME` of customer cannot be changed after adding."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Format: `add u/USERNAME n/NAME p/PHONE ad/ADDRESS`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Example: `add u/JohnDoe n/John Doe p/91234567 ad/311, Clementi Ave 2, #02-25`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a customer: `edit`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "This command allows you to edit an existing customer in the customer list. The index of a customer needs to be provided while the information to edit are optional. For example, you can edit the customer\u0027s `NAME` without editing `PHONE`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [a/ADDRESS]`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Example: `edit 1 n/John Hoe p/97654321`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* The index `INDEX` provided must be within the customer list size and be greater than or equals to 1."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a customer: `delete`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "This command allows you to delete an existing customer in the customer list. The index of a customer needs to be provided."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Example: `delete 1`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* The index `INDEX` provided must be within the customer list size and be greater than or equals to 1."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing a customer\u0027s order history: `history`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "This command allows you to view a customer\u0027s order history. The index of a customer needs to be provided."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Format: `history INDEX`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Example: `history 1`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* The index `INDEX` provided must be within the customer list size and be greater than or equals to 1."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "// end::customerCommand[]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "// tag::restaurantCommand[]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d Restaurant commands"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Commands in the restaurant context"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a restaurant: `add`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "This command adds a restaurant to the restaurant database."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Format: `add n/NAME l/LOCATION [t/TAG]...`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* `LOCATION` can only be one of the following locations: Jurong, Tuas, Woodlands, Bishan, City,"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Marina, Changi, Punggol."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Example: `add n/KFC l/Jurong t/FastFood`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a restaurant: `delete`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "This command deletes the restaurant at the specified index in the restaurant list from the restaurant database."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* `INDEX` must be a positive integer from 1 to n, the number of restaurants in the restaurant list."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Example: `delete 1`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ".Note:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* Deleting a restaurant will delete all its existing orders from the order database as well."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d Entering EditMode: `edit`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "This command enters EditMode for the restaurant identified by the specified index in the restaurant list."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Displays the restaurant\u0027s details, menu and current orders."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Unlocks commands for editing details, adding and removing of food items"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "in the menu, and adding of rating."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Format: `edit INDEX`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* `INDEX` must be a positive integer from 1 to n, the number of restaurants in the restaurant list."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Example: `edit 3`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "image::userguide\\EditMode.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d Editing restaurant\u0027s details (under EditMode): `editdetails`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "This command edits the details of the restaurant under EditMode."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Format: `editdetails [n/NAME] [l/LOCATION] [t/TAG]…​`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* When editing tags, the existing tags of the restaurant will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* You can remove all the restaurant’s tags by typing t/ without specifying any tags after it."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Example: `editdetails n/New KFC l/Tuas`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "image::userguide\\EditDetails.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ".Note:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* Editing a restaurant\u0027s name will edit the restaurant name in all its existing orders as well."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d Adding food item (under EditMode): `add`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "This command adds a food item to the menu of the restaurant under EditMode."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Format: `add n/NAME a/PRICE [t/TAG]...`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* You can only tag a food item as \"Recommended\"."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Example: `add n/Chicken a/7.90 t/Recommended`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting food item (under EditMode): `delete`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "This command deletes the food item at the specified index in the menu of the restaurant under EditMode."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* `INDEX` must be a positive integer from 1 to n, the number of food items in the restaurant\u0027s menu."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Example: `delete 1`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ".Note:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* Deleting a food item from a restaurant will NOT delete the food item in the restaurant\u0027s orders as"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "the order was already made when the food item still existed."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a rating (under EditMode): `rate`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "This command adds a rating to the restaurant under EditMode and updates the new average rating of all the ratings"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "added to date."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Format: `rate RATING`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* `RATING` must be a non-negative integer from 0 to 5."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Example: `rate 4`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "image::userguide\\AddRating.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting EditMode: `exitedit`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "This command exits EditMode for the specific restaurant and returns to the list of restaurants"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Format: `exitedit`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d Auto-tagging of food item as \"Popular\""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Food items with quantity ordered more than 1.5 times the average quantity ordered of food items in the restaurant"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "will be auto-tagged as \"Popular\"."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ".Note:"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "* Food items\u0027 quantity ordered will only be updated upon completion of an order."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d Deliverymen commands"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "These are the commands you can use after entering the deliverymen context (via the command `deliverymen`)."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a deliveryman: `add`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This command allows you to add a new deliveryman to the deliverymen database. Name and phone number are compulsory fields."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: `add n/NAME p/PHONE`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: `add n/John Doe p/91234567`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* add reqs here"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a deliveryman: `edit`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This command allows you to edit an existing deliveryman in the deliverymen database. You must edit at least one field"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "(eg. name, phone number)."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "NOTE: Editing the info of a deliveryman will reset the status of the deliveryman to *UNAVAILABLE*. You will have"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "to switch it back to *AVAILABLE* through the `status` command explained in _Section 3.4.5_."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE]`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: `edit 1 n/John Hoe p/97654321`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* add reqs here"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a deliveryman: `delete`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This command allows you to delete an existing deliveryman in the deliverymen database. You only have to provide the"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "index of the deliveryman."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: `delete 1`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* add reqs here"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d\u003d Listing status lists of deliverymen: `lista`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This command allows you to view all the deliverymen sorted according to their statuses. For your easy navigation,"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "you can click on any of the three buttons to show the status list that you wish to view"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "*(Yes, it took me one whole day to learn JavaFX and implement that shit)*, as shown in Fig X.Y below."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "`(Diagram to be added here)`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "NOTE: A deliveryman can have one of the 3 statuses: *AVAILABLE*, *UNAVAILABLE*, *DELIVERING*."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: `lista`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: `lista`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d\u003d Changing status of a deliveryman: `status`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This command allows you to switch the status of a deliveryman between *AVAILABLE* and *UNAVAILABLE*. Using this command"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "will prompt the status lists as well (that can be done through `lista` command explained in _Section 3.4.4_)."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "NOTE: You are not allowed to change the status of a deliveryman who has the status *DELIVERING*. Completion of the"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "the assigned delivery will automatically set it back to *AVAILABLE*."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: `status INDEX`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: `status 3`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* add reqs here"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the statistics of the deliverymen statuses: `stats`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This command allows you to view the statistics of the current statuses of deliverymen. Relevant statistics such as the"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "utilisation level will also be computed and displayed for your reference."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: `stats`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d\u003d Entering a specific deliveryman: `enter`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "This command allows you to view a deliveryman\u0027s basic information."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "WARNING: This is half-implemented. But you can still use it. For fun. But if you have time."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: `enter INDEX`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: `enter 1`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ".Requirements"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "* add reqs here"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d Command summary"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**Command:** format"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* Universal commands"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- View help: `-help`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- Add order: `-add_order c/CUSTOMER r/RESTAURANT f/FOOD... q/QUANTITY...`"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- Assign order: `-assign_order n/ORDERNAME`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- Complete order: `-complete_order n/ORDERNAME`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "- Edit order: `-edit_order n/ORDERNAME [c/CUSTOMER] [r/RESTAURANT] [f/FOOD]... [q/QUANTITY]...`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- Delete order: `-delete_order n/ORDERNAME`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- List orders: `-list_orders`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- Switch to restaurant context: `-restaurant`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- Switch to customer context: `-customer`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- Switch to deliverymen context: `-deliverymen`"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- Undo command: `-undo`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- Redo command: `-redo`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "- Exit application: `-exit`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* Customer commands"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "- Add a customer: `add u/USERNAME n/NAME p/PHONE ad/ADDRESS`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "- Edit a customer: `edit INDEX [n/NAME] [p/PHONE] [ad/ADDRESS]`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Delete a customer: `delete INDEX`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- View a customer\u0027s order history: `history INDEX`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* Restaurant commands"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Add a restaurant: `add n/NAME l/LOCATION [t/TAG]...`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Delete a restaurant: `delete INDEX`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Enter EditMode: `edit INDEX`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "- Edit a restaurant\u0027s details (under EditMode) : `editdetails [n/NAME] [l/LOCATION] [t/TAG]…​`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "- Add a food item (under EditMode) : `add n/NAME a/PRICE [t/TAG]...`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "- Delete a food item (under EditMode) : `delete INDEX`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "- Add a rating (under EditMode) : `rate RATING`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "- Exit EditMode (under EditMode) : `exitedit`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* Deliverymen commands"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Add a deliveryman: `add n/NAME p/PHONE`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Delete a deliveryman: `delete INDEX`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Edit a deliveryman: `edit INDEX [n/NAME] [p/PHONE]`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- List deliverymen sorted by status: `lista`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Switch status of a deliveryman: `status INDEX`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- View statistics for deliverymen current statuses: `stats`"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- List specific deliveryman info: `enter INDEX`"
      }
    ],
    "authorContributionMap": {
      "etlow": 17,
      "ryantay232": 41,
      "MackyMaguire": 161,
      "SoilingRogue": 307,
      "-": 68,
      "charliechoong": 146
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteCustomer(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveCustomerDatabase(customerDatabase)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 2,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "DeleteCommand -\u003e Model : deleteCustomer(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 1,
      "-": 68
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Class CustomerParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "LogicManager --\u003e\"1\" CustomerParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "CustomerParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/MainWindowSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "participant \"EditModeCommand\" as EditModeCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "participant \"cr:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "participant \"Context\" as Context LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "[-\u003e MainWindow : executeCommand(\"edit 1\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "MainWindow -\u003e LogicManager : execute(\"edit 1\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "LogicManager -\u003e EditModeCommand : execute()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "activate EditModeCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "EditModeCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "CommandResult --\u003e EditModeCommand : cr"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "EditModeCommand --\u003e LogicManager : cr"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "deactivate EditModeCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "LogicManager --\u003e MainWindow : cr"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "MainWindow -\u003e CommandResult : getContext()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "CommandResult --\u003e MainWindow : context"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "opt isNewContext"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     MainWindow -\u003e MainWindow : changeDisplay()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     activate MainWindow"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     deactivate MainWindow"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "end"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "[\u003c--MainWindow"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 51
    }
  },
  {
    "path": "docs/diagrams/ModelArchitecture(alternative).puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class CustomerDatabase"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class DeliverymenDatabase"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class RestaurantDatabase"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class UniqueCustomerList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class UniqueDeliverymenList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class UniqueRestaurantList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Customer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Deliveryman"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Restaurant"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Food"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Location"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Rating"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Package Order {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Order"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Package Status {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class StatusManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Status"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class UniqueStatusList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Model .left.\u003e ObservableList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "ModelManager o--\u003e \"1\" CustomerDatabase"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "ModelManager o--\u003e \"1\" DeliverymenDatabase"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "ModelManager o--\u003e \"1\" RestaurantDatabase"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "CustomerDatabase o--\u003e \"1\" UniqueCustomerList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenDatabase o--\u003e \"1\" UniqueDeliverymenList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenDatabase o--\u003e \"1\" StatusManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "RestaurantDatabase o--\u003e \"1\" UniqueRestaurantList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "UniqueCustomerList o--\u003e \"*\" Customer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "UniqueDeliverymenList o--\u003e \"*\" Deliveryman"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "UniqueRestaurantList o--\u003e \"*\" Restaurant"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "UniqueStatusList o--\u003e Status"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "StatusManager o--\u003e UniqueStatusList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Customer o--\u003e Name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Customer o--\u003e Phone"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Deliveryman o--\u003e Name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Deliveryman o--\u003e Phone"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Deliveryman o--\u003e Status"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Restaurant o--\u003e Name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Restaurant o--\u003e Food"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Restaurant o--\u003e Location"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Restaurant o--\u003e Rating"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Restaurant o--\u003e \"*\" Order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Order o-[hidden]left-\u003e Food"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Status o-[hidden]left-\u003e Deliveryman"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "StatusManager o-[hidden]right-\u003e UniqueDeliverymenList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenDatabase o-[hidden]right-\u003e CustomerDatabase"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 69
    }
  },
  {
    "path": "docs/diagrams/ModelArchitecture.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class CustomerDatabase"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class DeliverymenDatabase"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class RestaurantDatabase"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class UniqueCustomerList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class UniqueDeliverymenList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class UniqueRestaurantList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class StatusManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class UniqueStatusList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Customer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Deliveryman"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Restaurant"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Food"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Location"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Rating"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Status"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Package Order {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Class Order"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "ModelManager o--\u003e \"1\" CustomerDatabase"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "ModelManager o--\u003e \"1\" DeliverymenDatabase"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "ModelManager o--\u003e \"1\" RestaurantDatabase"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "CustomerDatabase o--\u003e \"1\" UniqueCustomerList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenDatabase o--\u003e \"1\" UniqueDeliverymenList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenDatabase o--\u003e \"1\" StatusManager"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "RestaurantDatabase o--\u003e \"1\" UniqueRestaurantList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "UniqueCustomerList o--\u003e \"*\" Customer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "UniqueDeliverymenList o--\u003e \"*\" Deliveryman"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "UniqueRestaurantList o--\u003e \"*\" Restaurant"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "StatusManager o--\u003e UniqueStatusList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "UniqueStatusList o--\u003e Status"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Customer o--\u003e Name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Customer o--\u003e Phone"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Deliveryman o--\u003e Name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Deliveryman o--\u003e Phone"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Deliveryman o--\u003e Status"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Restaurant o--\u003e Name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Restaurant o--\u003e Food"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Restaurant o--\u003e Location"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Restaurant o--\u003e Rating"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Restaurant o--\u003e \"*\" Order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Order o-[hidden]left-\u003e Food"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 67
    }
  },
  {
    "path": "docs/diagrams/ParserActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ":UniversalParser parses command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "if () then ([command is universal command])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    :Return universal command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    :ContextParser parses command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    :Return context command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "endif"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ":Executes command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 14
    }
  },
  {
    "path": "docs/diagrams/ParserClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "abstract class AbstractList"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "abstract AbstractCollection"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "interface List"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "interface Collection"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "List \u003c|-- AbstractList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Collection \u003c|-- AbstractCollection"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Collection \u003c|- List"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "AbstractCollection \u003c|- AbstractList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "AbstractList \u003c|-- ArrayList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "class ArrayList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "Object[] elementData"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "size()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "enum TimeUnit {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "DAYS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "HOURS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "MINUTES"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Interface Parser \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Enum Context \u003c\u003cenumeration\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Class UniversalParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Class ContextParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Interface Logic \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "LogicManager --\u003e\"1\" UniversalParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "UniversalParser .right.\u003e ContextParser: creates \u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "UniversalParser .left.\u003e Context: contains \u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "UniversalParser ..|\u003e Parser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "ContextParser ..|\u003e Parser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "note right of ContextParser: ContextParser \u003d \\nCustomerParser, \\nRestaurantParser, \\nDeliverymenParser or \\nEditingParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 27,
      "SoilingRogue": 26
    }
  },
  {
    "path": "docs/diagrams/PayRiseSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "participant \":DeliverymenParser\" as DeliverymenParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "participant \"c:PayListCommand\" as PayListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "participant \":DeliverymenDatabase\" as DeliverymenDatabase MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "participant \":UniqueDeliverymenList\" as UniqueDeliverymenList MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "participant \":Deliveryman\" as Deliveryman MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "participant \":Analyzer\" as Analyzer MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "[-\u003e LogicManager : execute(paylist)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "LogicManager -\u003e DeliverymenParser : parseCommand(undo)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "activate DeliverymenParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "create PayListCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenParser -\u003e PayListCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "activate PayListCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "PayListCommand --\u003e DeliverymenParser : c"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "deactivate PayListCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "deactivate DeliverymenParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "LogicManager -\u003e PayListCommand : execute()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "activate PayListCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "PayListCommand -\u003e Model : getPayList()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Model -\u003e DeliverymenDatabase : getDeliverymen()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "activate DeliverymenDatabase"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenDatabase -\u003e UniqueDeliverymenList : getDeliverymen()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "activate UniqueDeliverymenList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "UniqueDeliverymenList -\u003e Deliveryman : getRecord()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "activate Deliveryman"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Deliveryman --\u003e UniqueDeliverymenList : r:Record"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "deactivate Deliveryman"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "UniqueDeliverymenList --\u003e DeliverymenDatabase : r:Record"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "deactivate UniqueDeliverymenList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenDatabase -\u003e Analyzer : plsAnalyzeThisRecord(r)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "activate Analyzer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Analyzer --\u003e DeliverymenDatabase: isEligible:Boolean(ok,bro)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "deactivate Analyzer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenDatabase -\u003e DeliverymenDatabase: p.addToListIfEligible()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "activate DeliverymenDatabase"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenDatabase --\u003e DeliverymenDatabase"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "deactivate DeliverymenDatabase"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliverymenDatabase --\u003e Model : p:List"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "deactivate DeliverymenDatabase"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Model --\u003e PayListCommand: p:List"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "PayListCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "deactivate PayListCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "PayListCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "destroy PayListCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 79
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Interface CustomerDatabaseStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Class JsonCustomerDatabaseStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "StorageManager o--\u003e CustomerDatabaseStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "JsonCustomerDatabaseStorage .left.|\u003e CustomerDatabaseStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "JsonCustomerDatabaseStorage .down.\u003e JsonSerializableCustomerDatabaseStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "JsonSerializableCustomerDatabaseStorage .right.\u003e JsonSerializableCustomer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "JsonSerializableCustomer .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 7,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Class CustomerListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Class CustomerCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "MainWindow *-down-\u003e CustomerListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "CustomerListPanel -down-\u003e CustomerCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "CustomerListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "CustomerCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "CustomerCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "CustomerListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 8,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "participant \":UniversalParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "participant \":UndoHistory\" as UndoHistory MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "AddressBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "UndoCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "AddressBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "UndoCommand -\u003e Model : undo()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "Model -\u003e UndoHistory : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "activate UndoHistory"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": "UndoHistory --\u003e Model : State"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "deactivate UndoHistory"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "Model -\u003e Model : setData(Data)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etlow"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etlow"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "etlow": 53
    }
  },
  {
    "path": "docs/team/ProjectPortfolioPage.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d Yuan Xinran, Stanley - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\\"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 12
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "The `address` field in `Person` is actually an instance of the `removed` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 61,
      "charliechoong": 3
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.database.OrderDatabase;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderDatabase;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.storage.customer.CustomerDatabaseStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.storage.customer.JsonCustomerDatabaseStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.storage.deliveryman.DeliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.storage.deliveryman.JsonDeliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.storage.order.JsonOrderDatabaseStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.storage.order.OrderDatabaseStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.restaurant.JsonRestaurantDatabaseStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.restaurant.RestaurantDatabaseStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.ui.Ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.ui.UiManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing DeliveryMANS... ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        CustomerDatabaseStorage customerDatabaseStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                new JsonCustomerDatabaseStorage(userPrefs.getCustomerDatabaseFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        DeliverymenDatabaseStorage deliverymenDatabaseStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                new JsonDeliverymenDatabaseStorage(userPrefs.getDeliverymenDatabaseFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        RestaurantDatabaseStorage restaurantDatabaseStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                new JsonRestaurantDatabaseStorage(userPrefs.getRestaurantDatabaseFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        OrderDatabaseStorage orderDatabaseStorage \u003d new JsonOrderDatabaseStorage(userPrefs.getOrderBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        storage \u003d new StorageManager(customerDatabaseStorage, deliverymenDatabaseStorage,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                restaurantDatabaseStorage, orderDatabaseStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Optional\u003cReadOnlyCustomerDatabase\u003e customerDatabaseOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Optional\u003cReadOnlyDeliverymenDatabase\u003e deliverymenDatabaseOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Optional\u003cReadOnlyRestaurantDatabase\u003e restaurantDatabaseOptional;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Optional\u003cReadOnlyOrderDatabase\u003e orderBookOptional;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ReadOnlyCustomerDatabase initialCustomerData;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        ReadOnlyDeliverymenDatabase initialDeliverymenData;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        ReadOnlyRestaurantDatabase initialRestaurantData;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ReadOnlyOrderDatabase initialOrderData;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            customerDatabaseOptional \u003d storage.readCustomerDatabase();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (!customerDatabaseOptional.isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CustomerDatabase\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialCustomerData \u003d customerDatabaseOptional.orElseGet(SampleDataUtil::getSampleCustomerDatabase);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    + \"Will be starting with an empty CustomerDatabase\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialCustomerData \u003d new CustomerDatabase();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    + \"Will be starting with an empty CustomerDatabase\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialCustomerData \u003d new CustomerDatabase();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenDatabaseOptional \u003d storage.readDeliverymenDatabase();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (!deliverymenDatabaseOptional.isPresent()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample DeliverymenDatabase\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            initialDeliverymenData \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    deliverymenDatabaseOptional.orElseGet(SampleDataUtil::getSampleDeliverymenDatabase);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    + \"Will be starting with an empty DeliverymenDatabase\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            initialDeliverymenData \u003d new DeliverymenDatabase();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    + \"Will be starting with an empty DeliverymenDatabase\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            initialDeliverymenData \u003d new DeliverymenDatabase();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantDatabaseOptional \u003d storage.readRestaurantDatabase();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (!restaurantDatabaseOptional.isPresent()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample RestaurantDatabase\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            initialRestaurantData \u003d restaurantDatabaseOptional.orElseGet(SampleDataUtil::getSampleRestaurantDatabase);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    + \"Will be starting with an empty RestaurantDatabase\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            initialRestaurantData \u003d new RestaurantDatabase();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    + \"Will be starting with an empty RestaurantDatabase\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            initialRestaurantData \u003d new RestaurantDatabase();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            orderBookOptional \u003d storage.readOrderBook();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (!orderBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample OrderBook\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            initialOrderData \u003d orderBookOptional.orElseGet(SampleDataUtil::getSampleOrderDatabase);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty OrderBook\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            initialOrderData \u003d new OrderDatabase();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty OrderBook\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            initialOrderData \u003d new OrderDatabase();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new ModelManager(initialCustomerData, initialDeliverymenData, initialRestaurantData,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                initialOrderData, userPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        logger.info(\"Starting DeliveryMANS \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping DeliveryMANS... ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 4,
      "ryantay232": 22,
      "MackyMaguire": 39,
      "SoilingRogue": 18,
      "-": 139,
      "charliechoong": 40
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String LOG_FILE \u003d \"deliverymans.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 110,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX \u003d \"The restaurant index provided is invalid!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_INVALID_DELIVERYMAN_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            \"The deliveryman index provided is invalid!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX \u003d \"The customer index provided is invalid!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_INVALID_SWITCH_CONTEXT \u003d \"The context to switch to is invalid!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_ALREADY_IN_CONTEXT \u003d \"Already in %1$d context!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_INVALID_QUANTITY \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            \"The quantity provided is invalid! Please enter a valid integer greater than 0!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_DISPLAYED_INDEX \u003d \"The order index provided is invalid!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_TO_ASSIGN \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \"Cant you see that the order has already been assigned or completed?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_DISPLAYED_NAME \u003d \"The order name provided is invalid!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 1,
      "SoilingRogue": 10,
      "-": 10,
      "charliechoong": 3
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if {@code s} represents a non-negative unsigned integer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * e.g. 0, 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * e.g. empty string, \"-1\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static boolean isNonNegativeUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 18,
      "SoilingRogue": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatistics.StatisticsRecordCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Autocomplete \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    LinkedList\u003cString\u003e getAutoCompleteResults(String input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns the CustomerDatabase."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @see seedu.deliverymans.model.Model#getCustomerDatabase()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    ReadOnlyCustomerDatabase getCustomerDatabase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of customers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    ObservableList\u003cOrder\u003e getCustomerOrders();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns the user prefs\u0027 customer database file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Path getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliveryman \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns the DeliverymenDatabase."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @see seedu.deliverymans.model.Model#getDeliverymenDatabase()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ReadOnlyDeliverymenDatabase getDeliverymenDatabase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of deliverymen"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns the user prefs\u0027 deliverymen database file path."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Path getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getAvailableDeliverymenList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getUnavailableDeliverymenList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getDeliveringDeliverymenList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    StatisticsRecordCard getDeliverymenStatusStats();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Restaurant \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the RestaurantDatabase."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @see seedu.deliverymans.model.Model#getRestaurantDatabase()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ReadOnlyRestaurantDatabase getRestaurantDatabase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of restaurants"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getFilteredRestaurantList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns an unmodifiable view of the editing restaurant"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getEditingRestaurantList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the user prefs\u0027 restaurant database file path."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @see Model#getOrderDatabase() Book()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ReadOnlyOrderDatabase getOrderBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of orders"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns the user prefs\u0027 order book file path."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 3,
      "ryantay232": 16,
      "MackyMaguire": 22,
      "SoilingRogue": 40,
      "-": 30,
      "charliechoong": 29
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.UniversalParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderDatabase;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatistics.StatisticsRecordCard;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.Storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static Context currentContext \u003d Context.GLOBAL;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final TrieManager trieManager;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final UniversalParser universalParser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private LinkedList\u003cString\u003e currentList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Restaurant currRestaurant;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.trieManager \u003d new TrieManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etlow"
        },
        "content": "        universalParser \u003d new UniversalParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Command command \u003d universalParser.parseCommand(commandText, currentContext);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": "        model.notifyChange(commandText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            storage.saveCustomerDatabase(model.getCustomerDatabase());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            storage.saveRestaurantDatabase(model.getRestaurantDatabase());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            storage.saveDeliverymenDatabase(model.getDeliverymenDatabase());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            storage.saveOrderDatabase(model.getOrderDatabase());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Autocomplete \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public LinkedList\u003cString\u003e getAutoCompleteResults(String input) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        int firstSpace \u003d input.indexOf(\" \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (firstSpace \u003d\u003d -1) { // still entering commandWord"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return trieManager.getAutoCompleteResults(input, currentContext);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String commandWord \u003d input.substring(0, firstSpace);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // input is not a valid commandWord/ commandWord has no valid prefix to autocomplete"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!trieManager.hasPrefixes(commandWord)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (input.endsWith(\"/\")) { // entering a new prefix for the valid commandWord"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            currentList \u003d getRelevantList(input);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // still entering the input for the current prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return currentList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private LinkedList\u003cString\u003e getRelevantList(String input) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        int lastSpace \u003d input.lastIndexOf(\" \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String prefix \u003d input.substring(lastSpace + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        switch (prefix) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case \"n/\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return getFilteredOrderList().stream().map(x -\u003e x.getOrderName().fullName)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .sorted(String::compareToIgnoreCase)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .collect(Collectors.toCollection(LinkedList::new));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case \"c/\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (hasDuplicatePrefix(input, prefix)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return getFilteredCustomerList().stream().map(x -\u003e x.getUserName().fullName)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .sorted(String::compareToIgnoreCase)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .collect(Collectors.toCollection(LinkedList::new));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case \"r/\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (hasDuplicatePrefix(input, prefix)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return getFilteredRestaurantList().stream().map(x -\u003e x.getName().fullName)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .sorted(String::compareToIgnoreCase)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .collect(Collectors.toCollection(LinkedList::new));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case \"f/\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            currRestaurant \u003d getInputRestaurant(input);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (currRestaurant \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return currRestaurant.getMenu().stream().map(x -\u003e x.getName().fullName)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .sorted(String::compareToIgnoreCase)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .collect(Collectors.toCollection(LinkedList::new));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private boolean hasDuplicatePrefix(String input, String prefix) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return ParserUtil.hasRepeatedPrefix(input, new Prefix(prefix));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Restaurant getInputRestaurant(String input) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Name restaurantName;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(input, PREFIX_RESTAURANT,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                PREFIX_FOOD, PREFIX_QUANTITY, PREFIX_CUSTOMER, PREFIX_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // if prefix value is not present"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RESTAURANT).isEmpty()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            restaurantName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_RESTAURANT).get());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (ParseException pe) { // invalid Name format"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            System.out.println(argMultimap.getValue(PREFIX_RESTAURANT).get());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (Restaurant restaurant : getFilteredRestaurantList()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (restaurant.getName().equals(restaurantName)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return restaurant;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ReadOnlyCustomerDatabase getCustomerDatabase() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return model.getCustomerDatabase();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ObservableList\u003cOrder\u003e getCustomerOrders() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return model.getCustomerOrders();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Path getCustomerDatabaseFilePath() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return model.getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliveryman \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ReadOnlyDeliverymenDatabase getDeliverymenDatabase() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return model.getDeliverymenDatabase();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return model.getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Path getDeliverymenDatabaseFilePath() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return model.getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getAvailableDeliverymenList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return model.getAvailableMenList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getUnavailableDeliverymenList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return model.getUnavailableMenList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getDeliveringDeliverymenList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return model.getDeliveringMenList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatisticsRecordCard getDeliverymenStatusStats() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return model.getDeliverymenStatusStats();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Restaurant \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ReadOnlyRestaurantDatabase getRestaurantDatabase() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return model.getRestaurantDatabase();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getFilteredRestaurantList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getEditingRestaurantList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return model.getEditingRestaurantList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getRestaurantDatabaseFilePath() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return model.getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ReadOnlyOrderDatabase getOrderBook() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return model.getOrderDatabase();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return model.getFilteredOrderList();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return model.getOrderBookFilePath();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dContext\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static void setContext(Context context) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        currentContext \u003d context;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static Context getContext() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return currentContext;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 8,
      "ryantay232": 29,
      "MackyMaguire": 36,
      "SoilingRogue": 119,
      "-": 47,
      "charliechoong": 45
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/Trie.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Javadoc comment"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "class Trie {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final HashMap\u003cCharacter, Trie\u003e children;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final LinkedList\u003cString\u003e contentList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final LinkedList\u003cPrefix\u003e prefixList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private boolean containsCommandWord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Trie() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        children \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void insertCommand(String key, LinkedList\u003cPrefix\u003e prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommand(key, key, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void insertCommand(String key) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommand(key, key, new LinkedList\u003c\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Inserts a {@code String} into the Trie."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void insertCommand(String key, String command, LinkedList\u003cPrefix\u003e prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (key.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            char c \u003d key.charAt(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (!children.containsKey(c)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                children.put(c, new Trie());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            Trie leaf \u003d children.get(c);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            leaf.addContent(command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            leaf.addPrefixes(prefixes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            leaf.containsCommandWord \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } else if (key.length() \u003e 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            char first \u003d key.charAt(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (!children.containsKey(first)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                children.put(first, new Trie());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            String keySubstring \u003d key.substring(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            children.get(first).insertCommand(keySubstring, command, prefixes);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            insertCommand(keySubstring, command, prefixes);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private LinkedList\u003cPrefix\u003e getPrefixList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return this.prefixList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void addPrefixes(LinkedList\u003cPrefix\u003e prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.prefixList.addAll(prefixes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    LinkedList\u003cPrefix\u003e getPrefixes(String toFind) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Trie result \u003d search(toFind);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (result \u003d\u003d null) { // commandWord does not exist"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return result.getPrefixList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void addContent(String content) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.contentList.addLast(content);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Tofill."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Trie search(String toFind) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Trie curr \u003d this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (char c : toFind.toLowerCase().toCharArray()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (!curr.children.containsKey(c)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            curr \u003d curr.children.get(c);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return curr;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    LinkedList\u003cString\u003e autoCompletePrefix(String commandWord, String prefixes) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Trie commandResult \u003d search(commandWord);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (commandResult \u003d\u003d null) { // commandWord does not exist"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Trie prefixResult \u003d commandResult.search(prefixes);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (prefixResult \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return prefixResult.getAllPrefixes();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private LinkedList\u003cString\u003e getAllPrefixes() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        LinkedList\u003cString\u003e contentList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (children.isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            contentList.addAll(this.contentList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (Map.Entry\u003cCharacter, Trie\u003e entry : children.entrySet()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            Trie child \u003d entry.getValue();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            LinkedList\u003cString\u003e childPrefixes \u003d child.getAllPrefixes();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            contentList.addAll(childPrefixes);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        contentList.sort(String::compareToIgnoreCase);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return contentList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void insertPrefixes(LinkedList\u003cLinkedList\u003cString\u003e\u003e prefixes) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (LinkedList\u003cString\u003e prefixList : prefixes) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            for (String prefix : prefixList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                insertPrefix(prefix);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void insertPrefix(String prefix) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Trie curr \u003d this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        char[] cArray \u003d prefix.toCharArray();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (int i \u003d 0; i \u003c cArray.length; ++i) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            char c \u003d cArray[i];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (i \u003d\u003d cArray.length - 1) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                if (!curr.children.containsKey(c)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    curr.children.put(c, new Trie());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                curr.children.get(c).addContent(prefix);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                if (!curr.children.containsKey(c)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    curr.children.put(c, new Trie());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                curr \u003d curr.children.get(c);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Tofill."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    LinkedList\u003cString\u003e autoCompleteCommandWord(String toFind) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Trie result \u003d search(toFind);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (result \u003d\u003d null) { // commandWord does not exist"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return result.getAllCommandWords();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Tofill"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private LinkedList\u003cString\u003e getAllCommandWords() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        HashSet\u003cString\u003e uniqueList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (containsCommandWord) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            uniqueList.addAll(this.contentList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (Map.Entry\u003cCharacter, Trie\u003e entry : children.entrySet()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            Trie child \u003d entry.getValue();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            LinkedList\u003cString\u003e childCommandWords \u003d child.getAllCommandWords();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            uniqueList.addAll(childCommandWords);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        LinkedList\u003cString\u003e contentList \u003d new LinkedList\u003c\u003e(uniqueList);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        contentList.sort(String::compareToIgnoreCase);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return contentList;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 188
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/TrieManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerEditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerHistoryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerSortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanAssignCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanDeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanGetStatisticsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanListStatusCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanStatusSwitchCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddFoodCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddRatingCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddRestaurantCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.DeleteFoodCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.DeleteRestaurantCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditDetailsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditModeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.ExitEditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.AddOrderCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.AssignOrderCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.CompleteOrderCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.DeleteOrderCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.EditOrderCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.ExitCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.HelpCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.ListOrderCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.customer.CustomerParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.deliveryman.DeliverymanParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.restaurant.RestaurantParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * TO fill"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "class TrieManager {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Trie universalTrie;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Trie customerTrie;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Trie deliverymanTrie;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Trie restaurantTrie;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Trie editingTrie;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    TrieManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        universalTrie \u003d new Trie();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customerTrie \u003d new Trie();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliverymanTrie \u003d new Trie();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        restaurantTrie \u003d new Trie();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingTrie \u003d new Trie();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        addUniversalCommands();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        addCustomerCommands();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        addDeliverymanCommands();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        addRestaurantCommands();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        addEditingCommands();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void addCustomerCommands() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customerTrie.insertCommand(CustomerAddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customerTrie.insertCommand(CustomerDeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customerTrie.insertCommand(CustomerEditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customerTrie.insertCommand(CustomerHistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customerTrie.insertCommand(CustomerListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customerTrie.insertCommand(CustomerSortCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void addDeliverymanCommands() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliverymanTrie.insertCommand(DeliverymanAddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliverymanTrie.insertCommand(DeliverymanAssignCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliverymanTrie.insertCommand(DeliverymanDeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliverymanTrie.insertCommand(DeliverymanEditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliverymanTrie.insertCommand(DeliverymanGetStatisticsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliverymanTrie.insertCommand(DeliverymanListStatusCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliverymanTrie.insertCommand(DeliverymanStatusSwitchCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void addRestaurantCommands() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        restaurantTrie.insertCommand(AddRestaurantCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        restaurantTrie.insertCommand(DeleteRestaurantCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        restaurantTrie.insertCommand(EditModeCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private void addEditingCommands() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingTrie.insertCommand(AddFoodCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingTrie.insertCommand(AddRatingCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingTrie.insertCommand(DeleteFoodCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingTrie.insertCommand(EditDetailsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingTrie.insertCommand(ExitEditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void addUniversalCommands() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(AddOrderCommand.COMMAND_WORD, AddOrderCommand.getPrefixesList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(AssignOrderCommand.COMMAND_WORD, AssignOrderCommand.getPrefixesList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(CompleteOrderCommand.COMMAND_WORD, CompleteOrderCommand.getPrefixesList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(DeleteOrderCommand.COMMAND_WORD, DeleteOrderCommand.getPrefixesList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(EditOrderCommand.COMMAND_WORD, EditOrderCommand.getPrefixesList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(ListOrderCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(CustomerParser.COMMAND_WORD);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(DeliverymanParser.COMMAND_WORD);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        insertCommandToAllTries(RestaurantParser.COMMAND_WORD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void insertCommandToAllTries(String command) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        universalTrie.insertCommand(command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customerTrie.insertCommand(command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliverymanTrie.insertCommand(command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        restaurantTrie.insertCommand(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingTrie.insertCommand(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void insertCommandToAllTries(String command, LinkedList\u003cPrefix\u003e prefixes) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        universalTrie.insertCommand(command, prefixes);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customerTrie.insertCommand(command, prefixes);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliverymanTrie.insertCommand(command, prefixes);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        restaurantTrie.insertCommand(command, prefixes);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingTrie.insertCommand(command, prefixes);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    LinkedList\u003cString\u003e getAutoCompleteResults(String input, Context context) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return autoCompleteCommandWord(input, context);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private LinkedList\u003cString\u003e autoCompleteCommandWord(String input, Context context) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        switch (context) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case CUSTOMER:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return customerTrie.autoCompleteCommandWord(input);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case DELIVERYMEN:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return deliverymanTrie.autoCompleteCommandWord(input);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case RESTAURANT:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return restaurantTrie.autoCompleteCommandWord(input);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case EDITING:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return editingTrie.autoCompleteCommandWord(input);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return universalTrie.autoCompleteCommandWord(input);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * TO fill"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    boolean hasPrefixes(String input) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        LinkedList\u003cPrefix\u003e prefixList \u003d universalTrie.getPrefixes(input);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (prefixList.isEmpty()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 8,
      "MackyMaguire": 18,
      "SoilingRogue": 152,
      "charliechoong": 8
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "charliechoong": 3
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Context context;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Class commandName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * other fields set to their default value and passes the current context of the system."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CommandResult(String feedbackToUser, Context context) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.context \u003d context;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CommandResult(String feedbackToUser, Class commandName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Context getContext() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return context;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Class getCommandName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return commandName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 context \u003d\u003d otherCommandResult.context;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, context);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 31,
      "SoilingRogue": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/CustomerAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Adds a customer to the system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerAddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a customer to the customer database. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_USERNAME + \"JohnDoe \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New customer added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"This customer already exists in the customer database\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Customer toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Customer}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerAddCommand(Customer customer) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        toAdd \u003d customer;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (model.hasCustomer(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.addCustomer(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                || (other instanceof CustomerAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CustomerAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 59,
      "MackyMaguire": 2,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/CustomerDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \": Deletes the customer identified by the index number used in the displayed customer list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_DELETE_CUSTOMER_SUCCESS \u003d \"Deleted Customer: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer customerToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.deleteCustomer(customerToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CUSTOMER_SUCCESS, customerToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                || (other instanceof CustomerDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CustomerDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 24,
      "MackyMaguire": 1,
      "charliechoong": 30
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/CustomerEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Edits the details of an existing customer in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerEditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the customer identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"by the index number used in the displayed customer database. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_EDIT_CUSTOMER_SUCCESS \u003d \"Edited Customer: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"This customer already exists in the customer database.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final EditCustomerDescriptor editCustomerDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param index                  of the customer in the filtered customer list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param editCustomerDescriptor details to edit the customer with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerEditCommand(Index index, EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(editCustomerDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.editCustomerDescriptor \u003d new EditCustomerDescriptor(editCustomerDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer customerToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer editedCustomer \u003d createEditedCustomer(customerToEdit, editCustomerDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!customerToEdit.isSameCustomer(editedCustomer) \u0026\u0026 model.hasCustomer(editedCustomer)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.setCustomer(customerToEdit, editedCustomer);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Creates and returns a {@code Customer} with the details of {@code customerToEdit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * edited with {@code editCustomerDescriptor}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static Customer createEditedCustomer(Customer customerToEdit,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                                                 EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        assert customerToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Name updatedUserName \u003d customerToEdit.getUserName();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Name updatedName \u003d editCustomerDescriptor.getName().orElse(customerToEdit.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Phone updatedPhone \u003d editCustomerDescriptor.getPhone().orElse(customerToEdit.getPhone());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Address updatedAddress \u003d editCustomerDescriptor.getAddress().orElse(customerToEdit.getAddress());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new Customer(updatedUserName, updatedName, updatedPhone, updatedAddress);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!(other instanceof CustomerEditCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        CustomerEditCommand e \u003d (CustomerEditCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 editCustomerDescriptor.equals(e.editCustomerDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Stores the details to edit the customer with. Each non-empty field value will replace the corresponding field"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * value of the customer."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static class EditCustomerDescriptor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public EditCustomerDescriptor() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public EditCustomerDescriptor(EditCustomerDescriptor toCopy) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, address);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (!(other instanceof EditCustomerDescriptor)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            EditCustomerDescriptor e \u003d (EditCustomerDescriptor) other;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 160,
      "MackyMaguire": 1,
      "charliechoong": 26
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/CustomerHistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * List order history of customer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerHistoryCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \": Lists the history of customer\u0027s orders identified by the index number used in the \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"displayed customer list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_LIST_ORDERS_SUCCESS \u003d \"Listed Customer\u0027s order history: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerHistoryCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer customerToList \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.setCustomerOrders(customerToList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_LIST_ORDERS_SUCCESS, customerToList),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                CustomerHistoryCommand.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                || (other instanceof CustomerHistoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CustomerHistoryCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 55,
      "MackyMaguire": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/CustomerListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all customers\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 8,
      "MackyMaguire": 1,
      "charliechoong": 15
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/CustomerSortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerSortCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerSortCommand(String arguments) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 2,
      "MackyMaguire": 1,
      "charliechoong": 19
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/DeliverymanAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Adds a deliveryman to the deliveryman book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * User must be in deliveryman context to use this command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanAddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deliveryman to the deliveryman book.\\n \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_PHONE + \"96177613\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deliveryman added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERYMAN \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \"This deliveryman already exists in the deliveryman book.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Deliveryman toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Creates a DeliverymanAddCommand to add the specified {@code Deliveryman}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanAddCommand(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(deliveryman);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        toAdd \u003d deliveryman;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (model.hasDeliveryman(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DELIVERYMAN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.addDeliveryman(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof DeliverymanAddCommand // instanceof handles null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((DeliverymanAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "charliechoong": 61
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/DeliverymanAssignCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Assigns an order to a deliveryman"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanAssignCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \": Assigns an order to a deliveryman.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_ASSIGN_ORDER_SUCCESS \u003d \"Order has been assigned to deliveryman: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "charliechoong": 22
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/DeliverymanDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Deletes a deliveryman identified using it\u0027s displayed index from the deliverymen book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \": Deletes the deliveryman identified by the index number used in the displayed deliveryman list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_DELETE_DELIVERYMAN_SUCCESS \u003d \"Deleted Deliveryman: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        List\u003cDeliveryman\u003e lastShownList \u003d model.getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERYMAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman deliverymanToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.deleteDeliveryman(deliverymanToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DELIVERYMAN_SUCCESS, deliverymanToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof DeliverymanDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeliverymanDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "charliechoong": 55
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/DeliverymanEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_DELIVERYMEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Edits the details of an existing deliveryman in the deliverymen database."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanEditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the deliveryman identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"by the index number used in the displayed deliveryman list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_EDIT_DELIVERYMAN_SUCCESS \u003d \"Edited Deliveryman: %1$s\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERYMEN \u003d \"This deliveryman already exists in the address book.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final EditDeliverymanDescriptor editDeliverymanDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param index of the deliveryman in the filtered deliverymen list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param editDeliverymanDescriptor details to edit the deliveryman with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanEditCommand(Index index, EditDeliverymanDescriptor editDeliverymanDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(editDeliverymanDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.editDeliverymanDescriptor \u003d new EditDeliverymanDescriptor(editDeliverymanDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        List\u003cDeliveryman\u003e lastShownList \u003d model.getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERYMAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman deliverymanToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman editedDeliveryman \u003d createEditedDeliveryman(deliverymanToEdit, editDeliverymanDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!deliverymanToEdit.isSameDeliveryman(editedDeliveryman) \u0026\u0026 model.hasDeliveryman(editedDeliveryman)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DELIVERYMEN);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.setDeliveryman(deliverymanToEdit, editedDeliveryman);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.updateFilteredDeliverymenList(PREDICATE_SHOW_ALL_DELIVERYMEN);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DELIVERYMAN_SUCCESS, editedDeliveryman,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                DeliverymanEditCommand.class));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Creates and returns a {@code Deliveryman} with the details of {@code deliverymanToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * edited with {@code editDeliverymanDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static Deliveryman createEditedDeliveryman(Deliveryman deliverymanToEdit,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                                  EditDeliverymanDescriptor editDeliverymanDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        assert deliverymanToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Name updatedName \u003d editDeliverymanDescriptor.getName().orElse(deliverymanToEdit.getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Phone updatedPhone \u003d editDeliverymanDescriptor.getPhone().orElse(deliverymanToEdit.getPhone());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editDeliverymanDescriptor.getTags().orElse(deliverymanToEdit.getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new Deliveryman(updatedName, updatedPhone, updatedTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!(other instanceof DeliverymanEditCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        DeliverymanEditCommand e \u003d (DeliverymanEditCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 editDeliverymanDescriptor.equals(e.editDeliverymanDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Stores the details to edit the deliveryman with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static class EditDeliverymanDescriptor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public EditDeliverymanDescriptor() {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public EditDeliverymanDescriptor(EditDeliverymanDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (!(other instanceof EditDeliverymanDescriptor)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            EditDeliverymanDescriptor e \u003d (EditDeliverymanDescriptor) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "charliechoong": 199
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/DeliverymanGetStatisticsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanGetStatisticsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the statistics of deliverymen statuses.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_LIST_SUCCESS \u003d \"Displayed statistics of deliverymen statuses\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_SUCCESS, DeliverymanGetStatisticsCommand.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof DeliverymanGetStatisticsCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "charliechoong": 32
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/DeliverymanListStatusCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Lists the deliverymen sorted by their current statuses."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanListStatusCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lists\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \": Displays the 3 lists of deliverymen sorted according to respective statuses.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_LIST_AVAIL_SUCCESS \u003d \"Listed all status sorted deliverymen.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Click on the buttons to view the desired list.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_AVAIL_SUCCESS, DeliverymanListStatusCommand.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof DeliverymanListStatusCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "charliechoong": 35
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/DeliverymanStatusSwitchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_DELIVERYMEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.InvalidStatusChangeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Changes the status of a deliveryman from AVAILABLE to UNAVAILABLE or UNAVAILABLE to AVAILABLE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanStatusSwitchCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"status\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the status of the deliveryman identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"by the index number used in the displayed deliverymen database.\\n \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"If current status is AVAILABLE, status will be changed to UNAVAILABLE. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"If current status is UNAVAILABLE, status will be changed to AVAILABLE.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_CHANGE_STATUS_SUCCESS \u003d \"Changed status of deliveryman %1$s \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanStatusSwitchCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        List\u003cDeliveryman\u003e lastShownList \u003d model.getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERYMAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman deliverymanToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            model.switchDeliverymanStatus(deliverymanToEdit);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            model.updateFilteredDeliverymenList(PREDICATE_SHOW_ALL_DELIVERYMEN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            model.updateAvailableDeliverymenList(PREDICATE_SHOW_ALL_DELIVERYMEN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (InvalidStatusChangeException isce) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new InvalidStatusChangeException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CHANGE_STATUS_SUCCESS, deliverymanToEdit),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                DeliverymanStatusSwitchCommand.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof DeliverymanStatusSwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeliverymanStatusSwitchCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "charliechoong": 65
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/AddFoodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Adds a food to the current restaurant."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class AddFoodCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food to the current restaurant. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + PREFIX_NAME + \"Fried Chicken \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + PREFIX_PRICE + \"7.65 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_TAG + \"Recommended\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \"This food already exists in the restaurant\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_WRONG_TAG \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \"You can only tag food as \\\"Recommended\\\"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final Food toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates a AddFoodCommand to add the specified {@code Food}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public AddFoodCommand(Food food) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Restaurant restaurant \u003d model.getEditingRestaurantList().get(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d toAdd.getTags();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (newTags.size() \u003e 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } else if (newTags.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": "            if (!newTags.contains(new Tag(\"Recommended\"))) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                throw new CommandException(MESSAGE_WRONG_TAG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        boolean isDuplicate \u003d restaurant.getMenu().stream().anyMatch(toAdd::isSameFood);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (isDuplicate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etlow"
        },
        "content": "        model.setRestaurant(restaurant, restaurant.addFood(toAdd).updateQuantity(0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof AddFoodCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFoodCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 57,
      "MackyMaguire": 22
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/AddRatingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_RESTAURANTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Rating;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Adds a rating to the restaurant in editing mode."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class AddRatingCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rate\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \": Adds a rating to the restaurant in editing mode currently.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Parameters: RATING (must be a non-negative integer from 0 to 5)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_ADD_RATING_SUCCESS \u003d \"Added Rating to: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates a AddRatingCommand to add the specified {@code Rating}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public AddRatingCommand(Rating rating) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant restaurant \u003d model.getEditingRestaurantList().get(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Rating oldRating \u003d restaurant.getRating();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        double newRatingValue \u003d Rating.getRatingValue(oldRating.rating)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                + Rating.getRatingValue(rating.rating);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Rating newRating \u003d new Rating(String.format(\"%.3f\", newRatingValue),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                oldRating.numberOfRatings + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant newRestaurant \u003d new Restaurant(restaurant.getName(), restaurant.getLocation(), newRating,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                restaurant.getTags(), restaurant.getMenu(), restaurant.getQuantityOrdered());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.setRestaurant(restaurant, newRestaurant);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.setEditingRestaurant(newRestaurant);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.updateFilteredRestaurantList(PREDICATE_SHOW_ALL_RESTAURANTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.updateEditingRestaurantList(PREDICATE_SHOW_ALL_RESTAURANTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_RATING_SUCCESS, newRestaurant));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof AddRatingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 rating.equals(((AddRatingCommand) other).rating)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 62
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/AddRestaurantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Adds a restaurant to the system."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class AddRestaurantCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a restaurant to the restaurant database. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_NAME + \"KFC \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_LOCATION + \"Jurong \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_TAG + \"FastFood\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New restaurant added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESTAURANT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \"This restaurant already exists in the restaurant database\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Restaurant toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Restaurant}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public AddRestaurantCommand(Restaurant restaurant) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurant);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        toAdd \u003d restaurant;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (model.hasRestaurant(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RESTAURANT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.addRestaurant(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof AddRestaurantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddRestaurantCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 60
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/DeleteFoodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Deletes a food item identified using its displayed index from the menu list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DeleteFoodCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \": Deletes the food item identified by the index number used in the displayed menu list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_DELETE_RESTAURANT_SUCCESS \u003d \"Deleted Food: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DeleteFoodCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant restaurant \u003d model.getEditingRestaurantList().get(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d restaurant.getMenu().size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Food foodToDelete \u003d restaurant.getMenu().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cOrder\u003e orders \u003d model.getFilteredOrderList().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .filter(order -\u003e order.getRestaurant().equals(restaurant.getName()))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .filter(order -\u003e order.isCompleted() \u003d\u003d false)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Map\u003cName, Integer\u003e newFoodList \u003d new HashMap\u003cName, Integer\u003e(order.getFoodList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            newFoodList.remove(foodToDelete.getName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Order newOrder \u003d new Order.OrderBuilder().setOrderName(order.getOrderName())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .setCustomer(order.getCustomer())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .setRestaurant(order.getRestaurant())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .setDeliveryman(order.getDeliveryman())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .setFood(newFoodList)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .setCompleted(order.isCompleted())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .completeOrder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            model.setOrder(order, newOrder);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": "        model.setRestaurant(restaurant, restaurant"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .removeFood(foodToDelete)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .updateQuantity(foodToDelete.getQuantityOrdered() * -1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RESTAURANT_SUCCESS, foodToDelete));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof DeleteFoodCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteFoodCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 3,
      "MackyMaguire": 71
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/DeleteRestaurantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Deletes a restaurant identified using its displayed index from the restaurant list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DeleteRestaurantCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \": Deletes the restaurant identified by the index number used in the displayed restaurant list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_DELETE_RESTAURANT_SUCCESS \u003d \"Deleted Restaurant: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DeleteRestaurantCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cRestaurant\u003e lastShownList \u003d model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant restaurantToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.deleteRestaurant(restaurantToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cOrder\u003e allOrders \u003d new ArrayList\u003c\u003e(model.getFilteredOrderList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (Order order : allOrders) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (order.getRestaurant().equals(restaurantToDelete.getName())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                model.deleteOrder(order);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                model.updateDeliverymanStatusAfterChangesToOrder(order.getDeliveryman());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RESTAURANT_SUCCESS, restaurantToDelete));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof DeleteRestaurantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteRestaurantCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 64,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/EditDetailsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_RESTAURANTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Edits details of the restaurant in editing mode."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class EditDetailsCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editdetails\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the restaurant \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"in editing mode currently. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_NAME + \"KFC \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_LOCATION + \"Woodlands\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_EDIT_RESTAURANT_SUCCESS \u003d \"Edited Restaurant: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESTAURANT \u003d \"This restaurant already exists in the \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"restaurant database.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final EditRestaurantDescriptor editRestaurantDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param editRestaurantDescriptor details to edit the restaurant with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public EditDetailsCommand(EditRestaurantDescriptor editRestaurantDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(editRestaurantDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.editRestaurantDescriptor \u003d new EditRestaurantDescriptor(editRestaurantDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant restaurantToEdit \u003d model.getEditingRestaurantList().get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant editedRestaurant \u003d createEditedRestaurant(restaurantToEdit, editRestaurantDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!restaurantToEdit.isSameRestaurant(editedRestaurant) \u0026\u0026 model.hasRestaurant(editedRestaurant)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RESTAURANT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.setRestaurant(restaurantToEdit, editedRestaurant);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.setEditingRestaurant(editedRestaurant);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.updateFilteredRestaurantList(PREDICATE_SHOW_ALL_RESTAURANTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.updateEditingRestaurantList(PREDICATE_SHOW_ALL_RESTAURANTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cOrder\u003e orders \u003d model.getFilteredOrderList().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .filter(order -\u003e order.getRestaurant().equals(restaurantToEdit.getName()))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Order newOrder \u003d new Order.OrderBuilder().setOrderName(order.getOrderName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .setCustomer(order.getCustomer())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .setRestaurant(editedRestaurant.getName())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .setDeliveryman(order.getDeliveryman())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .setFood(order.getFoodList())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .setCompleted(order.isCompleted())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    .completeOrder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            model.setOrder(order, newOrder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_RESTAURANT_SUCCESS, editedRestaurant));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates and returns a {@code Restaurant} with the details of {@code restaurantToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * edited with {@code editRestaurantDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static Restaurant createEditedRestaurant(Restaurant restaurantToEdit,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                                                     EditRestaurantDescriptor editRestaurantDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        assert restaurantToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Name updatedName \u003d editRestaurantDescriptor.getName().orElse(restaurantToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Location updatedLocation \u003d editRestaurantDescriptor.getLocation().orElse(restaurantToEdit.getLocation());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Rating originalRating \u003d restaurantToEdit.getRating();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editRestaurantDescriptor.getTags().orElse(restaurantToEdit.getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "etlow"
        },
        "content": "        List\u003cFood\u003e originalMenu \u003d restaurantToEdit.getMenu();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        int originalQuantityOrdered \u003d restaurantToEdit.getQuantityOrdered();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new Restaurant(updatedName, updatedLocation, originalRating, updatedTags, originalMenu,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                originalQuantityOrdered);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Stores the details to edit the restaurant with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * corresponding field value of the restaurant."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static class EditRestaurantDescriptor {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public EditRestaurantDescriptor() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public EditRestaurantDescriptor(EditRestaurantDescriptor toCopy) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, location, tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (!(other instanceof EditRestaurantDescriptor)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            EditRestaurantDescriptor e \u003d (EditRestaurantDescriptor) other;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 1,
      "MackyMaguire": 193
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/EditModeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Goes into editing mode for a restaurant"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class EditModeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the restaurant identified \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"by the index number used in the displayed restaurant list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Goes into editing mode for the identified restaurant.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered editing mode for: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Restaurant}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public EditModeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cRestaurant\u003e lastShownList \u003d model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant restaurantToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.setEditingRestaurant(restaurantToEdit);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, restaurantToEdit), Context.EDITING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof EditModeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EditModeCommand) other).targetIndex));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 62
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/ExitEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Exits editing mode for a restaurant"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class ExitEditCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exitedit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exited Editing Mode\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, Context.RESTAURANT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 20
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/AddOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.NoMoreAvailableDeliverymanException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Order command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class AddOrderCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-add_order\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \": Adds an order to the manager. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_RESTAURANT + \"RESTAURANT]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_FOOD + \"FOOD]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_CUSTOMER + \"AlexYeoh \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_RESTAURANT + \"KFC \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_FOOD + \"3 Piece Chicken \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_QUANTITY + \"3 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_FOOD + \"Chicken Nuggets \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_QUANTITY + \"20\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_SUCCESS_ADD \u003d \"New order added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_INVALID_CUSTOMER \u003d \"The customer does not exist!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_INVALID_RESTAURANT \u003d \"The restaurant does not exist!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_INVALID_FOOD \u003d \"The food does not exist in the restaurant\u0027s menu!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final LinkedList\u003cPrefix\u003e prefixesList \u003d new LinkedList\u003c\u003e("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            List.of(PREFIX_CUSTOMER, PREFIX_RESTAURANT, PREFIX_FOOD, PREFIX_QUANTITY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Order toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public AddOrderCommand(Order toAdd) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Name deliverymanToAdd;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // Validity checks for customer, restaurant and foodList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        isValidOrder(toAdd, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // Assigning deliveryman"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            deliverymanToAdd \u003d model.getOneAvailableDeliveryman();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (NoMoreAvailableDeliverymanException nmade) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            deliverymanToAdd \u003d toAdd.getDeliveryman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Name orderName \u003d model.getFreeOrderName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // Instantiating the order"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Order order \u003d new Order.OrderBuilder().setOrderName(orderName).setCustomer(toAdd.getCustomer())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .setRestaurant(toAdd.getRestaurant()).setDeliveryman(deliverymanToAdd)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .setFood(toAdd.getFoodList()).setCompleted(toAdd.isCompleted()).completeOrder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (model.hasOrder(order)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        model.addOrder(order);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.addOrderInCustomer(order);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS_ADD, order));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Checks if an order is valid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    static void isValidOrder(Order toAdd, Model model) throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Customer customerToAdd \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Restaurant restaurantToAdd \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // Customer validity check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Customer customer : model.getFilteredCustomerList()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (customer.getUserName().equals(toAdd.getCustomer())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                customerToAdd \u003d customer;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (customerToAdd \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CUSTOMER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // Restaurant validity check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (Restaurant restaurant : model.getFilteredRestaurantList()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (restaurant.getName().equals(toAdd.getRestaurant())) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                restaurantToAdd \u003d restaurant;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (restaurantToAdd \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_RESTAURANT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // Food validity check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Map\u003cName, Integer\u003e foodNameList \u003d toAdd.getFoodList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (Name foodName : foodNameList.keySet()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            boolean validFood \u003d false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            for (Food food : restaurantToAdd.getMenu()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                if (food.getName().equals(foodName)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    validFood \u003d true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (!validFood) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_FOOD);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static LinkedList\u003cPrefix\u003e getPrefixesList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return prefixesList;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                || (other instanceof AddOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddOrderCommand) other).toAdd));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 13,
      "MackyMaguire": 1,
      "SoilingRogue": 117,
      "charliechoong": 15
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/AssignOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Assigns an order identified using its displayed index from the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class AssignOrderCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-assign_order\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \": Assigns the order identified by the order name used in the displayed order list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"ORDERNAME]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_NAME + \"Order 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String MESSAGE_ASSIGN_ORDER_SUCCESS \u003d \"Assigned Order: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final LinkedList\u003cPrefix\u003e prefixesList \u003d new LinkedList\u003c\u003e(List.of(PREFIX_NAME));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Name targetOrder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public AssignOrderCommand(Name targetOrder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.targetOrder \u003d targetOrder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order orderToAssign \u003d model.getOrder(targetOrder);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (orderToAssign \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (orderToAssign.isCompleted() || !(orderToAssign.getDeliveryman().toString().equals((\"Unassigned\")))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_TO_ASSIGN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Name newDeliveryman \u003d model.getOneAvailableDeliveryman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // Assign new deliveryman to specified order"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order order \u003d new Order.OrderBuilder().setOrderName(orderToAssign.getOrderName())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .setCustomer(orderToAssign.getCustomer()).setRestaurant(orderToAssign.getRestaurant())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .setFood(orderToAssign.getFoodList()).setDeliveryman(newDeliveryman).completeOrder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        model.setOrder(orderToAssign, order);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_ORDER_SUCCESS, order));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static LinkedList\u003cPrefix\u003e getPrefixesList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return prefixesList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof AssignOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 targetOrder.equals(((AssignOrderCommand) other).targetOrder)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 29,
      "charliechoong": 49
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/CompleteOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Tofill."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class CompleteOrderCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-complete_order\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \": Completes the order identified by the order name used in the displayed order list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"ORDERNAME]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_NAME + \"Order 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_COMPLETE_ORDER_SUCCESS \u003d \"Order completed: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_ALREADY_COMPLETED \u003d \"The order is already completed!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_INVALID_DELIVERYMAN \u003d \"The order needs \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"an assigned deliveryman before it can be completed!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final LinkedList\u003cPrefix\u003e prefixesList \u003d new LinkedList\u003c\u003e(List.of(PREFIX_NAME));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Name targetOrder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CompleteOrderCommand(Name targetOrder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.targetOrder \u003d targetOrder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Order orderToComplete \u003d model.getOrder(targetOrder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (orderToComplete \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (orderToComplete.getDeliveryman().fullName.equalsIgnoreCase(\"Unassigned\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DELIVERYMAN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (orderToComplete.isCompleted()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_COMPLETED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Order order \u003d new Order.OrderBuilder().setOrderName(orderToComplete.getOrderName())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .setCustomer(orderToComplete.getCustomer())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .setDeliveryman(orderToComplete.getDeliveryman())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .setRestaurant(orderToComplete.getRestaurant())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .setFood(orderToComplete.getFoodList()).setCompleted(true).completeOrder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        model.setOrder(orderToComplete, order);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.updateDeliverymanStatusAfterChangesToOrder(order.getDeliveryman());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cRestaurant\u003e restaurants \u003d model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (Restaurant r : restaurants) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (r.getName().equals(orderToComplete.getRestaurant())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "                model.setRestaurant(r, r.updateQuantity(orderToComplete));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.assignUnassignedOrder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String messageAssignNextOrder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order unassigned \u003d model.getUnassignedOrder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (unassigned \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            messageAssignNextOrder \u003d \"Great job! No other orders to assign.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            new AssignOrderCommand(unassigned.getOrderName()).execute(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            messageAssignNextOrder \u003d String.format(\"Assigning next order: %s\", unassigned.getOrderName().fullName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COMPLETE_ORDER_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + messageAssignNextOrder, orderToComplete)); */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COMPLETE_ORDER_SUCCESS + \"\\n\", orderToComplete));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static LinkedList\u003cPrefix\u003e getPrefixesList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return prefixesList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 1,
      "ryantay232": 9,
      "MackyMaguire": 8,
      "SoilingRogue": 72,
      "charliechoong": 7
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/ContextCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class ContextCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Context changed to: %1$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Context context;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ContextCommand(Context context) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.context \u003d context;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, context.toLowerCaseString()), context);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 1,
      "MackyMaguire": 1,
      "charliechoong": 21
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/DeleteOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Deletes an order identified using its displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class DeleteOrderCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-delete_order\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \": Deletes the order identified by the order name used in the displayed order list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"ORDERNAME]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_NAME + \"Order 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Order: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final LinkedList\u003cPrefix\u003e prefixesList \u003d new LinkedList\u003c\u003e(List.of(PREFIX_NAME));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Name targetOrder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public DeleteOrderCommand(Name targetOrder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.targetOrder \u003d targetOrder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Order orderToDelete \u003d model.getOrder(targetOrder);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (orderToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.deleteOrderInCustomer(orderToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        model.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.updateDeliverymanStatusAfterChangesToOrder(orderToDelete.getDeliveryman());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static LinkedList\u003cPrefix\u003e getPrefixesList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return prefixesList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                || (other instanceof DeleteOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 targetOrder.equals(((DeleteOrderCommand) other).targetOrder)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 9,
      "MackyMaguire": 1,
      "SoilingRogue": 55,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/EditOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Edits the details of an existing order."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class EditOrderCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-edit_order\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \": Edits an order present in the manager by the order name used in the displayed order list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"ORDERNAME]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_RESTAURANT + \"RESTAURANT]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_FOOD + \"FOOD]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_NAME + \"Order 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_CUSTOMER + \"Alex Yeoh \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_RESTAURANT + \"KFC \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_FOOD + \"Shrooms Burger \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_QUANTITY + \"3\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_INVALID_FOOD_FORMAT \u003d \"The quantities of food ordered must be provided!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_ALREADY_COMPLETED \u003d \"The order cannot be edited as it is already completed!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_SUCCESS_EDIT \u003d \"Successful edition of order: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final LinkedList\u003cPrefix\u003e prefixesList \u003d new LinkedList\u003c\u003e("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            List.of(PREFIX_NAME, PREFIX_CUSTOMER, PREFIX_RESTAURANT, PREFIX_FOOD, PREFIX_QUANTITY));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Name targetOrder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final EditOrderDescriptor editOrderDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param targetOrder         of the order in the filtered order list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param editOrderDescriptor details to edit the order with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public EditOrderCommand(Name targetOrder, EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireAllNonNull(targetOrder, editOrderDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.targetOrder \u003d targetOrder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.editOrderDescriptor \u003d new EditOrderDescriptor(editOrderDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Order orderToEdit \u003d model.getOrder(targetOrder);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (orderToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // Creating editedOrder and testing validity"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (orderToEdit.isCompleted()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_COMPLETED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order editedOrder \u003d createEditedOrder(orderToEdit, editOrderDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        AddOrderCommand.isValidOrder(editedOrder, model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        model.setOrder(orderToEdit, editedOrder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS_EDIT, editedOrder));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Creates and returns a {@code OrderBuilder} with the details of {@code orderToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * edited with {@code editOrderDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static Order createEditedOrder(Order orderToEdit, EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        assert orderToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Name orderName \u003d orderToEdit.getOrderName();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Name updatedCustomer \u003d editOrderDescriptor.getCustomer().orElse(orderToEdit.getCustomer());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Name updatedRestaurant \u003d editOrderDescriptor.getRestaurant().orElse(orderToEdit.getRestaurant());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Name deliveryman \u003d orderToEdit.getDeliveryman();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        boolean isCompleted \u003d orderToEdit.isCompleted();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Map\u003cName, Integer\u003e updatedFood \u003d editOrderDescriptor.getFoods().orElse(orderToEdit.getFoodList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new Order.OrderBuilder().setOrderName(orderName).setCustomer(updatedCustomer)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .setRestaurant(updatedRestaurant).setDeliveryman(deliveryman).setFood(updatedFood)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .setCompleted(isCompleted).completeOrder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static LinkedList\u003cPrefix\u003e getPrefixesList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return prefixesList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!(other instanceof EditOrderCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        EditOrderCommand e \u003d (EditOrderCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return targetOrder \u003d\u003d e.targetOrder"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 editOrderDescriptor.equals(e.editOrderDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Stores the details to edit the order with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * corresponding field value of the order."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static class EditOrderDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private Name customer;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private Name restaurant;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private Map\u003cName, Integer\u003e foods;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public EditOrderDescriptor() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public EditOrderDescriptor(EditOrderDescriptor toCopy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            setCustomer(toCopy.customer);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            setRestaurant(toCopy.restaurant);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            setFoods(toCopy.foods);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return CollectionUtil.isAnyNonNull(customer, restaurant, foods);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public void setCustomer(Name customer) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.customer \u003d customer;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public Optional\u003cName\u003e getCustomer() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.ofNullable(customer);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public void setRestaurant(Name restaurant) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.restaurant \u003d restaurant;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public Optional\u003cName\u003e getRestaurant() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.ofNullable(restaurant);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code food}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * A defensive copy of {@code food} is used internally."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public void setFoods(Map\u003cName, Integer\u003e foods) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.foods \u003d (foods !\u003d null) ? new HashMap\u003c\u003e(foods) : null;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * Returns an unmodifiable food set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code food} is null."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public Optional\u003cMap\u003cName, Integer\u003e\u003e getFoods() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return (foods !\u003d null) ? Optional.of(Collections.unmodifiableMap(foods)) : Optional.empty();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (!(other instanceof EditOrderDescriptor)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            EditOrderDescriptor e \u003d (EditOrderDescriptor) other;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return getCustomer().equals(e.getCustomer())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    \u0026\u0026 getRestaurant().equals(e.getRestaurant())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    \u0026\u0026 getFoods().equals(e.getFoods());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 17,
      "MackyMaguire": 1,
      "SoilingRogue": 197
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 16,
      "charliechoong": 4
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //TODO: complete this class as well as in the UniversalParser.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public HelpCommand(String args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 18,
      "charliechoong": 9
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/ListOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Lists all orders in the system to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class ListOrderCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-list_orders\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all orders\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), Context.GLOBAL);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 17,
      "MackyMaguire": 2,
      "SoilingRogue": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Redoes an action on the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully redid: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_REDO \u003d \"There is nothing to redo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!model.hasRedo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new CommandException(MESSAGE_NOTHING_TO_REDO);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.redo()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "                || other instanceof RedoCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 34,
      "MackyMaguire": 1,
      "SoilingRogue": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/SummaryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "charliechoong": 17
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Undoes an action on the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully undid: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_UNDO \u003d \"There is nothing to undo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!model.hasUndo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new CommandException(MESSAGE_NOTHING_TO_UNDO);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.undo()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "                || other instanceof UndoCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 34,
      "MackyMaguire": 1,
      "SoilingRogue": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"ad/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_DELIVERYMAN \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_RESTAURANT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_FOOD \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_BOOLEAN_COMPLETED \u003d new Prefix(\"completed/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final Prefix PREFIX_ORDERNAME \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // Prefix for universal commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // Prefix for deliveryman commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // Prefix for restaurant commands"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 1,
      "ryantay232": 3,
      "MackyMaguire": 1,
      "SoilingRogue": 14,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.LocationMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index provided is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_INVALID_RATING \u003d \"Rating provided is not a non-negative unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses {@code rating} into an {@code Rating} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the specified rating is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static Rating parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!StringUtil.isNonNegativeUnsignedInteger(trimmedRating)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_RATING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!Rating.isValidRating(trimmedRating)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new Rating(trimmedRating);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e names} into a {@code Set\u003cName\u003e}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static ArrayList\u003cName\u003e parseNames(Collection\u003cString\u003e names) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(names);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        final ArrayList\u003cName\u003e nameSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (String tagName : names) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            nameSet.add(parseName(tagName));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return nameSet;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses a {@code String name} into a {@code Location}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!LocationMap.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(LocationMap.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return LocationMap.getLocation(trimmedLocation).get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Parses {@code String bool} into a {@code boolean}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static boolean parseBoolean(String bool) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(bool);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String trimmedBool \u003d bool.trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        boolean isCompleted \u003d Boolean.parseBoolean(trimmedBool);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!isCompleted \u0026\u0026 trimmedBool.equalsIgnoreCase(\"false\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(\"Completed should be true or false\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Parses a {@code String price} into a {@code BigDecimal}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static BigDecimal parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        BigDecimal result;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "etlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            result \u003d new BigDecimal(trimmedPrice);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "etlow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(\"Price must be a non-negative number\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!Food.isValidPrice(result)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(Food.PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Parses a {@code String quantity} into an {@code int}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static int parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Integer i;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "etlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            i \u003d Integer.parseInt(trimmedQuantity);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "etlow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (i \u003c\u003d 0) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses a {@code Collection\u003cString\u003e quantity} in seconds into a {@code ArrayList\u003cInteger\u003e}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the given {@code Collection\u003cString\u003e quantity} is invalid."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static ArrayList\u003cInteger\u003e parseQuantity(Collection\u003cString\u003e quantity) throws ParseException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final ArrayList\u003cInteger\u003e quantitySet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (String quantityName : quantity) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            quantitySet.add(parseQuantity(quantityName));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return quantitySet;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * to fill"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static boolean hasRepeatedPrefix(String input, Prefix... prefixes) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (Prefix prefix : prefixes) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            final String s \u003d prefix.getPrefix();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (input.indexOf(s) !\u003d input.lastIndexOf(s)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 25,
      "ryantay232": 17,
      "MackyMaguire": 58,
      "SoilingRogue": 56,
      "-": 84,
      "charliechoong": 5
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/customer/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class AddCommandParser implements Parser\u003cCustomerAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CustomerAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Name userName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer customer \u003d new Customer(userName, name, phone, address);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CustomerAddCommand(customer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 53,
      "MackyMaguire": 8
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/customer/CustomerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerDeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerHistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerSortCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class CustomerParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-customer\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case CustomerAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case CustomerDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case CustomerEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case CustomerHistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new HistoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case CustomerSortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new CustomerSortCommand(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 15,
      "SoilingRogue": 1,
      "charliechoong": 47
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/customer/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cCustomerDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new CustomerDeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CustomerDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 30
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/customer/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerEditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerEditCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class EditCommandParser implements Parser\u003cCustomerEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CustomerEditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        EditCustomerDescriptor editCustomerDescriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            editCustomerDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            editCustomerDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            editCustomerDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!editCustomerDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new ParseException(CustomerEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CustomerEditCommand(index, editCustomerDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 26,
      "charliechoong": 33
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/customer/HistoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.CustomerHistoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Parses input arguments and creates a new HistoryCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class HistoryCommandParser implements Parser\u003cCustomerHistoryCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HistoryCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * and returns a HistoryCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerHistoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new CustomerHistoryCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CustomerHistoryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 30
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/deliveryman/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class AddCommandParser implements Parser\u003cDeliverymanAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    DeliverymanAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman deliveryman \u003d new Deliveryman(name, phone, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new DeliverymanAddCommand(deliveryman);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 59
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/deliveryman/AssignCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanAssignCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class AssignCommandParser implements Parser\u003cDeliverymanAssignCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanAssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "        /* Put imports back if necessary when uncommenting this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.EditCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new DeliverymanAssignCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 13,
      "MackyMaguire": 2,
      "-": 61,
      "charliechoong": 10
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/deliveryman/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new DeliverymanDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeliverymanDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeliverymanDeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns a DeliverymanDeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new DeliverymanDeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliverymanDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 30
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/deliveryman/DeliverymanParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanAssignCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanDeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanGetStatisticsCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanListStatusCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanStatusSwitchCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-deliverymen\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DeliverymanAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DeliverymanAssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DeliverymanDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DeliverymanEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DeliverymanGetStatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new DeliverymanGetStatisticsCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DeliverymanListStatusCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new DeliverymanListStatusCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DeliverymanStatusSwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new StatusSwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "charliechoong": 71
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/deliveryman/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanEditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanEditCommand.EditDeliverymanDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new DeliverymanEditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class EditCommandParser implements Parser\u003cDeliverymanEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeliverymanEditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns an DeliverymanEditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    DeliverymanEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        EditDeliverymanDescriptor editDeliverymanDescriptor \u003d new EditDeliverymanDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            editDeliverymanDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            editDeliverymanDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editDeliverymanDescriptor::setTags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!editDeliverymanDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(DeliverymanEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new DeliverymanEditCommand(index, editDeliverymanDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "charliechoong": 79
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/deliveryman/StatusSwitchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeliverymanStatusSwitchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new StatusSwitchCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class StatusSwitchCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatusCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns a StatusCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanStatusSwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new DeliverymanStatusSwitchCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliverymanStatusSwitchCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 28
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/AddFoodCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddFoodCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new AddFoodCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class AddFoodCommandParser implements Parser\u003cAddFoodCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public AddFoodCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRICE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PRICE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || ParserUtil.hasRepeatedPrefix(args, PREFIX_NAME, PREFIX_PRICE)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFoodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        BigDecimal price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Food food \u003d new Food(name, price, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new AddFoodCommand(food);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 49,
      "MackyMaguire": 10
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/AddRatingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddRatingCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Rating;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new AddRatingCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class AddRatingCommandParser implements Parser\u003cAddRatingCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddRatingCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * and returns an AddRatingCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public AddRatingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Rating rating \u003d ParserUtil.parseRating(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new AddRatingCommand(rating);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRatingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 29
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/AddRestaurantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddRestaurantCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class AddRestaurantCommandParser implements Parser\u003cAddRestaurantCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public AddRestaurantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_LOCATION, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LOCATION)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || ParserUtil.hasRepeatedPrefix(args, PREFIX_NAME, PREFIX_LOCATION)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRestaurantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant restaurant \u003d new Restaurant(name, location, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new AddRestaurantCommand(restaurant);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 59
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/DeleteFoodCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.DeleteFoodCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new DeleteFoodCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DeleteFoodCommandParser implements Parser\u003cDeleteFoodCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteFoodCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * and returns a DeleteFoodCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DeleteFoodCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new DeleteFoodCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFoodCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 29
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/DeleteRestaurantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.DeleteRestaurantCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new DeleteRestaurantCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DeleteRestaurantCommandParser implements Parser\u003cDeleteRestaurantCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteRestaurantCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * and returns a DeleteRestaurantCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DeleteRestaurantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new DeleteRestaurantCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRestaurantCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 29
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/EditDetailsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditDetailsCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditDetailsCommand.EditRestaurantDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new EditDetailsCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class EditDetailsCommandParser implements Parser\u003cEditDetailsCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditDetailsCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * and returns an EditDetailsCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public EditDetailsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_LOCATION, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || ParserUtil.hasRepeatedPrefix(args, PREFIX_NAME, PREFIX_LOCATION)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditDetailsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        EditRestaurantDescriptor editRestaurantDescriptor \u003d new EditRestaurantDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            editRestaurantDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            editRestaurantDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editRestaurantDescriptor::setTags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!editRestaurantDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(EditDetailsCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new EditDetailsCommand(editRestaurantDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 73
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/EditModeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditModeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new EditRestaurantCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class EditModeCommandParser implements Parser\u003cEditModeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditRestaurantCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * and returns a EditRestaurantCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public EditModeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new EditModeCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditModeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 30
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/EditingParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddFoodCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddRatingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.DeleteFoodCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditDetailsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.ExitEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses user input in editing context"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class EditingParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case EditDetailsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new EditDetailsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case AddFoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new AddFoodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case AddRatingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new AddRatingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case DeleteFoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new DeleteFoodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case ExitEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new ExitEditCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 63
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/RestaurantParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddRestaurantCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.DeleteRestaurantCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditModeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses user input in restaurant context"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class RestaurantParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"-restaurant\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case AddRestaurantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new AddRestaurantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case DeleteRestaurantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new DeleteRestaurantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case EditModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new EditModeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 14,
      "SoilingRogue": 1,
      "charliechoong": 41
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/AddOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.AddOrderCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new {@code OrderCommand} object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class AddOrderCommandParser implements Parser\u003cAddOrderCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code OrderCommand}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns a {@code OrderCommand} object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public AddOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CUSTOMER,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                PREFIX_RESTAURANT, PREFIX_FOOD, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CUSTOMER, PREFIX_RESTAURANT, PREFIX_FOOD, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                || ParserUtil.hasRepeatedPrefix(args, PREFIX_CUSTOMER, PREFIX_RESTAURANT)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Name customerName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_CUSTOMER).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Name restaurantName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_RESTAURANT).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        ArrayList\u003cName\u003e foodList \u003d ParserUtil.parseNames(argMultimap.getAllValues(PREFIX_FOOD));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        ArrayList\u003cInteger\u003e quantityList \u003d ParserUtil.parseQuantity(argMultimap.getAllValues(PREFIX_QUANTITY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (foodList.size() !\u003d quantityList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        HashMap\u003cName, Integer\u003e lst \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (int i \u003d 0; i \u003c foodList.size(); ++i) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            lst.put(foodList.get(i), quantityList.get(i));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order orderToAdd \u003d new Order.OrderBuilder().setOrderName(new Name(\"dummy\")).setCustomer(customerName)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .setRestaurant(restaurantName).setFood(lst).completeOrder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new AddOrderCommand(orderToAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 1,
      "SoilingRogue": 47,
      "charliechoong": 22
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/AssignOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.AssignOrderCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new AssignOrderCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class AssignOrderCommandParser implements Parser\u003cAssignOrderCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignOrderCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns a AssignOrderCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public AssignOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    || ParserUtil.hasRepeatedPrefix(args, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return new AssignOrderCommand(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                throw new ParseException(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    AssignOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new AssignOrderCommand(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 23,
      "charliechoong": 30
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/CompleteOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.CompleteOrderCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Tofill."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class CompleteOrderCommandParser implements Parser\u003cCompleteOrderCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteOrderCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * and returns a DeleteOrderCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public CompleteOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    || ParserUtil.hasRepeatedPrefix(args, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return new CompleteOrderCommand(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                throw new ParseException(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    CompleteOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Name orderName \u003d ParserUtil.parseName(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new CompleteOrderCommand(orderName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 3,
      "SoilingRogue": 50
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/Context.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public enum Context {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    GLOBAL,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    CUSTOMER,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    DELIVERYMEN,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    RESTAURANT,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    EDITING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String toLowerCaseString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return name().toLowerCase();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "charliechoong": 15
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/DeleteOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.DeleteOrderCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Parses input arguments and creates a new DeleteOrderCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class DeleteOrderCommandParser implements Parser\u003cDeleteOrderCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteOrderCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * and returns a DeleteOrderCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public DeleteOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    || ParserUtil.hasRepeatedPrefix(args, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return new DeleteOrderCommand(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                throw new ParseException(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    DeleteOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Name name \u003d ParserUtil.parseName(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new DeleteOrderCommand(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 3,
      "SoilingRogue": 50
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/EditOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.commands.universal.EditOrderCommand.MESSAGE_INVALID_FOOD_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.EditOrderCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Parses input arguments and creates a new EditOrderCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class EditOrderCommandParser implements Parser\u003cEditOrderCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public EditOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CUSTOMER,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                PREFIX_RESTAURANT, PREFIX_FOOD, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Name name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    || ParserUtil.hasRepeatedPrefix(args, PREFIX_NAME, PREFIX_CUSTOMER, PREFIX_RESTAURANT)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                throw new ParseException(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        EditOrderCommand.EditOrderDescriptor editOrderDescriptor \u003d new EditOrderCommand.EditOrderDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CUSTOMER).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            editOrderDescriptor.setCustomer(ParserUtil.parseName(argMultimap.getValue(PREFIX_CUSTOMER).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RESTAURANT).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            editOrderDescriptor.setRestaurant(ParserUtil.parseName(argMultimap.getValue(PREFIX_RESTAURANT).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        parseFoodForEdit(argMultimap.getAllValues(PREFIX_FOOD), argMultimap.getAllValues(PREFIX_QUANTITY))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .ifPresent(editOrderDescriptor::setFoods);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!editOrderDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(EditOrderCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new EditOrderCommand(name, editOrderDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e foods} into a {@code Set\u003cTag\u003e} if {@code foods} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * If {@code foods} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero foods."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Optional\u003cMap\u003cName, Integer\u003e\u003e parseFoodForEdit(Collection\u003cString\u003e foods,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                                                          Collection\u003cString\u003e quantities) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        assert foods !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (foods.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (foods.size() !\u003d quantities.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FOOD_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        ArrayList\u003cName\u003e food \u003d ParserUtil.parseNames(foods);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        ArrayList\u003cInteger\u003e amount \u003d ParserUtil.parseQuantity(quantities);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        HashMap\u003cName, Integer\u003e lst \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (int i \u003d 0; i \u003c food.size(); ++i) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            lst.put(food.get(i), amount.get(i));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return Optional.of(lst);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 7,
      "SoilingRogue": 91
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/UniversalParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_SWITCH_CONTEXT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.AddOrderCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.AssignOrderCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.CompleteOrderCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.ContextCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.DeleteOrderCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.EditOrderCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.ListOrderCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.SummaryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.customer.CustomerParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.deliveryman.DeliverymanParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.restaurant.EditingParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.restaurant.RestaurantParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (To be added)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class UniversalParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Command parseCommand(String userInput, Context context) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Context currentContext \u003d context;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Context nextContext;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case AddOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new AddOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case AssignOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new AssignOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case CompleteOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new CompleteOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case DeleteOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new DeleteOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case EditOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new EditOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case ListOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new ListOrderCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new HelpCommand(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new SummaryCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "etlow"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "etlow"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case CustomerParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (arguments.length() !\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_SWITCH_CONTEXT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            nextContext \u003d Context.CUSTOMER;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new ContextCommand(nextContext);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DeliverymanParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (arguments.length() !\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_SWITCH_CONTEXT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            nextContext \u003d Context.DELIVERYMEN;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new ContextCommand(nextContext);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case RestaurantParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (arguments.length() !\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_SWITCH_CONTEXT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            nextContext \u003d Context.RESTAURANT;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new ContextCommand(nextContext);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            switch (currentContext) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            case CUSTOMER:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return new CustomerParser().parseCommand(userInput);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            case RESTAURANT:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                return new RestaurantParser().parseCommand(userInput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            case DELIVERYMEN:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return new DeliverymanParser().parseCommand(userInput);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            case EDITING:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                return new EditingParser().parseCommand(userInput);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 8,
      "ryantay232": 4,
      "MackyMaguire": 8,
      "SoilingRogue": 34,
      "charliechoong": 73
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderDatabase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatistics.StatisticsRecordCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.InvalidStatusChangeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.NoMoreAvailableDeliverymanException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.UnableToDeleteDeliveringDeliverymanException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_ALL_ORDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Predicate\u003cCustomer\u003e PREDICATE_SHOW_ALL_CUSTOMERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Predicate\u003cDeliveryman\u003e PREDICATE_SHOW_ALL_DELIVERYMEN \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Predicate\u003cRestaurant\u003e PREDICATE_SHOW_ALL_RESTAURANTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer Database / Filepath methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns the user prefs\u0027 customer database file path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Path getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Sets the user prefs\u0027 customer database file path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void setCustomerDatabaseFilePath(Path customerDatabaseFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Replaces customer database data with the data in {@code customerDatabase}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void setCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns the CustomerDatabase"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    ReadOnlyCustomerDatabase getCustomerDatabase();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliverymen Database / Filepath methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns the user prefs\u0027 deliverymen database file path."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Path getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Sets the user prefs\u0027 deliverymen database file path."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void setDeliverymenDatabaseFilePath(Path deliverymenDatabaseFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces deliverymen database data with the data in {@code deliverymenDatabase}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void setDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns the DeliverymenDatabase"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ReadOnlyDeliverymenDatabase getDeliverymenDatabase();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Restaurant Database / Filepath methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the user prefs\u0027 restaurant database file path."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Sets the user prefs\u0027 restaurant database file path."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setRestaurantDatabaseFilePath(Path restaurantDatabaseFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces restaurant database data with the data in {@code restaurantDatabase}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns the RestaurantDatabase"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ReadOnlyRestaurantDatabase getRestaurantDatabase();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order Database / Filepath methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns the user prefs\u0027 order book file path."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Sets the user prefs\u0027 order book file path."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void setOrderBookFilePath(Path orderBookFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces order book data with the data in {@code OrderBook}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setOrderDatabase(ReadOnlyOrderDatabase orderDatabase);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns the OrderBook"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ReadOnlyOrderDatabase getOrderDatabase();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Tells the model that a command was run and the text of the command"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void notifyChange(String commandText);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns whether there are actions to undo"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "etlow"
        },
        "content": "    boolean hasUndo();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns whether there are actions to redo"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "etlow"
        },
        "content": "    boolean hasRedo();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Undoes an action"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "etlow"
        },
        "content": "    String undo();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Redoes an action"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "etlow"
        },
        "content": "    String redo();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the address book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    boolean hasCustomer(Customer customer);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Deletes the given customer."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The customer must exist in the address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Checks for the {@code Order} to be deleted when {@code Customer} is deleted and setting {@code Deliveryman}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * to available for deleted {@code Orders}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void deleteCustomer(Customer target);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Adds the given customer."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code customer} must not already exist in the address book."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void addCustomer(Customer customer);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the given customer {@code target} with {@code editedCustomer}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the address"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void setCustomer(Customer target, Customer editedCustomer);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void setCustomerOrders(Customer customer);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns an unmodifiable view of the filtered customer list"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    ObservableList\u003cOrder\u003e getCustomerOrders();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Updates the filter of the filtered customer list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Restaurant methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a restaurant with the same identity as {@code restaurant} exists in the address book."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    boolean hasRestaurant(Restaurant restaurant);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Deletes the given restaurant."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant must exist in the address book."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void deleteRestaurant(Restaurant target);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Adds the given restaurant."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code restaurant} must not already exist in the address book."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void addRestaurant(Restaurant restaurant);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the given restaurant {@code target} with {@code editedRestaurant}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code target} must exist in the restaurant database."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * in the restaurant database."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setRestaurant(Restaurant target, Restaurant editedRestaurant);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setEditingRestaurant(Restaurant editingRestaurant);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns an unmodifiable view of the filtered restaurant list"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getFilteredRestaurantList();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns an unmodifiable view of the editing restaurant list"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getEditingRestaurantList();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Updates the filter of the filtered restaurant list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void updateFilteredRestaurantList(Predicate\u003cRestaurant\u003e predicate);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void updateEditingRestaurantList(Predicate\u003cRestaurant\u003e predicate);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliveryman Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns an unmodifiable view of the filtered deliverymen list"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if a deliveryman with the same identity as {@code deliveryman} exists in the deliveryman book."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    boolean hasDeliveryman(Deliveryman deliveryman);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Adds the given deliveryman."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code deliveryman} must not already exist in the deliverymen list."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void addDeliveryman(Deliveryman deliveryman);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Deletes the given customer."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The customer must exist in the address book."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void deleteDeliveryman(Deliveryman target) throws UnableToDeleteDeliveringDeliverymanException;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces the given deliveryman {@code target} with {@code editedDeliveryman}."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code target} must exist in the deliverymen database."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The deliveryman identity of {@code editedDeliveryman} must not be the same as another existing deliveryman"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * in the deliverymen database."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void setDeliveryman(Deliveryman target, Deliveryman editedDeliveryman);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void updateFilteredDeliverymenList(Predicate\u003cDeliveryman\u003e predicate);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void updateAvailableDeliverymenList(Predicate\u003cDeliveryman\u003e predicate);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getAvailableMenList();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getUnavailableMenList();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getDeliveringMenList();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns the Name of an available deliveryman."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Method for order assignment by OrderManager."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Name getOneAvailableDeliveryman() throws NoMoreAvailableDeliverymanException;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void updateDeliverymanStatusAfterChangesToOrder(Name deliverymanName);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void switchDeliverymanStatus(Deliveryman target) throws InvalidStatusChangeException;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    StatisticsRecordCard getDeliverymenStatusStats();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void signalNewAvailableDeliveryman();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if an order with the same identity as {@code order} exists in the address book."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    boolean hasOrder(Order order);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Deletes the given order."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order must exist in the address book."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void deleteOrder(Order target);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Adds the given order."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code order} must not already exist in the address book."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void addOrder(Order order);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces the given order {@code target} with {@code editedOrder}."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the address book."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void setOrder(Order target, Order editedOrder);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Order getOrder(Name targetOrder);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Name getFreeOrderName();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void addOrderInCustomer(Order order);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void deleteOrderInCustomer(Order order);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns an unmodifiable view of the filtered order list"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void assignUnassignedOrder();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 10,
      "ryantay232": 116,
      "MackyMaguire": 119,
      "SoilingRogue": 48,
      "charliechoong": 91
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.database.OrderDatabase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderDatabase;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatistics.StatisticsRecordCard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.InvalidStatusChangeException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.NoMoreAvailableDeliverymanException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.UnableToDeleteDeliveringDeliverymanException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final OrderDatabase orderDatabase;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final CustomerDatabase customerDatabase;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final DeliverymenDatabase deliverymenDatabase;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final RestaurantDatabase restaurantDatabase;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final FilteredList\u003cOrder\u003e filteredOrders;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final FilteredList\u003cCustomer\u003e filteredCustomers;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final FilteredList\u003cDeliveryman\u003e filteredDeliverymen;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final FilteredList\u003cDeliveryman\u003e availableDeliverymen;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final FilteredList\u003cDeliveryman\u003e unavailableDeliverymen;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final FilteredList\u003cDeliveryman\u003e deliveringDeliverymen;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final FilteredList\u003cRestaurant\u003e filteredRestaurants;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final FilteredList\u003cRestaurant\u003e editingRestaurant;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final UndoHistory\u003cData\u003e undoHistory;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Context context;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ModelManager(ReadOnlyCustomerDatabase customerDatabase,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                        ReadOnlyDeliverymenDatabase deliverymenDatabase,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        ReadOnlyRestaurantDatabase restaurantDatabase,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        ReadOnlyOrderDatabase orderBook,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireAllNonNull(customerDatabase, deliverymenDatabase, restaurantDatabase, orderBook, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        logger.fine(\"Initializing with customer database: \" + customerDatabase"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + \" and deliverymen database: \" + deliverymenDatabase"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + \" and restaurant database: \" + restaurantDatabase"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + \" and order book: \" + orderBook"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customerDatabase \u003d new CustomerDatabase(customerDatabase);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymenDatabase \u003d new DeliverymenDatabase(deliverymenDatabase);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurantDatabase \u003d new RestaurantDatabase(restaurantDatabase);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orderDatabase \u003d new OrderDatabase(orderBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        filteredCustomers \u003d new FilteredList\u003c\u003e(this.customerDatabase.getCustomerList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        filteredRestaurants \u003d new FilteredList\u003c\u003e(this.restaurantDatabase.getRestaurantList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingRestaurant \u003d new FilteredList\u003c\u003e(this.restaurantDatabase.getEditingRestaurantList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        filteredDeliverymen \u003d new FilteredList\u003c\u003e(this.deliverymenDatabase.getDeliverymenList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        availableDeliverymen \u003d new FilteredList\u003c\u003e(this.deliverymenDatabase.getAvailableDeliverymenList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        unavailableDeliverymen \u003d new FilteredList\u003c\u003e(this.deliverymenDatabase.getUnavailableDeliverymenList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliveringDeliverymen \u003d new FilteredList\u003c\u003e(this.deliverymenDatabase.getDeliveringDeliverymenList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        filteredOrders \u003d new FilteredList\u003c\u003e(this.orderDatabase.getOrderList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "etlow"
        },
        "content": "        undoHistory \u003d new UndoHistory\u003c\u003e(new Data(this));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this(new CustomerDatabase(), new DeliverymenDatabase(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                new RestaurantDatabase(), new OrderDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Path getCustomerDatabaseFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return userPrefs.getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomerDatabaseFilePath(Path customerDatabaseFilePath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(customerDatabaseFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        userPrefs.setCustomerDatabaseFilePath(customerDatabaseFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customerDatabase.resetData(customerDatabase);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ReadOnlyCustomerDatabase getCustomerDatabase() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customerDatabase;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customerDatabase.hasCustomer(customer);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void deleteCustomer(Customer target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ObservableList\u003cOrder\u003e orders \u003d getFilteredOrderList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ArrayList\u003cOrder\u003e ordersToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (target.getUserName().equals(order.getCustomer()) \u0026\u0026 !order.isCompleted()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                ordersToDelete.add(order);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        int size \u003d ordersToDelete.size();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            updateDeliverymanStatusAfterChangesToOrder(ordersToDelete.get(i).getDeliveryman());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            deleteOrder(ordersToDelete.get(i));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerDatabase.removeCustomer(target);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void addCustomer(Customer customer) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerDatabase.addCustomer(customer);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerDatabase.setCustomer(target, editedCustomer);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomerOrders(Customer customer) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireAllNonNull(customer);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerDatabase.setCustomerOrders(customer);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ObservableList\u003cOrder\u003e getCustomerOrders() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ArrayList\u003cOrder\u003e orders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Order order : getFilteredOrderList()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (order.getCustomer().equals(customerDatabase.getCustomerOrders().getUserName())) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                orders.add(order);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ObservableList\u003cOrder\u003e modelOrders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        modelOrders.addAll(orders);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return modelOrders;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Restaurant Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getRestaurantDatabaseFilePath() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return userPrefs.getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurantDatabaseFilePath(Path restaurantDatabaseFilePath) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurantDatabaseFilePath);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        userPrefs.setRestaurantDatabaseFilePath(restaurantDatabaseFilePath);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurantDatabase.resetData(restaurantDatabase);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ReadOnlyRestaurantDatabase getRestaurantDatabase() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabase;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean hasRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurant);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabase.hasRestaurant(restaurant);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void deleteRestaurant(Restaurant target) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantDatabase.removeRestaurant(target);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void addRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantDatabase.addRestaurant(restaurant);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        updateFilteredRestaurantList(PREDICATE_SHOW_ALL_RESTAURANTS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(target, editedRestaurant);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantDatabase.setRestaurant(target, editedRestaurant);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (getEditingRestaurantList().size() \u003e 0 \u0026\u0026 target \u003d\u003d getEditingRestaurantList().get(0)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "etlow"
        },
        "content": "            setEditingRestaurant(editedRestaurant);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setEditingRestaurant(Restaurant editingRestaurant) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(editingRestaurant);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ArrayList\u003cRestaurant\u003e list \u003d new ArrayList\u003cRestaurant\u003e();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        list.add(editingRestaurant);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantDatabase.setEditingRestaurant(list);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliveryman Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Path getDeliverymenDatabaseFilePath() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return userPrefs.getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymenDatabaseFilePath(Path deliverymenDatabaseFilePath) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(deliverymenDatabaseFilePath);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        userPrefs.setDeliverymenDatabaseFilePath(deliverymenDatabaseFilePath);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymenDatabase.resetData(deliverymenDatabase);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ReadOnlyDeliverymenDatabase getDeliverymenDatabase() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabase;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void deleteDeliveryman(Deliveryman target) throws UnableToDeleteDeliveringDeliverymanException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenDatabase.removeDeliveryman(target);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void addDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenDatabase.addDeliveryman(deliveryman);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean hasDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(deliveryman);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabase.hasDeliveryman(deliveryman);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliveryman(Deliveryman target, Deliveryman editedDeliveryman) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireAllNonNull(target, editedDeliveryman);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenDatabase.setDeliveryman(target, editedDeliveryman);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void switchDeliverymanStatus(Deliveryman deliveryman) throws InvalidStatusChangeException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(deliveryman);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenDatabase.switchDeliverymanStatus(deliveryman);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (deliveryman.getStatus().getDescription().equals(\"AVAILABLE\")) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            signalNewAvailableDeliveryman();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Name getOneAvailableDeliveryman() throws NoMoreAvailableDeliverymanException {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabase.getAvailableDeliveryman();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void updateDeliverymanStatusAfterChangesToOrder(Name deliverymanName) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenDatabase.updateDeliverymanStatusAfterChangesToOrder(deliverymanName);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        signalNewAvailableDeliveryman();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatisticsRecordCard getDeliverymenStatusStats() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabase.analyzeDeliverymenStatus();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void signalNewAvailableDeliveryman() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        assignUnassignedOrder();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return userPrefs.getOrderBookFilePath();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setOrderBookFilePath(Path orderBookFilePath) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(orderBookFilePath);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        userPrefs.setOrderBookFilePath(orderBookFilePath);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setOrderDatabase(ReadOnlyOrderDatabase orderDatabase) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orderDatabase.resetData(orderDatabase);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ReadOnlyOrderDatabase getOrderDatabase() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderDatabase;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderDatabase.hasOrder(order);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void deleteOrder(Order order) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orderDatabase.removeOrder(order);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void addOrder(Order order) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orderDatabase.addOrder(order);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orderDatabase.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Order getOrder(Name targetOrder) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Order orderToGet \u003d null;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Order order : getFilteredOrderList()) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (order.getOrderName().equals(targetOrder)) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                orderToGet \u003d order;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return orderToGet;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Name getFreeOrderName() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        int n \u003d 1;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Order order : getFilteredOrderList()) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            String orderNumber \u003d order.getOrderName().fullName.split(\"\\\\s\")[1];"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (Integer.parseInt(orderNumber) \u003e\u003d n) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                n \u003d Integer.parseInt(orderNumber);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        n++;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        builder.append(\"Order \")"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(n);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new Name(builder.toString());"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void addOrderInCustomer(Order order) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer customer \u003d null;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Customer cust : getFilteredCustomerList()) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (cust.getUserName().equals(order.getCustomer())) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                customer \u003d cust;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Restaurant restaurant \u003d null;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Restaurant rest : getFilteredRestaurantList()) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (rest.getName().equals(order.getRestaurant())) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                restaurant \u003d rest;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customer.addOrder(restaurant.getTags());"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void deleteOrderInCustomer(Order order) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer customer \u003d null;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Customer cust : getFilteredCustomerList()) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (cust.getUserName().equals(order.getCustomer())) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                customer \u003d cust;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Restaurant restaurant \u003d null;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Restaurant rest : getFilteredRestaurantList()) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (rest.getName().equals(order.getRestaurant())) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                restaurant \u003d rest;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customer.deleteOrder(restaurant.getTags());"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void assignUnassignedOrder() {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        LinkedList\u003cOrder\u003e sortedList \u003d getFilteredOrderList().stream().sorted((o1, o2)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            -\u003e o1.getOrderName().fullName.compareToIgnoreCase(o2.getOrderName().fullName))"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .collect(Collectors.toCollection(LinkedList::new));"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (Order order : sortedList) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (order.getDeliveryman().fullName.equalsIgnoreCase(\"Unassigned\")) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    Name newDeliveryman \u003d getOneAvailableDeliveryman();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    Order assignedOrder \u003d new Order.OrderBuilder().setOrderName(order.getOrderName())"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                            .setCustomer(order.getCustomer()).setRestaurant(order.getRestaurant())"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                            .setFood(order.getFoodList()).setDeliveryman(newDeliveryman).completeOrder();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    setOrder(order, assignedOrder);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                } catch (NoMoreAvailableDeliverymanException e) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "etlow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public void notifyChange(String commandText) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "etlow"
        },
        "content": "        undoHistory.notifyChange(commandText, new Data(this));"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean hasUndo() {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return undoHistory.hasUndo();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean hasRedo() {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return undoHistory.hasRedo();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public String undo() {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "etlow"
        },
        "content": "        UndoHistory\u003cData\u003e.State state \u003d undoHistory.undo();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "etlow"
        },
        "content": "        setData(state.getData());"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return state.getSubsequentCause();"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public String redo() {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "etlow"
        },
        "content": "        UndoHistory\u003cData\u003e.State state \u003d undoHistory.redo();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "etlow"
        },
        "content": "        setData(state.getData());"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return state.getCause();"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private void setData(Data data) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        setCustomerDatabase(data.customerDatabase);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        setDeliverymenDatabase(data.deliverymenDatabase);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "etlow"
        },
        "content": "        setRestaurantDatabase(data.restaurantDatabase);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        setOrderDatabase(data.orderDatabase);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Customer} backed by the internal list of"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return filteredCustomers;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return filteredDeliverymen;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getAvailableMenList() {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return availableDeliverymen;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getUnavailableMenList() {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return unavailableDeliverymen;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getDeliveringMenList() {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliveringDeliverymen;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getFilteredRestaurantList() {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return filteredRestaurants;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getEditingRestaurantList() {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return editingRestaurant;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return filteredOrders;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        filteredOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        filteredCustomers.setPredicate(predicate);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void updateAvailableDeliverymenList(Predicate\u003cDeliveryman\u003e predicate) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        availableDeliverymen.setPredicate(predicate);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void updateFilteredDeliverymenList(Predicate\u003cDeliveryman\u003e predicate) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        filteredDeliverymen.setPredicate(predicate);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void updateFilteredRestaurantList(Predicate\u003cRestaurant\u003e predicate) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        filteredRestaurants.setPredicate(predicate);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void updateEditingRestaurantList(Predicate\u003cRestaurant\u003e predicate) {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingRestaurant.setPredicate(predicate);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 filteredCustomers.equals(other.filteredCustomers);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Wrapper class for data stored in a model."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static class Data {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        private final CustomerDatabase customerDatabase;"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        private final DeliverymenDatabase deliverymenDatabase;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private final RestaurantDatabase restaurantDatabase;"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private final OrderDatabase orderDatabase;"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "etlow"
        },
        "content": "        public Data(Model model) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            customerDatabase \u003d new CustomerDatabase(model.getCustomerDatabase());"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenDatabase \u003d new DeliverymenDatabase(model.getDeliverymenDatabase());"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "etlow"
        },
        "content": "            restaurantDatabase \u003d new RestaurantDatabase(model.getRestaurantDatabase());"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            orderDatabase \u003d new OrderDatabase(model.getOrderDatabase());"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "etlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "etlow"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "etlow"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "etlow"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "etlow"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "etlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "etlow"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "etlow"
        },
        "content": "            if (!(obj instanceof Data)) {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "etlow"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "etlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "etlow"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "etlow"
        },
        "content": "            Data other \u003d (Data) obj;"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return customerDatabase.equals(other.customerDatabase)"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    \u0026\u0026 deliverymenDatabase.equals(other.deliverymenDatabase)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "etlow"
        },
        "content": "                    \u0026\u0026 restaurantDatabase.equals(other.restaurantDatabase)"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    \u0026\u0026 orderDatabase.equals(other.orderDatabase);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 68,
      "ryantay232": 149,
      "MackyMaguire": 209,
      "SoilingRogue": 68,
      "charliechoong": 151
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long but shorter than 10 \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    + \"digits.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,10}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof seedu.deliverymans.model.Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 value.equals(((seedu.deliverymans.model.Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "charliechoong": 7
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Path getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Path getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 2,
      "MackyMaguire": 16,
      "SoilingRogue": 2,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/UndoHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Tracks history of an object for undo and redo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": " * @param \u003cT\u003e Type of the object to track."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "class UndoHistory\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private List\u003cState\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private int current;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "    UndoHistory(T addressBook) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "        history.add(new State(null, addressBook));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Notifies this undo history that the object may have been changed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * An entry in the history is only added if the object is not equal to the previous object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * according to its equals method."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param name Name of the action changing the object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param addressBook New version of the object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void notifyChange(String name, T addressBook) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!addressBook.equals(history.get(current).getData())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "            if (hasRedo()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "                history.subList(current + 1, history.size()).clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "            history.get(current).subsequentCause \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "            current++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "            history.add(new State(name, addressBook));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "    boolean hasUndo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return current !\u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "    boolean hasRedo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return current !\u003d history.size() - 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "    State undo() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": "        current--;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return history.get(current);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "    State redo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etlow"
        },
        "content": "        current++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return history.get(current);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Wrapper for the action causing the change to the object, the subsequent action, and the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * object itself at this state."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etlow"
        },
        "content": "    class State {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private String cause;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private String subsequentCause;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private T data;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private State(String cause, T data) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etlow"
        },
        "content": "            this.cause \u003d cause;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etlow"
        },
        "content": "            this.data \u003d data;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String getCause() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return cause;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String getSubsequentCause() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return subsequentCause;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etlow"
        },
        "content": "        public T getData() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return data;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 83
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Path customerDatabaseFilePath \u003d Paths.get(\"data\", \"customerdatabase.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Path deliverymenDatabaseFilePath \u003d Paths.get(\"data\" , \"deliverymendatabase.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Path restaurantDatabaseFilePath \u003d Paths.get(\"data\" , \"restaurantdatabase.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Path orderBookFilePath \u003d Paths.get(\"data\" , \"orderbook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        setCustomerDatabaseFilePath(newUserPrefs.getCustomerDatabaseFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        setDeliverymenDatabaseFilePath(newUserPrefs.getDeliverymenDatabaseFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        setRestaurantDatabaseFilePath(newUserPrefs.getRestaurantDatabaseFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        setOrderBookFilePath(newUserPrefs.getOrderBookFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Path getCustomerDatabaseFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customerDatabaseFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomerDatabaseFilePath(Path customerDatabaseFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(customerDatabaseFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customerDatabaseFilePath \u003d customerDatabaseFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Path getDeliverymenDatabaseFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabaseFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymenDatabaseFilePath(Path deliverymenDatabaseFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(deliverymenDatabaseFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymenDatabaseFilePath \u003d deliverymenDatabaseFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getRestaurantDatabaseFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabaseFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurantDatabaseFilePath(Path restaurantDatabaseFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurantDatabaseFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurantDatabaseFilePath \u003d restaurantDatabaseFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderBookFilePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrderBookFilePath(Path orderBookFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(orderBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orderBookFilePath \u003d orderBookFilePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 customerDatabaseFilePath.equals(o.customerDatabaseFilePath)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 deliverymenDatabaseFilePath.equals(o.deliverymenDatabaseFilePath)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 restaurantDatabaseFilePath.equals(o.restaurantDatabaseFilePath)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 orderBookFilePath.equals(o.orderBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Objects.hash(guiSettings, customerDatabaseFilePath, deliverymenDatabaseFilePath,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                restaurantDatabaseFilePath, orderBookFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + customerDatabaseFilePath + \" , \" + deliverymenDatabaseFilePath"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + \" , \" + restaurantDatabaseFilePath + \" , \" + orderBookFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 11,
      "MackyMaguire": 84,
      "SoilingRogue": 11,
      "charliechoong": 19
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/customer/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/customer/Customer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Represents a Customer in the system."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class Customer {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Name userName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final ObservableMap\u003cTag, Integer\u003e totalTags \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private int noOfOrders;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Customer(Name userName, Name name, Phone phone, Address address) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireAllNonNull(userName, phone, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        noOfOrders \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructor for SampleDataUtil."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Customer(Name userName, Name name, Phone phone, Address address, Set\u003cTag\u003e tags, int noOfOrders) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireAllNonNull(userName, phone, address, tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            totalTags.put(tag, 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.noOfOrders \u003d noOfOrders;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructor for saving to storage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Customer(Name userName, Name name, Phone phone, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    ObservableMap\u003cTag, Integer\u003e totalTags, int noOfOrders) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireAllNonNull(userName, phone, tags, address, totalTags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.totalTags.putAll(totalTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.noOfOrders \u003d noOfOrders;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Name getUserName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return userName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Map\u003cTag, Integer\u003e getTotalTags() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return Collections.unmodifiableMap(totalTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Adds Customer\u0027s noOfOrders and adds the tags to {@code ObservableMap\u003cTag, Integer\u003e} totalTags."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void addOrder(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        noOfOrders++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        addTags(tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Reduces Customer\u0027s noOfOrders and deletes the tags from {@code ObservableMap\u003cTag, Integer\u003e} totalTags."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void deleteOrder(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        noOfOrders--;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        deleteTags(tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Adds {@code Set\u003cTag\u003e} tags into {@code ObservableMap\u003cTag, Integer\u003e} totalTags."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private void addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Integer i \u003d totalTags.get(tag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (i !\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                totalTags.replace(tag, i, i + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                totalTags.put(tag, 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (!this.tags.contains(tag)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                changeMainTags();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Deletes {@code Set\u003cTag\u003e} tags from totalTags"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private void deleteTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Integer i \u003d totalTags.get(tag);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if ((i - 1) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                totalTags.remove(tag);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                totalTags.replace(tag, i, i - 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            changeMainTags();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Changes Customer\u0027s tags to new tags depending on the number of occurrence of {@code Tag}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private void changeMainTags() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!totalTags.isEmpty()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            List\u003cMap.Entry\u003cTag, Integer\u003e\u003e list \u003d new ArrayList\u003c\u003e(totalTags.entrySet());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            list.sort(Map.Entry.comparingByValue());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            newTags.add(list.get(list.size() - 1).getKey());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (list.size() \u003e 1) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                newTags.add(list.get(list.size() - 2).getKey());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            tags.addAll(newTags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public int getNoOfOrders() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return noOfOrders;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean isSameCustomer(Customer otherCustomer) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (otherCustomer \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return otherCustomer !\u003d null"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 otherCustomer.getUserName().equals(getUserName());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!(other instanceof Customer)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer otherCustomer \u003d (Customer) other;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return otherCustomer.getUserName().equals(getUserName())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 otherCustomer.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 otherCustomer.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 otherCustomer.getTags().equals(getTags());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return Objects.hash(userName, name, phone, address, tags, noOfOrders);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        builder.append(getUserName())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(getName().toString())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(getPhone().toString())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(getAddress().toString())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(\" Favourite cuisine: \");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 228,
      "MackyMaguire": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/customer/UniqueCustomerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.exceptions.CustomerNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.exceptions.DuplicateCustomerException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Unique list of customers"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class UniqueCustomerList implements Iterable\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if the list contains an equivalent customer as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean contains(Customer toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCustomer);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Adds a customer to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * The customer must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void add(Customer toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Replaces the customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CustomerNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!target.isSameCustomer(editedCustomer) \u0026\u0026 contains(editedCustomer)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        internalList.set(index, editedCustomer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void remove(Customer toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CustomerNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomers(UniqueCustomerList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomers(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireAllNonNull(customers);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!customersAreUnique(customers)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        internalList.setAll(customers);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ObservableList\u003cCustomer\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Iterator\u003cCustomer\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                || (other instanceof UniqueCustomerList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCustomerList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private boolean customersAreUnique(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (int i \u003d 0; i \u003c customers.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            for (int j \u003d i + 1; j \u003c customers.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                if (customers.get(i).isSameCustomer(customers.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 126,
      "MackyMaguire": 3
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/customer/exceptions/CustomerNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Signals that the operation is unable to find the specified customer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 6
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/customer/exceptions/DuplicateCustomerException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Signals that the operation will result in duplicate Customers (Customers are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class DuplicateCustomerException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public DuplicateCustomerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        super(\"Operation would result in duplicate customers\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/CustomerDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.UniqueCustomerList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Wraps all Customer data at the customer-database level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Duplicates are not allowed (by .isSameCustomer comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerDatabase implements ReadOnlyCustomerDatabase {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final UniqueCustomerList customers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Customer customerOrders;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customers \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerDatabase() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Creates a CustomerDatabase using the Customers in the {@code toBeCopied}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerDatabase(ReadOnlyCustomerDatabase toBeCopied) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomers(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customers.setCustomers(customers);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomerOrders(Customer customerOrders) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customerOrders \u003d customerOrders;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Resets the existing data of this {@code CustomerDatabase} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void resetData(ReadOnlyCustomerDatabase newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        setCustomers(newData.getCustomerList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    //// customer-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the customer database."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customers.contains(customer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Adds a customer to the customer database."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * The customer must not already exist in the customer database."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void addCustomer(Customer c) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customers.add(c);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Replaces the given customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code target} must exist in the customer database."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the customer"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * database."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(editedCustomer);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customers.setCustomer(target, editedCustomer);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Removes {@code key} from this {@code CustomerDatabase}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code key} must exist in the customer database."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void removeCustomer(Customer key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customers.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customers.asUnmodifiableObservableList().size() + \" customers\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getCustomerList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Customer getCustomerOrders() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customerOrders;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                || (other instanceof CustomerDatabase"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 customers.equals(((CustomerDatabase) other).customers));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customers.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 122
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/DeliverymenDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.UniqueDeliverymanList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatistics.StatisticsManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatistics.StatisticsRecordCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatus.StatusManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.InvalidStatusChangeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.NoMoreAvailableDeliverymanException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.UnableToDeleteDeliveringDeliverymanException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Wraps all Deliverymen data at the deliverymen-database level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Duplicates are not allowed (by .isSameDeliveryman comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymenDatabase implements ReadOnlyDeliverymenDatabase {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final UniqueDeliverymanList deliverymen;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final StatusManager statusManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final StatisticsManager statisticsManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private ObservableList\u003cDeliveryman\u003e statusSortedList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymen \u003d new UniqueDeliverymanList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager \u003d new StatusManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statisticsManager \u003d new StatisticsManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public DeliverymenDatabase() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Creates a DeliverymenDatabase using the Deliverymen in the {@code toBeCopied}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymenDatabase(ReadOnlyDeliverymenDatabase toBeCopied) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager.initStatusLists(deliverymen);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces the contents of the deliverymen list with {@code deliverymen}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code deliverymen} must not contain duplicate deliverymen."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymen(List\u003cDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymen.setDeliverymen(deliverymen);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Resets the existing data of this {@code DeliverymenDatabase} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void resetData(ReadOnlyDeliverymenDatabase newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        setDeliverymen(newData.getDeliverymenList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Basic functions related to deliverymen \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if a deliveryman with the same identity as {@code deliveryman} exists in the deliverymen database."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean hasDeliveryman(Deliveryman man) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(man);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymen.contains(man);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Adds a deliveryman to the deliverymen database."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The deliveryman must not already exist in the deliverymen database."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void addDeliveryman(Deliveryman man) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymen.add(man);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager.addUnavailableMan(man);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces the given deliveryman {@code target} in the list with {@code editedDeliveryman}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code target} must exist in the deliveryman database."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The deliveryman identity of {@code editedDeliveryman} must not be the same as another existing deliveryman in the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * deliverymen database."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliveryman(Deliveryman target, Deliveryman editedDeliveryman) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(editedDeliveryman);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymen.setDeliveryman(target, editedDeliveryman);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager.removeDeliveryman(target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager.addUnavailableMan(editedDeliveryman);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager.updateStatusOf(editedDeliveryman, target.getStatus().getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Removes {@code key} from this {@code DeliverymenDatabase}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code key} must exist in the deliverymen database."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void removeDeliveryman(Deliveryman key) throws UnableToDeleteDeliveringDeliverymanException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (key.getStatus().getDescription().equals(\"DELIVERING\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new UnableToDeleteDeliveringDeliverymanException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymen.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager.removeDeliveryman(key);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Methods related to list command \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Lists all the available deliverymen;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getAvailableDeliverymenList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return statusManager.listAvailableMen();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Lists all the delivering deliverymen."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getDeliveringDeliverymenList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return statusManager.listDeliveringMen();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Lists all the unavailable deliverymen."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getUnavailableDeliverymenList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return statusManager.listUnavailableMen();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if the list contains an equivalent deliveryman as the given argument."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean contains(Deliveryman toCheck) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return statusSortedList.stream().anyMatch(toCheck::isSameDeliveryman);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Methods related to Order \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Retrieves the name of an available deliveryman for OrderManager for the purpose of delivering an order."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Name getAvailableDeliveryman() throws NoMoreAvailableDeliverymanException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return statusManager.getAvailableDeliveryman().getName();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Updates the deliveryman status after he has completed an order."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void updateDeliverymanStatusAfterChangesToOrder(Name deliveryman) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager.updateDeliverymanStatusAfterChangesToOrder(deliveryman);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Switches the deliveryman status from AVAILABLE to UNAVAILABLE, or vice versa."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void switchDeliverymanStatus(Deliveryman target) throws InvalidStatusChangeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager.switchDeliverymanStatus(target);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Methods related to Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatisticsRecordCard analyzeDeliverymenStatus() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return statisticsManager.analyzeStatusLists(statusManager.listAvailableMen(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                statusManager.listUnavailableMen(), statusManager.listDeliveringMen());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d util methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymen.asUnmodifiableObservableList().size() + \" deliverymen\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getDeliverymenList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymen.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof DeliverymenDatabase"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 deliverymen.equals(((DeliverymenDatabase) other).deliverymen));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymen.hashCode();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 4,
      "charliechoong": 195
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/OrderDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.UniqueOrderList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Wraps all data at the order database level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Duplicates are not allowed (by .isSameOrder comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class OrderDatabase implements ReadOnlyOrderDatabase {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final UniqueOrderList orders;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orders \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public OrderDatabase() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public OrderDatabase(ReadOnlyOrderDatabase toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces the contents of the order list with {@code orders}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code orders} must not contain duplicate orderss."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orders.setOrders(orders);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void resetData(ReadOnlyOrderDatabase newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        setOrders(newData.getOrderList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if an order with the same identity as {@code order} exists in the address book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orders.contains(order);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Adds an order to the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order must not already exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void addOrder(Order o) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orders.add(o);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces the given order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order identity of {@code editedorder} must not be the same as another existing order in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orders.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void removeOrder(Order key) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orders.remove(key);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                || (other instanceof OrderDatabase // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 orders.equals(((OrderDatabase) other).orders));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orders.hashCode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 4,
      "SoilingRogue": 100
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/ReadOnlyCustomerDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Unmodifiable view of a customer database"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public interface ReadOnlyCustomerDatabase {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns an unmodifiable view of the customers list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * This list will not contain any duplicate customers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    ObservableList\u003cCustomer\u003e getCustomerList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 16,
      "MackyMaguire": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/ReadOnlyDeliverymenDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Unmodifiable view of the all info regarding deliverymen."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public interface ReadOnlyDeliverymenDatabase {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns an unmodifiable view of the deliverymen list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * This list will not contain any duplicate delieverymen."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getDeliverymenList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 15
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/ReadOnlyOrderDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Unmodifiable view of an order book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public interface ReadOnlyOrderDatabase {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns an unmodifiable view of the orders list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * This list will not contain any duplicate orders."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    ObservableList\u003cOrder\u003e getOrderList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "SoilingRogue": 15
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/ReadOnlyRestaurantDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Unmodifiable view of a restaurant database"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public interface ReadOnlyRestaurantDatabase {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns an unmodifiable view of the restaurants list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * This list will not contain any duplicate restaurants."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getRestaurantList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getEditingRestaurantList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 19
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/RestaurantDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.UniqueRestaurantList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Wraps all data at the restaurant database level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Duplicates are not allowed (by .isSameRestaurant comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class RestaurantDatabase implements ReadOnlyRestaurantDatabase {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final UniqueRestaurantList restaurants;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final UniqueRestaurantList editingRestaurant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurants \u003d new UniqueRestaurantList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingRestaurant \u003d new UniqueRestaurantList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public RestaurantDatabase() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates an RestaurantDatabase using the Restaurants in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public RestaurantDatabase(ReadOnlyRestaurantDatabase toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the contents of the restaurant list with {@code restaurants}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code restaurants} must not contain duplicate restaurants."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurants(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurants.setRestaurants(restaurants);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setEditingRestaurant(List\u003cRestaurant\u003e editingRestaurant) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.editingRestaurant.setRestaurants(editingRestaurant);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Resets the existing data of this {@code RestaurantDatabase} with {@code newData}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void resetData(ReadOnlyRestaurantDatabase newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        setRestaurants(newData.getRestaurantList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        setEditingRestaurant(newData.getEditingRestaurantList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //// restaurant-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a restaurant with the same identity as {@code restaurant} exists in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean hasRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurant);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurants.contains(restaurant);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Adds a restaurant to the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void addRestaurant(Restaurant r) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        restaurants.add(r);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the given restaurant {@code target} in the list with {@code editedRestaurant}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(editedRestaurant);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurants.setRestaurant(target, editedRestaurant);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Removes {@code key} from this {@code RestaurantDatabase}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void removeRestaurant(Restaurant key) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurants.remove(key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getRestaurantList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurants.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getEditingRestaurantList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return editingRestaurant.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurants.asUnmodifiableObservableList().size() + \" restaurants\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof RestaurantDatabase // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 restaurants.equals(((RestaurantDatabase) other).restaurants)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 editingRestaurant.equals(((RestaurantDatabase) other).editingRestaurant));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Objects.hash(restaurants, editingRestaurant);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 2,
      "MackyMaguire": 131
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/Deliveryman.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatus.StatusTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Represents a deliveryman"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class Deliveryman {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private StatusTag status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Deliveryman(Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireAllNonNull(name, phone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        status \u003d new StatusTag(\"UNAVAILABLE\"); // editing field will affect status"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Deliveryman(Name name, Phone phone, Set\u003cTag\u003e tags, StatusTag status) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireAllNonNull(name, phone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.status \u003d status; // editing other fields will affect status"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatusTag getStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setStatusTo(StatusTag status) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean isSameDeliveryman(Deliveryman otherDeliveryman) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (otherDeliveryman \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return otherDeliveryman !\u003d null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 otherDeliveryman.getName().equals(getName())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 otherDeliveryman.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 otherDeliveryman.getStatus().getDescription().equals(getStatus().getDescription());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if both persons have the same identity. Data fields need not be same."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!(other instanceof Deliveryman)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman otherPerson \u003d (Deliveryman) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Objects.hash(name, phone, tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .append(getPhone().toString())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "charliechoong": 44
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/UniqueDeliverymanList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.DeliverymanNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.DuplicateDeliverymanException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * A unique list of deliverymen that does not allow for duplicate deliverymen."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class UniqueDeliverymanList implements Iterable\u003cDeliveryman\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final ObservableList\u003cDeliveryman\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final ObservableList\u003cDeliveryman\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if the list contains an equivalent deliveryman as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean contains(Deliveryman toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeliveryman);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Adds a deliveryman to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The deliveryman must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void add(Deliveryman toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DuplicateDeliverymanException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliveryman(Deliveryman target, Deliveryman editedDeliveryman) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(editedDeliveryman);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DeliverymanNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!target.isSameDeliveryman(editedDeliveryman) \u0026\u0026 contains(editedDeliveryman)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DuplicateDeliverymanException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        internalList.set(index, editedDeliveryman);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Removes the equivalent deliveryman from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The deliveryman must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void remove(Deliveryman toRemove) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DeliverymanNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymen(UniqueDeliverymanList replacement) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces the contents of this list with {@code deliverymen}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code deliverymen} must not contain duplicate deliverymen."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymen(List\u003cDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireAllNonNull(deliverymen);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!deliverymenAreUnique(deliverymen)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DuplicateDeliverymanException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        internalList.setAll(deliverymen);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Iterator\u003cDeliveryman\u003e iterator() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof UniqueDeliverymanList // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDeliverymanList) other).internalList));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if {@code deliverymen} contains only unique deliverymen."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private boolean deliverymenAreUnique(List\u003cDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (int i \u003d 0; i \u003c deliverymen.size() - 1; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c deliverymen.size(); j++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                if (deliverymen.get(i).isSameDeliveryman(deliverymen.get(j))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 124
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/deliverymanstatistics/Analyzer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.deliverymanstatistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.model.deliveryman.deliverymanstatistics.State.HIGH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.model.deliveryman.deliverymanstatistics.State.LOW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.model.deliveryman.deliverymanstatistics.State.MAX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.model.deliveryman.deliverymanstatistics.State.MODERATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * This is a singleton Analyzer object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * It analyzes the current status lists of deliverymen and compute relevant data and records the data on"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * a {@code StatisticsRecordCard}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class Analyzer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static Analyzer theAnalyzer \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static double lowUtilisationBoundary \u003d 20.0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static double highUtilisationBoundary \u003d 80.0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static double lowActivityBoundary \u003d 40.0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static double highActivityBoundary \u003d 90.0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static double maxBoundary \u003d 100;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Analyzer() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Prevents instantiation of Analyzer from outside. Only one copy is allowed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static Analyzer getInstance() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (theAnalyzer \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            theAnalyzer \u003d new Analyzer();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return theAnalyzer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Analyzes the time in database, the delivery rate, order completion rate of a deliveryman record."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Then records it on the record card."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return the same {@code StatisticsRecordCard} which the function took in as parameter."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatisticsRecordCard analyze(StatisticsRecordCard recordCard, ObservableList\u003cDeliveryman\u003e availableMenList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                        ObservableList\u003cDeliveryman\u003e unavailableMenList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                        ObservableList\u003cDeliveryman\u003e deliveringMenList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        int availableMen \u003d calcAvailableMen(availableMenList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        int unavailableMen \u003d calcUnavailableMen(unavailableMenList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        int deliveringMen \u003d calcDeliveringMen(deliveringMenList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        int totalMen \u003d calcTotalMenSize(availableMenList, unavailableMenList, deliveringMenList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        double utilisationLevel \u003d calcUtilisationLevel(availableMenList, unavailableMenList, deliveringMenList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        double activityLevel \u003d calcActivityLevel(availableMenList, unavailableMenList, deliveringMenList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        State utilisationState \u003d calcUtilisationState(utilisationLevel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        State activityState \u003d calcActivityState(activityLevel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        recordCard.editCard(availableMen, unavailableMen, deliveringMen, totalMen, utilisationLevel, activityLevel,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                utilisationState, activityState);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return recordCard;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d Functions to calculate statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private int calcAvailableMen(ObservableList\u003cDeliveryman\u003e list) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private int calcUnavailableMen(ObservableList\u003cDeliveryman\u003e list) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private int calcDeliveringMen(ObservableList\u003cDeliveryman\u003e list) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private int calcTotalMenSize(ObservableList\u003cDeliveryman\u003e list1, ObservableList\u003cDeliveryman\u003e list2,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                 ObservableList\u003cDeliveryman\u003e list3) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return list1.size() + list2.size() + list3.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private double calcUtilisationLevel(ObservableList\u003cDeliveryman\u003e list1, ObservableList\u003cDeliveryman\u003e list2,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                        ObservableList\u003cDeliveryman\u003e list3) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return ((double) calcDeliveringMen(list3) / (calcDeliveringMen(list3) + calcAvailableMen(list1))) * 100.0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private double calcActivityLevel(ObservableList\u003cDeliveryman\u003e list1, ObservableList\u003cDeliveryman\u003e list2,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                     ObservableList\u003cDeliveryman\u003e list3) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return ((double) (calcDeliveringMen(list3) + calcAvailableMen(list1))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                / (calcTotalMenSize(list1, list2, list3))) * 100.00;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d Functions to calculate state levels \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param utilLevel"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private State calcUtilisationState(double utilLevel) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (utilLevel \u003c\u003d lowUtilisationBoundary) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return LOW;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } else if (utilLevel \u003d\u003d maxBoundary) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return MAX;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } else if (utilLevel \u003e\u003d highUtilisationBoundary) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return HIGH;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return MODERATE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param activeLevel"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private State calcActivityState(double activeLevel) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (activeLevel \u003c\u003d lowActivityBoundary) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return LOW;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } else if (activeLevel \u003d\u003d maxBoundary) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return MAX;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } else if (activeLevel \u003e\u003d highActivityBoundary) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return HIGH;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return MODERATE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d Functions to alter boundary values \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private void changeBoundaryValues() {}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 130
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/deliverymanstatistics/State.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.deliverymanstatistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Represents the level of data variables in {@code StatisticsRecordCard}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public enum State {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    LOW, MODERATE, HIGH, MAX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 8
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/deliverymanstatistics/StatisticsManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.deliverymanstatistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * To be added."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class StatisticsManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Analyzer analyzer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        analyzer \u003d Analyzer.getInstance();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Creates an empty {@code StatisticsRecordCard} for Analyzer to analyzed and record on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns a filled-up StatisticsRecordCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatisticsRecordCard analyzeStatusLists(ObservableList\u003cDeliveryman\u003e availableMenList,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                                   ObservableList\u003cDeliveryman\u003e unavailableMenList,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                                   ObservableList\u003cDeliveryman\u003e deliveringMenList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        StatisticsRecordCard recordCard \u003d createNewRecordCard();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        analyzer.analyze(recordCard, availableMenList, unavailableMenList, deliveringMenList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return recordCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Creates a new record card."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return a new and empty {@code StatisticsRecordCard}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatisticsRecordCard createNewRecordCard() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new StatisticsRecordCard();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 37
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/deliverymanstatistics/StatisticsRecordCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.deliverymanstatistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Represents a card for statistics to be recorded on."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Each variable represent a statistic."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class StatisticsRecordCard {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String UTILIZATION_MESSAGE \u003d \"(Utilisation level signals the level of \\nidle deliverymen.)\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String ACTIVITY_MESSAGE \u003d \"(Activity level signals the level of \\nactive deliverymen.)\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // empty data fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Integer numAvailableMen;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Integer numUnavailableMen;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Integer numDeliveringMen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Integer numTotalMen;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private double utilisationLevel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private double activityLevel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // verifiers"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private State utilisationState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private State activityState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // Initialises an empty record card with all values set to 0 as default."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatisticsRecordCard() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        numAvailableMen \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        numUnavailableMen \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        numDeliveringMen \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        numTotalMen \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        utilisationLevel \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        activityLevel \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void editCard(int f1, int f2, int f3, int f4, double f5, double f6, State s1, State s2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        numAvailableMen \u003d f1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        numUnavailableMen \u003d f2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        numDeliveringMen \u003d f3;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        numTotalMen \u003d f4;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        utilisationLevel \u003d f5;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        activityLevel \u003d f6;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        utilisationState \u003d s1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        activityState \u003d s2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String resultMessage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        String resultMessage \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\" + \"TOTAL DELIVERYMEN  :  \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + numTotalMen + \"\\n\" + \"AVAILABLE      :  \" + numAvailableMen + \"\\n\" + \"UNAVAILABLE    :  \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + numUnavailableMen + \"\\n\" + \"DELIVERING     :  \" + numDeliveringMen + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\" + \"UTILIZATION LEVEL  :  \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + String.format(\"%.2f%%\", utilisationLevel) + \"\\n\" + UTILIZATION_MESSAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + \"ACTIVITY LEVEL  :  \" + String.format(\"%.2f%%\", activityLevel) + \"\\n\" + ACTIVITY_MESSAGE + \"\\n\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return resultMessage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String adviceMessage() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (utilisationState) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            sb.append(\"You have too much manpower that is not utilized!\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            sb.append(\"Watch out!You are running out of available deliverymen!\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case MODERATE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            sb.append(\"All is well. Your deliverymen are balanced.\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            sb.append(\"***DeliveryMANS***\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (activityState) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            sb.append(\"You have too many deliverymen who are off.\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case MODERATE:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            sb.append(\"You have a fair number of active deliverymen.\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            sb.append(\"Great! Your deliverymen are mostly active.\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case MAX:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            sb.append(\"Amazing! All your deliveryMANS are working hard to serve your restaurant\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            sb.append(\"***DeliveryMANS***\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Object retrieveRecordCardField(int fieldIndex) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        assert (fieldIndex \u003e\u003d 1 \u0026\u0026 fieldIndex \u003c 9);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (fieldIndex) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return numAvailableMen;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return numUnavailableMen;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return numDeliveringMen;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return numTotalMen;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return utilisationLevel;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return activityLevel;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return utilisationState;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return activityState;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // Record report that will be displayed on the UI."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 128
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/deliverymanstatus/StatusManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.deliverymanstatus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.model.deliveryman.deliverymanstatus.UniqueStatusList.AVAILABLE_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.model.deliveryman.deliverymanstatus.UniqueStatusList.UNAVAILABLE_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.UniqueDeliverymanList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.InvalidStatusChangeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.NoMoreAvailableDeliverymanException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * A list that primarily focuses on the status of the deliverymen."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Handles the statuses of the deliverymen."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Issues related to the current statuses of the deliverymen are directed here."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Not allowed to edit information regarding personal info of deliverymen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class StatusManager {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final ObservableList\u003cDeliveryman\u003e availableMen \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final ObservableList\u003cDeliveryman\u003e unavailableMen \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final ObservableList\u003cDeliveryman\u003e deliveringMen \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Initialise all the status lists of every deliveryman when app is re-opened."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Can only be called by higher-level classes that uses this class (ie. DeliverymenDatabase)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void initStatusLists(UniqueDeliverymanList deliverymenList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (Deliveryman man : deliverymenList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            switch (man.getStatus().getDescription()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            case \"AVAILABLE\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                updateStatusOf(man, \"AVAILABLE\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            case \"UNAVAILABLE\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                updateStatusOf(man, \"UNAVAILABLE\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            case \"DELIVERING\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                deliveringMen.add(man);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * To be added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void switchDeliverymanStatus(Deliveryman deliveryman) throws InvalidStatusChangeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        String status \u003d deliveryman.getStatus().getDescription();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (status.equals(AVAILABLE_STATUS)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            updateStatusOf(deliveryman, UNAVAILABLE_STATUS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } else if (status.equals(UNAVAILABLE_STATUS)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            updateStatusOf(deliveryman, AVAILABLE_STATUS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new InvalidStatusChangeException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void addAvailableMan(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        availableMen.add(deliveryman);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void addUnavailableMan(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        unavailableMen.add(deliveryman);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void addDeliveringMan(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliveringMen.add(deliveryman);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Removes a deliveryman from the relevant status list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Guarantees: Deliveryman exists in one of the 3 status lists."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void removeDeliveryman(Deliveryman target) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (Deliveryman man: availableMen) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (target.isSameDeliveryman(man)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                availableMen.remove(man);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (Deliveryman man: unavailableMen) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (target.isSameDeliveryman(man)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                unavailableMen.remove(man);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (Deliveryman man: deliveringMen) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (target.isSameDeliveryman(man)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                deliveringMen.remove(man);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns a list of all available deliverymen."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e listAvailableMen() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return availableMen;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns a list of all unavailable deliverymen."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e listUnavailableMen() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return unavailableMen;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns a list of all delivering deliverymen."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e listDeliveringMen() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliveringMen;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if the list contains an equivalent deliveryman as the given argument."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean contains(Deliveryman toCheck) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return availableMen.stream().anyMatch(toCheck::isSameDeliveryman);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Methods for Order assignment \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns an available deliveryman to the DeliverymenDatabase."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return an available Deliveryman"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws NoMoreAvailableDeliverymanException if availableMen is empty"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Deliveryman getAvailableDeliveryman() throws NoMoreAvailableDeliverymanException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (availableMen.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new NoMoreAvailableDeliverymanException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman removed \u003d availableMen.remove(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        updateStatusOf(removed, \"DELIVERING\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return removed;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Resets the status of the deliveryman after an order has become inactive (ie. deleted or completed)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void updateDeliverymanStatusAfterChangesToOrder(Name nameOfDeliveryman) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (Deliveryman man : deliveringMen) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (man.getName().equals(nameOfDeliveryman)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                Deliveryman deliveryman \u003d man;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                updateStatusOf(deliveryman, \"AVAILABLE\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Updates the status of a deliveryman by removing the previous status and assigning the new status."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void updateStatusOf(Deliveryman deliveryman, String strStatus) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        removePreviousStatus(deliveryman);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        assignStatusTagTo(deliveryman, strStatus);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Removes original status from a deliveryman."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void removePreviousStatus(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (deliveryman.getStatus().getDescription()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"AVAILABLE\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            availableMen.remove(deliveryman);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"UNAVAILABLE\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            unavailableMen.remove(deliveryman);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"DELIVERING\":"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliveringMen.remove(deliveryman);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Assigns new status tag to a deliveryman."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void assignStatusTagTo(Deliveryman deliveryman, String strNewStatus) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (strNewStatus) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"AVAILABLE\":"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliveryman.setStatusTo(UniqueStatusList.getAvailableTag());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            availableMen.add(deliveryman);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"UNAVAILABLE\":"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliveryman.setStatusTo(UniqueStatusList.getUnavailableTag());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            unavailableMen.add(deliveryman);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"DELIVERING\":"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliveryman.setStatusTo(UniqueStatusList.getDeliveringTag());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliveringMen.add(deliveryman);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 211
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/deliverymanstatus/StatusTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.deliverymanstatus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Represents the current status of a deliveryman."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class StatusTag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatusTag(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if both persons have the same identity. Data fields need not be same."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!(other instanceof StatusTag)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        StatusTag otherTag \u003d (StatusTag) other;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return otherTag.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 40
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/deliverymanstatus/UniqueStatusList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.deliverymanstatus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * A list that contains 3 status tags."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class UniqueStatusList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String AVAILABLE_STATUS \u003d \"AVAILABLE\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String UNAVAILABLE_STATUS \u003d \"UNAVAILABLE\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String DELIVERING_STATUS \u003d \"DELIVERING\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final StatusTag availableTag \u003d new StatusTag(AVAILABLE_STATUS);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final StatusTag unavailableTag \u003d new StatusTag(UNAVAILABLE_STATUS);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final StatusTag deliveringTag \u003d new StatusTag(DELIVERING_STATUS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Lists all the deliverymen with their respective statuses."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static StatusTag getAvailableTag() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return availableTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static StatusTag getUnavailableTag() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return unavailableTag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static StatusTag getDeliveringTag() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliveringTag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static StatusTag getCorrespondingTag(String tagDescription) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (tagDescription) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case AVAILABLE_STATUS:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return getAvailableTag();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case UNAVAILABLE_STATUS:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return getUnavailableTag();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DELIVERING_STATUS:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return getDeliveringTag();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return getAvailableTag();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Checks if a tag description is valid ie. matches one of the 3 tags in UniqueStatusList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static boolean isValidStatus(String tagDescription) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return tagDescription.equals(AVAILABLE_STATUS) || tagDescription.equals(UNAVAILABLE_STATUS)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || tagDescription.equals(DELIVERING_STATUS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof UniqueStatusList // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 availableTag.equals(((StatusTag) other).description)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 unavailableTag.equals(((StatusTag) other).description))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 deliveringTag.equals(((StatusTag) other).description); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Objects.hash(availableTag, unavailableTag, deliveringTag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 67
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/exceptions/DeliverymanNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Signals that the operation is unable to find the specified customer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 6
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/exceptions/DuplicateDeliverymanException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Signals that the operation will result in duplicate Deliverymen (Deliverymen are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DuplicateDeliverymanException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DuplicateDeliverymanException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        super(\"Operation would result in duplicate deliverymen\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/exceptions/InvalidStatusChangeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Signals that the operation is not executable (The status of the deliveryman must be AVAILABLE or UNAVAILABLE)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class InvalidStatusChangeException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public InvalidStatusChangeException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        super(\"Current status of deliveryman must be either AVAILABLE or UNAVAILABLE in order to be switched. \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 12
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/exceptions/NoMoreAvailableDeliverymanException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Signals that the operation is unable to retrieve any available deliveryman."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class NoMoreAvailableDeliverymanException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public NoMoreAvailableDeliverymanException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        super(\"There is currently no deliveryman who is available to be assigned orders. \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 12
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/exceptions/UnableToDeleteDeliveringDeliverymanException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Signals that the operation is unable to retrieve any available deliveryman."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class UnableToDeleteDeliveringDeliverymanException extends CommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public UnableToDeleteDeliveringDeliverymanException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        super(\"You cannot delete a deliveryman who is currently delivering an order. \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 12
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/food/Food.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Represents a Food in a restaurant."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String PRICE_CONSTRAINTS \u003d \"Price should not be negative\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String QUANTITY_CONSTRAINTS \u003d \"Quantity should not be negative\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final BigDecimal price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final int quantityOrdered;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructs a {@code Food}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param name A valid food name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param price A non-negative price."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param tags Tags of the food."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Food(Name name, BigDecimal price, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this(name, price, tags, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Food(Name name, BigDecimal price, Set\u003cTag\u003e tags, int quantityOrdered) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(name, price, quantityOrdered, tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        checkArgument(isValidPrice(price), PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        checkArgument(isValidQuantity(quantityOrdered), QUANTITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.quantityOrdered \u003d quantityOrdered;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.tags \u003d Set.copyOf(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Returns true if a given number is a valid price."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static boolean isValidPrice(BigDecimal test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return test.compareTo(BigDecimal.ZERO) \u003e\u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Returns true if a given duration is a valid preparation time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static boolean isValidQuantity(int quantityOrdered) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return quantityOrdered \u003e\u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Returns a new Food with quantity added to quantityOrdered."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Food addQuantity(int quantity) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new Food(name, price, tags, quantityOrdered + quantity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Updates tags with \"Popular\" tag and returns a new Food if necessary."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Food updateTag(int totalQuantity, int menuSize) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedTags.remove(new Tag(\"Popular\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (quantityOrdered !\u003d 0 \u0026\u0026 quantityOrdered \u003e\u003d 1.5 * totalQuantity / menuSize) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etlow"
        },
        "content": "            updatedTags.add(new Tag(\"Popular\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (tags.equals(updatedTags)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "etlow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return new Food(name, price, updatedTags, quantityOrdered);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public BigDecimal getPrice() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int getQuantityOrdered() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return quantityOrdered;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public String getDisplayPrice() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return NumberFormat.getCurrencyInstance(Locale.US).format(getPrice());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if both food are of the same name."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * This defines a weaker notion of equality between two food."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean isSameFood(Food otherFood) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (otherFood \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherFood.getName().equals(getName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!(obj instanceof Food)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Food other \u003d (Food) obj;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return name.equals(other.name)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u0026\u0026 price.compareTo(other.price) \u003d\u003d 0"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 quantityOrdered \u003d\u003d other.quantityOrdered"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u0026\u0026 tags.equals(other.tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Objects.hash(name, price, quantityOrdered, tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "etlow"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "etlow"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .append(getDisplayPrice())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "etlow"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 87,
      "ryantay232": 31,
      "MackyMaguire": 39
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/food/exceptions/DuplicateFoodException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Signals that the operation will result in duplicate Food (Food are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(\"Operation would result in duplicate food\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/food/exceptions/FoodNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Signals that the operation is unable to find the specified food."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 7
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/location/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Represents a location in the map."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private int x;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private int y;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "    Location(String locationName, int xCoordinate, int yCoordinate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "        name \u003d locationName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "        x \u003d xCoordinate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "        y \u003d yCoordinate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "    int getX() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return x;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "    int getY() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return y;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 32,
      "MackyMaguire": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/location/LocationMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Contains all locations."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class LocationMap {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \"Location should only be one of the following locations: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Jurong, Tuas, Woodlands, Bishan, City, Marina, Changi, Punggol\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static List\u003cLocation\u003e locations \u003d new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "            new Location(\"Jurong\", 1, 1),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Location(\"Tuas\", 1, 1),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Location(\"Woodlands\", 1, 1),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Location(\"Bishan\", 1, 1),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Location(\"City\", 1, 1),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "            new Location(\"Marina\", 2, 0),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Location(\"Changi\", 3, 1),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Location(\"Punggol\", 3, 1)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static Optional\u003cLocation\u003e getLocation(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String query \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return locations.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .filter(location -\u003e location.getName().toLowerCase().equals(query))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .findAny();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return getLocation(test).isPresent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public double getDistanceBetween(Location a, Location b) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "        double xDistance \u003d b.getX() - a.getX();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "        double yDistance \u003d b.getY() - a.getY();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return Math.sqrt(xDistance * xDistance + yDistance * yDistance);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 26,
      "MackyMaguire": 20
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/order/Order.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Represents an Order in the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class Order {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Name orderName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Name customer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Name restaurant;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Name deliveryman;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final ObservableMap\u003cName, Integer\u003e foodList \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final boolean isCompleted;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Constructs a {@code Order}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param orderName   The name of the order"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param customer    The customer who made the order."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param restaurant  The restaurant to order from."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param deliveryman The deliveryman delivering the order."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param foodList    The list of food ordered with their respective quantities;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param isCompleted The completion status of the order."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Order(Name orderName, Name customer, Name restaurant, Name deliveryman,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                  Map\u003cName, Integer\u003e foodList, boolean isCompleted) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireAllNonNull(orderName, customer, restaurant, deliveryman, foodList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.orderName \u003d orderName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.restaurant \u003d restaurant;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.deliveryman \u003d deliveryman;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.foodList.putAll(foodList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Name getOrderName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return orderName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Name getCustomer() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Name getDeliveryman() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return deliveryman;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns an immutable food map, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Map\u003cName, Integer\u003e getFoodList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return Collections.unmodifiableMap(foodList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Name getRestaurant() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return restaurant;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean isSameOrder(Order otherOrder) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (otherOrder \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return otherOrder !\u003d null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 otherOrder.getOrderName().equals(getOrderName())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getCustomer().equals(getCustomer())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getDeliveryman().equals(getDeliveryman())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getRestaurant().equals(getRestaurant())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getFoodList().equals(getFoodList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if both orders have the same identity and data fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * This defines a stronger notion of equality between two orders."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // return other \u003d\u003d this || (other instanceof Order \u0026\u0026 orderName.equals(((Order) other).orderName));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!(other instanceof Order)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order otherOrder \u003d (Order) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return otherOrder.getOrderName().equals(getOrderName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 otherOrder.getCustomer().equals(getCustomer())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getDeliveryman().equals(getDeliveryman())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getFoodList().equals(getFoodList())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getRestaurant().equals(getRestaurant())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 (otherOrder.isCompleted() \u003d\u003d isCompleted());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return Objects.hash(customer, restaurant, deliveryman, foodList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        builder.append(\" Order Name: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(getOrderName())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(\" Customer: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(getCustomer())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(\" Restaurant: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(getRestaurant())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(\" Deliveryman: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(getDeliveryman())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(\" Food: \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        getFoodList().forEach((key, value) -\u003e builder.append(String.format(\"%s x%d \", key, value)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        builder.append(\" Completed delivery: \").append(isCompleted());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * OrderBuilder used to instantiate an Order."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Contains all relevant information regarding an Order,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * and creates a new Order object once its completeOrder() function is called"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static class OrderBuilder {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        private Name orderName;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private Name customer;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private Name restaurant;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private Name deliveryman \u003d new Name(\"Unassigned\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private boolean isCompleted \u003d false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private final Map\u003cName, Integer\u003e foodList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public OrderBuilder setOrderName(Name orderName) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            this.orderName \u003d orderName;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public OrderBuilder setCustomer(Name customer) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.customer \u003d customer;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public OrderBuilder setRestaurant(Name restaurant) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.restaurant \u003d restaurant;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public OrderBuilder setDeliveryman(Name deliveryman) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.deliveryman \u003d deliveryman;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public OrderBuilder setFood(Map\u003cName, Integer\u003e foodList) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.foodList.putAll(foodList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public OrderBuilder setCompleted(boolean isCompleted) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public Order completeOrder() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new Order(orderName, customer, restaurant, deliveryman, foodList, isCompleted);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 39,
      "MackyMaguire": 2,
      "SoilingRogue": 149,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/order/UniqueOrderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Unique list of orders."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class UniqueOrderList implements Iterable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if the list contains an equivalent order as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean contains(Order toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameOrder);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Adds an order to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void add(Order toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces the order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!target.isSameOrder(editedOrder) \u0026\u0026 contains(editedOrder)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        internalList.set(index, editedOrder);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Removes the equivalent order from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void remove(Order toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrders(UniqueOrderList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireAllNonNull(orders);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!ordersAreUnique(orders)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        internalList.setAll(orders);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public ObservableList\u003cOrder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Iterator\u003cOrder\u003e iterator() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                || (other instanceof UniqueOrderList // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueOrderList) other).internalList));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private boolean ordersAreUnique(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (int i \u003d 0; i \u003c orders.size() - 1; i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            for (int j \u003d i + 1; j \u003c orders.size(); j++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                if (orders.get(i).isSameOrder(orders.get(j))) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 128
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/order/exceptions/DuplicateOrderException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Signals that the operation will result in duplicate Customers (Customers are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class DuplicateOrderException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public DuplicateOrderException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        super(\"Operation would result in duplicate orders\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/order/exceptions/OrderNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Signals that the operation is unable to find the specified customer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class OrderNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 7
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/restaurant/Rating.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a Rating"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \"Rating should be an integer from 0 to 5\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public final int numberOfRatings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public final String rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.numberOfRatings \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param rating A valid rating"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param numberOfRatings"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Rating(String rating, int numberOfRatings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.numberOfRatings \u003d numberOfRatings;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a given string is a valid rating."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static boolean isValidRating(String rating) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        boolean matchRegex \u003d rating.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (matchRegex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            double value \u003d getRatingValue(rating);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            boolean matchRange \u003d (value \u003c\u003d 5) \u0026\u0026 (value \u003e\u003d 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return matchRange;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static double getRatingValue(String rating) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Double.parseDouble(rating);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (numberOfRatings \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return \"0\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return String.format(\"%.1f\", getRatingValue(rating) / numberOfRatings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 rating.equals(((Rating) other).rating)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 numberOfRatings \u003d\u003d ((Rating) other).numberOfRatings); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Objects.hash(rating, numberOfRatings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 82
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/restaurant/Restaurant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a Restaurant"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class Restaurant {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private int quantityOrdered;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final List\u003cFood\u003e menu;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Restaurant(Name name, Location location, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(name, location, tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d new Rating(\"0\", 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.menu \u003d List.of();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.quantityOrdered \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Restaurant(Name name, Location location, Set\u003cTag\u003e tags, List\u003cFood\u003e menu) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(name, location, tags, menu);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d new Rating(\"0\", 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.menu \u003d List.copyOf(menu);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.quantityOrdered \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Restaurant(Name name, Location location, Rating rating, Set\u003cTag\u003e tags, List\u003cFood\u003e menu,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                      int quantityOrdered) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(name, location, rating, tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.menu \u003d List.copyOf(menu);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.quantityOrdered \u003d quantityOrdered;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public List\u003cFood\u003e getMenu() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cOrder\u003e getOrders(Logic logic) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ObservableList\u003cOrder\u003e orders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ObservableList\u003cOrder\u003e allOrders \u003d logic.getFilteredOrderList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (Order order : allOrders) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (order.getRestaurant().equals(this.name)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                orders.add(order);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return orders;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int getQuantityOrdered() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return this.quantityOrdered;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Returns a new restaurant with the food item added to the restaurant\u0027s menu"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param toAdd Food to be added."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Restaurant addFood(Food toAdd) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        boolean isDuplicate \u003d menu.stream().anyMatch(toAdd::isSameFood);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (isDuplicate) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "etlow"
        },
        "content": "        List\u003cFood\u003e updatedMenu \u003d new ArrayList\u003c\u003e(menu);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedMenu.add(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new Restaurant(name, location, rating, tags, updatedMenu, quantityOrdered);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Returns a new restaurant with the food item removed from the restaurant\u0027s menu"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param toRemove Food to be removed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Restaurant removeFood(Food toRemove) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(toRemove);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "etlow"
        },
        "content": "        List\u003cFood\u003e updatedMenu \u003d new ArrayList\u003c\u003e(menu);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!updatedMenu.remove(toRemove)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new Restaurant(name, location, rating, tags, updatedMenu, quantityOrdered);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Updates quantityOrdered based on order"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Restaurant updateQuantity(Order order) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "etlow"
        },
        "content": "        int updatedQuantity \u003d quantityOrdered;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "etlow"
        },
        "content": "        List\u003cFood\u003e updatedMenu \u003d new ArrayList\u003c\u003e(menu);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (Map.Entry\u003cName, Integer\u003e entry : order.getFoodList().entrySet()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "etlow"
        },
        "content": "            for (int i \u003d 0; i \u003c updatedMenu.size(); i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "etlow"
        },
        "content": "                Food food \u003d updatedMenu.get(i);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                if (food.getName().equals(entry.getKey())) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "etlow"
        },
        "content": "                    updatedQuantity +\u003d entry.getValue();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "etlow"
        },
        "content": "                    updatedMenu.set(i, food.addQuantity(entry.getValue()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "etlow"
        },
        "content": "        for (int i \u003d 0; i \u003c updatedMenu.size(); i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "etlow"
        },
        "content": "            Food food \u003d updatedMenu.get(i);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "etlow"
        },
        "content": "            updatedMenu.set(i, food.updateTag(updatedQuantity, updatedMenu.size()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new Restaurant(name, location, rating, tags, updatedMenu, updatedQuantity);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Updates quantityOrdered based on quantity and returns a new Restaurant."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Restaurant updateQuantity(int quantity) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "etlow"
        },
        "content": "        List\u003cFood\u003e updatedMenu \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (Food food : this.menu) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "etlow"
        },
        "content": "            updatedMenu.add(food.updateTag(this.quantityOrdered, this.menu.size()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new Restaurant(name, location, rating, tags, updatedMenu, quantityOrdered + quantity);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean isSameRestaurant(Restaurant otherRestaurant) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (otherRestaurant \u003d\u003d this) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return otherRestaurant !\u003d null"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getName().equals(getName());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!(other instanceof Restaurant)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant otherRestaurant \u003d (Restaurant) other;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return otherRestaurant.getName().equals(getName())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getRating().equals(getRating())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getTags().equals(getTags())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getMenu().equals(getMenu())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getQuantityOrdered() \u003d\u003d this.quantityOrdered;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Objects.hash(name, location, rating, tags, menu, quantityOrdered);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .append(\" Rating: \")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .append(getRating())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 40,
      "MackyMaguire": 185,
      "SoilingRogue": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/restaurant/UniqueRestaurantList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.exceptions.DuplicateRestaurantException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.exceptions.RestaurantNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * A list of restaurants that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * A restaurant is considered unique by comparing using {@code Restaurant#isSameRestaurant(Restaurant)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * adding and updating of restaurants uses Restaurant#isSameRestaurant(Restaurant) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * that the restaurant being added or updated is unique in terms of identity in the UniqueRestaurantList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * However, the removal of a person uses Restaurant#equals(Object) so as to ensure that the restaurant with exactly the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * @see Restaurant#isSameRestaurant(Restaurant)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class UniqueRestaurantList implements Iterable\u003cRestaurant\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final ObservableList\u003cRestaurant\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final ObservableList\u003cRestaurant\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if the list contains an equivalent restaurant as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean contains(Restaurant toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRestaurant);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Adds a restaurant to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void add(Restaurant toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the restaurant {@code target} in the list with {@code editedRestaurant}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(target, editedRestaurant);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new RestaurantNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!target.isSameRestaurant(editedRestaurant) \u0026\u0026 contains(editedRestaurant)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        internalList.set(index, editedRestaurant);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Removes the equivalent restaurant from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void remove(Restaurant toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new RestaurantNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurants(UniqueRestaurantList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the contents of this list with {@code restaurants}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code restaurants} must not contain duplicate restaurants."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurants(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(restaurants);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!restaurantsAreUnique(restaurants)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        internalList.setAll(restaurants);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Iterator\u003cRestaurant\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof UniqueRestaurantList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRestaurantList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if {@code restaurants} contains only unique restaurants."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private boolean restaurantsAreUnique(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (int i \u003d 0; i \u003c restaurants.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            for (int j \u003d i + 1; j \u003c restaurants.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                if (restaurants.get(i).isSameRestaurant(restaurants.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 139
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/restaurant/exceptions/DuplicateRestaurantException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.restaurant.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Signals that the operation will result in duplicate Restaurants (Restaurants are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DuplicateRestaurantException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DuplicateRestaurantException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(\"Operation would result in duplicate restaurants\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/restaurant/exceptions/RestaurantNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.restaurant.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Signals that the operation is unable to find the specified restaurant."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class RestaurantNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 7
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.database.OrderDatabase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderDatabase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatus.StatusTag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.LocationMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static Customer[] getSampleCustomers() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new Customer[]{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Customer(new Name(\"AlexYeoh\"), new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    getTagSet(\"FastFood\", \"Western\"), 1),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Customer(new Name(\"BerniceYu\"), new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    getTagSet(\"Indian\"), 1),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Customer(new Name(\"CharlotteOliveiro\"), new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    getTagSet(\"Bar\"), 1),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Customer(new Name(\"DavidLi\"), new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    getTagSet(\"Japanese\"), 1),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Customer(new Name(\"IfranIbrahim\"), new Name(\"Ifran Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    getTagSet(\"Barbeque\"), 1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static Restaurant[] getSampleRestaurants() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new Restaurant[]{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Restaurant(new Name(\"KFC\"), LocationMap.getLocation(\"Jurong\").get(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        getTagSet(\"FastFood\", \"Western\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etlow"
        },
        "content": "                        getMenu(new Food(new Name(\"Ginger Burger\"), new BigDecimal(\"6.5\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                        getTagSet(\"Recommended\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Shrooms Burger\"), new BigDecimal(\"5\"), getTagSet()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Fish Fillet Burger\"), new BigDecimal(\"5.5\"), getTagSet()),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"2 Piece Chicken\"), new BigDecimal(\"7.95\"), getTagSet()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"3 Piece Chicken\"), new BigDecimal(\"10.95\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                        getTagSet(\"Recommended\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Chicken Nuggets\"), new BigDecimal(\"3\"), getTagSet()))),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Restaurant(new Name(\"Prata House\"), LocationMap.getLocation(\"Bishan\").get(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        getTagSet(\"Indian\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etlow"
        },
        "content": "                        getMenu(new Food(new Name(\"Plain Prata\"), new BigDecimal(\"0.7\"), getTagSet()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Egg Prata\"), new BigDecimal(\"1\"), getTagSet()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Cheese Prata\"), new BigDecimal(\"1.2\"), getTagSet()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Prata Bomb\"), new BigDecimal(\"2\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                        getTagSet(\"Recommended\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Curry Fountain\"), new BigDecimal(\"2\"), getTagSet()),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Curry Waterfall\"), new BigDecimal(\"3\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                        getTagSet(\"Recommended\")))),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Restaurant(new Name(\"SkyBar Bar and Restaurant\"), LocationMap.getLocation(\"Marina\").get(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        getTagSet(\"Bar\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etlow"
        },
        "content": "                        getMenu(new Food(new Name(\"Duck Confit\"), new BigDecimal(\"10\"), getTagSet()),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Foie gras\"), new BigDecimal(\"15\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                        getTagSet(\"Recommended\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Buffalo Wings\"), new BigDecimal(\"15\"), getTagSet()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Rhinoceros Pizza\"), new BigDecimal(\"25\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                        getTagSet(\"Recommended\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Hippo Teeth\"), new BigDecimal(\"30.5\"), getTagSet()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Rat with Caviar\"), new BigDecimal(\"49.9\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                        getTagSet(\"Recommended\")))),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Restaurant(new Name(\"IchiNiSan Ramen\"), LocationMap.getLocation(\"City\").get(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        getTagSet(\"Japanese\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "etlow"
        },
        "content": "                        getMenu(new Food(new Name(\"Ramen A\"), new BigDecimal(\"10\"), getTagSet()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Ramen B\"), new BigDecimal(\"10\"), getTagSet()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Ramen C\"), new BigDecimal(\"10\"), getTagSet()),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Ramen D\"), new BigDecimal(\"15\"), getTagSet()),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Ramen E\"), new BigDecimal(\"15\"), getTagSet()),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"Ramen F\"), new BigDecimal(\"15\"), getTagSet()))),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Restaurant(new Name(\"Piggys Self Barbeque\"), LocationMap.getLocation(\"Woodlands\").get(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        getTagSet(\"Barbeque\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "etlow"
        },
        "content": "                        getMenu(new Food(new Name(\"BBQ Head\"), new BigDecimal(\"10\"), getTagSet()),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"BBQ Shank\"), new BigDecimal(\"15\"), getTagSet()),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"BBQ Trotter\"), new BigDecimal(\"15\"), getTagSet()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"BBQ Nails\"), new BigDecimal(\"25\"), getTagSet()),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"BBQ Butt\"), new BigDecimal(\"30.5\"), getTagSet()),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                new Food(new Name(\"BBQ Tail\"), new BigDecimal(\"49.9\"), getTagSet())))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        };"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static Order[] getSampleOrders() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new Order[]{"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Order.OrderBuilder().setOrderName(new Name(\"Order 1\")).setCustomer(new Name(\"AlexYeoh\"))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    .setRestaurant(new Name(\"KFC\")).setDeliveryman(new Name(\"Damith\"))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    .setFood(Map.ofEntries(Map.entry(new Name(\"3 Piece Chicken\"), 1)))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .completeOrder(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Order.OrderBuilder().setOrderName(new Name(\"Order 2\")).setCustomer(new Name(\"BerniceYu\"))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    .setRestaurant(new Name(\"Prata House\")).setDeliveryman(new Name(\"Donald Trump\"))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    .setFood(Map.ofEntries(Map.entry(new Name(\"Curry Fountain\"), 1)))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .completeOrder(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Order.OrderBuilder().setOrderName(new Name(\"Order 3\")).setCustomer(new Name(\"CharlotteOliveiro\"))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    .setRestaurant(new Name(\"SkyBar Bar and Restaurant\")).setDeliveryman(new Name(\"Charlie Choong\"))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    .setFood(Map.ofEntries(Map.entry(new Name(\"Buffalo Wings\"), 5)))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .completeOrder(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Order.OrderBuilder().setOrderName(new Name(\"Order 4\")).setCustomer(new Name(\"DavidLi\"))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    .setRestaurant(new Name(\"IchiNiSan Ramen\")).setDeliveryman(new Name(\"Low Ee Ter\"))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    .setFood(Map.ofEntries(Map.entry(new Name(\"Ramen C\"), 1),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                            Map.entry(new Name(\"Ramen E\"), 3)))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .completeOrder(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Order.OrderBuilder().setOrderName(new Name(\"Order 5\")).setCustomer(new Name(\"IrfanIbrahim\"))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    .setRestaurant(new Name(\"Piggys Self Barbeque\")).setDeliveryman(new Name(\"Yuen Jun Rong\"))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    .setFood(Map.ofEntries(Map.entry(new Name(\"BBQ Trotter\"), 7),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                                Map.entry(new Name(\"BBQ Shank\"), 7),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                                Map.entry(new Name(\"BBQ Tail\"), 7)))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    .completeOrder()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        };"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static Deliveryman[] getSampleDeliverymen() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new Deliveryman[]{"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Damith\"), new Phone(\"83412321\"),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    getTagSet(\"inactive\", \"giveCharlieAplus\"), new StatusTag(\"DELIVERING\")),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Donald Trump\"), new Phone(\"91234567\"),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    getTagSet(\"buff\", \"powerful\", \"bestDeliveryman2019\", \"notFat\", \"cuteHairstyle\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    new StatusTag(\"DELIVERING\")),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Charlie Choong\"), new Phone(\"98887146\"),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                getTagSet(\"active\", \"AisEnough\"), new StatusTag(\"DELIVERING\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Deliveryman(new Name(\"Low Ee Ter\"), new Phone(\"99367862\"), getTagSet(\"inactive\"),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    new StatusTag(\"DELIVERING\")),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Deliveryman(new Name(\"Yuen Jun Rong\"), new Phone(\"92345678\"), getTagSet(\"veryactive\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    new StatusTag(\"DELIVERING\")),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Jynn Shen \"), new Phone(\"82632181\"), getTagSet(\"veryactive\"),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                new StatusTag(\"AVAILABLE\")),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Gloria Tan\"), new Phone(\"83123111\"), getTagSet()),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Ethan Lim\"), new Phone(\"83123875\"), getTagSet(\"loyal\")),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Lee Hsien Kun\"), new Phone(\"88887777\"), getTagSet(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                new StatusTag(\"AVAILABLE\"))"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static ReadOnlyCustomerDatabase getSampleCustomerDatabase() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        CustomerDatabase sampleCd \u003d new CustomerDatabase();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Customer[] sampleCustomerArray \u003d getSampleCustomers();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (Customer sampleCustomer : sampleCustomerArray) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            sampleCd.addCustomer(sampleCustomer);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return sampleCd;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static ReadOnlyDeliverymenDatabase getSampleDeliverymenDatabase() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        DeliverymenDatabase sampleDd \u003d new DeliverymenDatabase();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (Deliveryman sampleDeliveryman : getSampleDeliverymen()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            sampleDd.addDeliveryman(sampleDeliveryman);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return sampleDd;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static ReadOnlyRestaurantDatabase getSampleRestaurantDatabase() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        RestaurantDatabase sampleRd \u003d new RestaurantDatabase();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (Restaurant sampleRestaurant : getSampleRestaurants()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            sampleRd.addRestaurant(sampleRestaurant);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return sampleRd;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static ReadOnlyOrderDatabase getSampleOrderDatabase() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        OrderDatabase sampleOb \u003d new OrderDatabase();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (Order sampleOrder : getSampleOrders()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            sampleOb.addOrder(sampleOrder);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return sampleOb;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static ObservableList\u003cFood\u003e getMenu(Food... foods) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ObservableList\u003cFood\u003e menu \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        menu.addAll(foods);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static ObservableList\u003cOrder\u003e getOrder(Order... order) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ObservableList\u003cOrder\u003e orders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        orders.addAll(Arrays.asList(order));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return orders;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 37,
      "ryantay232": 62,
      "MackyMaguire": 69,
      "SoilingRogue": 22,
      "charliechoong": 28
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 2,
      "MackyMaguire": 1,
      "-": 44,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "MackyMaguire": 1,
      "-": 42,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.storage.customer.CustomerDatabaseStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.storage.deliveryman.DeliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.storage.order.OrderDatabaseStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.restaurant.RestaurantDatabaseStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public interface Storage extends CustomerDatabaseStorage, DeliverymenDatabaseStorage,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        RestaurantDatabaseStorage, OrderDatabaseStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Path getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Path getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void saveRestaurantDatabase(ReadOnlyRestaurantDatabase addressBook) throws IOException;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Optional\u003cReadOnlyOrderDatabase\u003e readOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void saveOrderDatabase(ReadOnlyOrderDatabase orderBook) throws IOException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 3,
      "ryantay232": 9,
      "MackyMaguire": 15,
      "SoilingRogue": 6,
      "-": 17,
      "charliechoong": 13
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.storage.customer.CustomerDatabaseStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.storage.deliveryman.DeliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.storage.order.OrderDatabaseStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.restaurant.RestaurantDatabaseStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private CustomerDatabaseStorage customerDatabaseStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private DeliverymenDatabaseStorage deliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private RestaurantDatabaseStorage restaurantDatabaseStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private OrderDatabaseStorage orderDatabaseStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StorageManager(CustomerDatabaseStorage customerDatabaseStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                          DeliverymenDatabaseStorage deliverymenDatabaseStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                          RestaurantDatabaseStorage restaurantDatabaseStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                          OrderDatabaseStorage orderDatabaseStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customerDatabaseStorage \u003d customerDatabaseStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymenDatabaseStorage \u003d deliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurantDatabaseStorage \u003d restaurantDatabaseStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orderDatabaseStorage \u003d orderDatabaseStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CustomerDatabase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Path getCustomerDatabaseFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customerDatabaseStorage.getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return readCustomerDatabase(customerDatabaseStorage.getCustomerDatabaseFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customerDatabaseStorage.readCustomerDatabase(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        saveCustomerDatabase(customerDatabase, customerDatabaseStorage.getCustomerDatabaseFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerDatabaseStorage.saveCustomerDatabase(customerDatabase, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RestaurantDatabase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getRestaurantDatabaseFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabaseStorage.getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return readRestaurantDatabase(restaurantDatabaseStorage.getRestaurantDatabaseFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase(Path filePath)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabaseStorage.readRestaurantDatabase(filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        saveRestaurantDatabase(restaurantDatabase, restaurantDatabaseStorage.getRestaurantDatabaseFilePath());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase, Path filePath)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantDatabaseStorage.saveRestaurantDatabase(restaurantDatabase, filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d OrderBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderDatabaseStorage.getOrderBookFilePath();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyOrderDatabase\u003e readOrderBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return readOrderBook(orderDatabaseStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyOrderDatabase\u003e readOrderBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderDatabaseStorage.readOrderBook(filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveOrderDatabase(ReadOnlyOrderDatabase orderBook) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        saveOrderDatabase(orderBook, orderDatabaseStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveOrderDatabase(ReadOnlyOrderDatabase orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        orderDatabaseStorage.saveOrderDatabase(orderBook, filePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DeliverymenDatabase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Path getDeliverymenDatabaseFilePath() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabaseStorage.getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return readDeliverymenDatabase(deliverymenDatabaseStorage.getDeliverymenDatabaseFilePath());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase(Path filePath)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabaseStorage.readDeliverymenDatabase(filePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase) throws IOException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        saveDeliverymenDatabase(deliverymenDatabase, deliverymenDatabaseStorage.getDeliverymenDatabaseFilePath());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase, Path filePath)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenDatabaseStorage.saveDeliverymenDatabase(deliverymenDatabase, filePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "ryantay232": 38,
      "MackyMaguire": 41,
      "SoilingRogue": 26,
      "-": 37,
      "charliechoong": 39
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Represents a storage for {@link seedu.deliverymans.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Saves the given {@link seedu.deliverymans.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 4,
      "MackyMaguire": 1,
      "-": 30,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/customer/CustomerDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.storage.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Represents a storage for {@link seedu.deliverymans.model.database.CustomerDatabase}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public interface CustomerDatabaseStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Path getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns CustomerDatabase data as a {@link ReadOnlyCustomerDatabase}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @see #getCustomerDatabaseFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Saves the given {@link ReadOnlyCustomerDatabase} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param customerDatabase cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @see #saveCustomerDatabase(ReadOnlyCustomerDatabase)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 49
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/customer/JsonAdaptedCustomer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.storage.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Jackson-friendly version of {@link Customer}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class JsonAdaptedCustomer {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Customer\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final String userName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final List\u003cJsonAdaptedTotalTags\u003e totalTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final String noOfOrders;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonAdaptedCustomer(@JsonProperty(\"userName\") String userName,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                               @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                               @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                               @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                               @JsonProperty(\"noOfOrders\") String noOfOrders) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.noOfOrders \u003d noOfOrders;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts a given {@code Customer} into this class for Jackson use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonAdaptedCustomer(Customer source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        userName \u003d source.getUserName().fullName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        totalTags.addAll(source.getTotalTags().entrySet().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .map(JsonAdaptedTotalTags::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        noOfOrders \u003d String.valueOf(source.getNoOfOrders());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Customer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final List\u003cTag\u003e customerTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final List\u003cOrder\u003e customerOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Map\u003cTag, Integer\u003e customerTotalTags \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            customerTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (JsonAdaptedTotalTags totalTag : totalTags) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Map.Entry\u003cTag, Integer\u003e entry \u003d totalTag.toModelType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            customerTotalTags.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (userName \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!Name.isValidName(userName)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Name modelUserName \u003d new Name(userName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (noOfOrders \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final int modelNoOfOrders \u003d Integer.parseInt(noOfOrders);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(customerTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final ObservableList\u003cOrder\u003e modelOrders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        modelOrders.addAll(customerOrders);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final ObservableMap\u003cTag, Integer\u003e modelTotalTags \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        modelTotalTags.putAll(customerTotalTags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new Customer(modelUserName, modelName, modelPhone, modelAddress, modelTags, modelTotalTags,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                modelNoOfOrders);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 140
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/customer/JsonAdaptedTotalTags.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.storage.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.AbstractMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Jackson-friendly version of totalTags in {@link Customer}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class JsonAdaptedTotalTags {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Customer tag\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given {@code foodName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonAdaptedTotalTags(@JsonProperty(\"name\") String tag,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                                @JsonProperty(\"quantity\") String quantity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts a given {@code totalTag} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonAdaptedTotalTags(Map.Entry\u003cTag, Integer\u003e entry) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        tag \u003d entry.getKey().tagName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        quantity \u003d entry.getValue().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts this Jackson-friendly adapted order object into the model\u0027s {@code Order} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Map.Entry\u003cTag, Integer\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Tag modelTag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Integer.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new AbstractMap.SimpleEntry\u003cTag, Integer\u003e(modelTag, Integer.parseInt(quantity));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 63
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/customer/JsonCustomerDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.storage.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * A class to access CustomerDatabase data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class JsonCustomerDatabaseStorage implements CustomerDatabaseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCustomerDatabaseStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonCustomerDatabaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Path getCustomerDatabaseFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return readCustomerDatabase(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Similar to {@link #readCustomerDatabase()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Optional\u003cJsonSerializableCustomerDatabase\u003e jsonCustomerDatabase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                filePath, JsonSerializableCustomerDatabase.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!jsonCustomerDatabase.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return Optional.of(jsonCustomerDatabase.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        saveCustomerDatabase(customerDatabase, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Similar to {@link #saveCustomerDatabase(ReadOnlyCustomerDatabase)}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(customerDatabase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCustomerDatabase(customerDatabase), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 79
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/customer/JsonSerializableCustomerDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.storage.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * An Immutable CustomerDatabase that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "@JsonRootName(value \u003d \"customerdatabase\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class JsonSerializableCustomerDatabase {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"Customers list contains duplicate customer(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final List\u003cJsonAdaptedCustomer\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructs a {@code JsonSerializableCustomerDatabase} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonSerializableCustomerDatabase(@JsonProperty(\"customers\") List\u003cJsonAdaptedCustomer\u003e customers) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customers.addAll(customers);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts a given {@code ReadOnlyCustomerDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCustomerDatabase}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonSerializableCustomerDatabase(ReadOnlyCustomerDatabase source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customers.addAll(source.getCustomerList().stream().map(JsonAdaptedCustomer::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts this address book into the model\u0027s {@code CustomerDatabase} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerDatabase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        CustomerDatabase customerDatabase \u003d new CustomerDatabase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (JsonAdaptedCustomer jsonAdaptedCustomer : customers) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Customer customer \u003d jsonAdaptedCustomer.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (customerDatabase.hasCustomer(customer)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            customerDatabase.addCustomer(customer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customerDatabase;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 61
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/deliveryman/DeliverymenDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Represents a storage for {@link seedu.deliverymans.model.database.DeliverymenDatabase}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public interface DeliverymenDatabaseStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Path getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns DeliverymenDatabase data as a {@link ReadOnlyDeliverymenDatabase}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @see #getDeliverymenDatabaseFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase(Path filePath)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Saves the given {@link ReadOnlyDeliverymenDatabase} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param deliverymenDatabase cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @see #saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 46
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/deliveryman/JsonAdaptedDeliveryman.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatus.StatusTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatus.UniqueStatusList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Jackson-friendly version of {@link Deliveryman}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class JsonAdaptedDeliveryman {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deliveryman\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeliveryman} with the given deliveryman details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public JsonAdaptedDeliveryman(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                  @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                  @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Converts a given {@code Deliveryman} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public JsonAdaptedDeliveryman(Deliveryman source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        status \u003d source.getStatus().getDescription();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Converts this Jackson-friendly adapted deliveryman object into the model\u0027s {@code Deliveryman} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted deliveryman."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Deliveryman toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final List\u003cTag\u003e deliverymanTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymanTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!UniqueStatusList.isValidStatus(status)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final StatusTag modelStatus \u003d UniqueStatusList.getCorrespondingTag(status);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(deliverymanTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new Deliveryman(modelName, modelPhone, modelTags, modelStatus);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 100
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/deliveryman/JsonDeliverymenDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * A class to access Deliverymen database data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class JsonDeliverymenDatabaseStorage implements DeliverymenDatabaseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonDeliverymenDatabaseStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public JsonDeliverymenDatabaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Path getDeliverymenDatabaseFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return readDeliverymenDatabase(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Similar to {@link #readDeliverymenDatabase()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Optional\u003cJsonSerializableDeliverymenDatabase\u003e jsonDeliverymenDatabase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                filePath, JsonSerializableDeliverymenDatabase.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!jsonDeliverymenDatabase.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.of(jsonDeliverymenDatabase.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        saveDeliverymenDatabase(deliverymenDatabase, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase, Path filePath) throws"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(deliverymenDatabase);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableDeliverymenDatabase(deliverymenDatabase), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 77
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/deliveryman/JsonSerializableDeliverymenDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * An Immutable DeliverymenDatabase that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "@JsonRootName(value \u003d \"deliverymendatabase\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class JsonSerializableDeliverymenDatabase {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERYMEN \u003d \"Deliverymen list contains duplicate deliverymen.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final List\u003cJsonAdaptedDeliveryman\u003e deliverymen \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Constructs a {@code JsonSerializableDeliverymenDatabase} with the given deliverymen."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public JsonSerializableDeliverymenDatabase(@JsonProperty(\"deliverymen\") List\u003cJsonAdaptedDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymen.addAll(deliverymen);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Converts a given {@code ReadOnlyDeliverymenDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableDeliverymenDatabase}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public JsonSerializableDeliverymenDatabase(ReadOnlyDeliverymenDatabase source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymen.addAll(source.getDeliverymenList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .map(JsonAdaptedDeliveryman::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Converts this deliverymen book into the model\u0027s {@code DeliverymenDatabase} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymenDatabase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        DeliverymenDatabase deliverymenDatabase \u003d new DeliverymenDatabase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (JsonAdaptedDeliveryman jsonAdaptedDeliveryman : deliverymen) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            Deliveryman deliveryman \u003d jsonAdaptedDeliveryman.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (deliverymenDatabase.hasDeliveryman(deliveryman)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DELIVERYMEN);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenDatabase.addDeliveryman(deliveryman);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabase;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 64
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/order/JsonAdaptedFoodOrder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.storage.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.AbstractMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Jackson-friendly version of Food in {@link Order}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class JsonAdaptedFoodOrder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String foodName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given {@code foodName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public JsonAdaptedFoodOrder(@JsonProperty(\"name\") String foodName,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                                @JsonProperty(\"price\") String quantity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public JsonAdaptedFoodOrder(Map.Entry\u003cName, Integer\u003e entry) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        foodName \u003d entry.getKey().fullName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        quantity \u003d entry.getValue().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Converts this Jackson-friendly adapted order object into the model\u0027s {@code Order} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Map.Entry\u003cName, Integer\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (foodName \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!Name.isValidName(foodName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        final Name modelName \u003d new Name(foodName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Integer.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new AbstractMap.SimpleEntry\u003cName, Integer\u003e(modelName, Integer.parseInt(quantity));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 62
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/order/JsonAdaptedOrder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.storage.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Jackson-friendly version of {@link Order}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class JsonAdaptedOrder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // private final String order;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final String orderName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String customer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String restaurant;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String deliveryman;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String isCompleted;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final List\u003cJsonAdaptedFoodOrder\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Constructs a {@code JsonAdaptedOrder} with the given order details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonAdaptedOrder(@JsonProperty(\"orderName\") String orderName,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                            @JsonProperty(\"customer\") String customer,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                            @JsonProperty(\"restaurant\") String restaurant,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                            @JsonProperty(\"deliveryman\") String deliveryman,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                            @JsonProperty(\"foodList\") List\u003cJsonAdaptedFoodOrder\u003e foodList,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                            @JsonProperty(\"status\") String isCompleted) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.orderName \u003d orderName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.restaurant \u003d restaurant;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.deliveryman \u003d deliveryman;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (foodList !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.foodList.addAll(foodList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Converts a given {@code Order} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public JsonAdaptedOrder(Order source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        orderName \u003d source.getOrderName().fullName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customer \u003d source.getCustomer().fullName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        restaurant \u003d source.getRestaurant().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliveryman \u003d source.getDeliveryman().fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        isCompleted \u003d String.valueOf(source.isCompleted());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        foodList.addAll(source.getFoodList().entrySet().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .map(JsonAdaptedFoodOrder::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Converts this Jackson-friendly adapted order object into the model\u0027s {@code Order} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Order toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        final Map\u003cName, Integer\u003e modelFoodMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (JsonAdaptedFoodOrder food : foodList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            Map.Entry\u003cName, Integer\u003e entry \u003d food.toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            modelFoodMap.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (orderName \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!Name.isValidName(orderName)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Name modelOrderName \u003d new Name(orderName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!Name.isValidName(customer)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Name modelCustomer \u003d new Name(customer);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (restaurant \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!Name.isValidName(restaurant)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Name modelRestaurant \u003d new Name(restaurant);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (deliveryman \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!Name.isValidName(deliveryman)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Name modelDeliveryman \u003d new Name(deliveryman);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        final Boolean bool \u003d Boolean.valueOf(isCompleted);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (bool \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(\"Invalid boolean detected for completion status of Order object\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Order order \u003d new Order.OrderBuilder().setOrderName(modelOrderName).setCustomer(modelCustomer)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .setRestaurant(modelRestaurant).setDeliveryman(modelDeliveryman).setFood(modelFoodMap)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .setCompleted(bool).completeOrder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 15,
      "SoilingRogue": 104
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/order/JsonOrderDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.storage.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class JsonOrderDatabaseStorage implements OrderDatabaseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonOrderDatabaseStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public JsonOrderDatabaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyOrderDatabase\u003e readOrderBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return readOrderBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Similar to {@link #readOrderBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyOrderDatabase\u003e readOrderBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Optional\u003cJsonSerializableOrderDatabase\u003e jsonOrderBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                filePath, JsonSerializableOrderDatabase.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!jsonOrderBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.of(jsonOrderBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveOrderDatabase(ReadOnlyOrderDatabase orderBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        saveOrderDatabase(orderBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Similar to {@link #saveOrderDatabase(ReadOnlyOrderDatabase)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveOrderDatabase(ReadOnlyOrderDatabase orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(orderBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableOrderDatabase(orderBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ryantay232": 1,
      "MackyMaguire": 6,
      "SoilingRogue": 74
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/order/JsonSerializableOrderDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.storage.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.database.OrderDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "@JsonRootName(value \u003d \"orderdatabase\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class JsonSerializableOrderDatabase {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"Orders list contains duplicate order(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final List\u003cJsonAdaptedOrder\u003e orders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Constructs a {@code JsonSerializableOrderBook} with the given orders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public JsonSerializableOrderDatabase(@JsonProperty(\"orders\") List\u003cJsonAdaptedOrder\u003e orders) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orders.addAll(orders);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Converts a given {@code ReadOnlyOrderBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableOrderBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonSerializableOrderDatabase(ReadOnlyOrderDatabase source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orders.addAll(source.getOrderList().stream().map(JsonAdaptedOrder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Converts this aorder book into the model\u0027s {@code OrderBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public OrderDatabase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        OrderDatabase orderDatabase \u003d new OrderDatabase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (JsonAdaptedOrder jsonAdaptedOrder : orders) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            Order order \u003d jsonAdaptedOrder.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (orderDatabase.hasOrder(order)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            orderDatabase.addOrder(order);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderDatabase;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "SoilingRogue": 58
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/order/OrderDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.storage.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.database.OrderDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Represents a storage for {@link OrderDatabase}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public interface OrderDatabaseStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns OrderBook data as a {@link ReadOnlyOrderDatabase}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Optional\u003cReadOnlyOrderDatabase\u003e readOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @see #getOrderBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Optional\u003cReadOnlyOrderDatabase\u003e readOrderBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Saves the given {@link ReadOnlyOrderDatabase} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param orderBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void saveOrderDatabase(ReadOnlyOrderDatabase orderBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @see #saveOrderDatabase(ReadOnlyOrderDatabase)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void saveOrderDatabase(ReadOnlyOrderDatabase orderBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 8,
      "SoilingRogue": 38
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/JsonAdaptedFood.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given {@code foodName}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "                           @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                           @JsonProperty(\"quantity\") int quantity) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etlow"
        },
        "content": "        price \u003d source.getPrice().toPlainString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        quantity \u003d source.getQuantityOrdered();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etlow"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etlow"
        },
        "content": "        final Set\u003cTag\u003e foodTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etlow"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etlow"
        },
        "content": "            foodTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etlow"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"price\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etlow"
        },
        "content": "        final BigDecimal modelPrice \u003d ParserUtil.parsePrice(price);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!Food.isValidPrice(modelPrice)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new IllegalValueException(Food.PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!Food.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new IllegalValueException(Food.QUANTITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new Food(modelName, modelPrice, foodTags, quantity);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 80,
      "MackyMaguire": 7,
      "SoilingRogue": 6
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/JsonAdaptedRating.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Rating;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Jackson-friendly version of {@link Rating}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "class JsonAdaptedRating {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final int numberOfRatings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final String rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Constructs a {@code JsonAdaptedRating} with the given {@code rating}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonAdaptedRating(@JsonProperty(\"rating\") String rating,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                           @JsonProperty(\"num\") int numberOfRatings) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.numberOfRatings \u003d numberOfRatings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Converts a given {@code Rating} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonAdaptedRating(Rating source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        numberOfRatings \u003d source.numberOfRatings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        rating \u003d source.rating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Converts this Jackson-friendly adapted rating object into the model\u0027s {@code Rating} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Rating toModelType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new Rating(rating, numberOfRatings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 40
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/JsonAdaptedRestaurant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.Location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.LocationMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Rating;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Jackson-friendly version of {@link Restaurant}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class JsonAdaptedRestaurant {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Restaurant\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final JsonAdaptedRating rating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e menu \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Constructs a {@code JsonAdaptedRestaurant} with the given restaurant details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonAdaptedRestaurant(@JsonProperty(\"name\") String name, @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                             @JsonProperty(\"rating\") JsonAdaptedRating rating,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                             @JsonProperty(\"menu\") List\u003cJsonAdaptedFood\u003e menu,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                             @JsonProperty(\"quantity\") int quantity) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (menu !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.menu.addAll(menu);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Converts a given {@code Restaurant} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonAdaptedRestaurant(Restaurant source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        location \u003d source.getLocation().name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        rating \u003d new JsonAdaptedRating(source.getRating());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        menu.addAll(source.getMenu().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        quantity \u003d source.getQuantityOrdered();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Converts this Jackson-friendly adapted restaurant object into the model\u0027s {@code Restaurant} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted restaurant."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Restaurant toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final List\u003cTag\u003e restaurantTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final List\u003cFood\u003e restaurantMenu \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (JsonAdaptedFood food : menu) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantMenu.add(food.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!LocationMap.isValidLocation(location)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new IllegalValueException(LocationMap.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final Location modelLocation \u003d LocationMap.getLocation(location).get();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final Rating modelRating \u003d rating.toModelType();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(restaurantTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final ObservableList\u003cFood\u003e modelMenu \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        modelMenu.addAll(restaurantMenu);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new Restaurant(modelName, modelLocation, modelRating, modelTags, modelMenu, quantity);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 118
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/JsonRestaurantDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * A class to access RestaurantDatabase data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class JsonRestaurantDatabaseStorage implements RestaurantDatabaseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRestaurantDatabaseStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonRestaurantDatabaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getRestaurantDatabaseFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return readRestaurantDatabase(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Similar to {@link #readRestaurantDatabase()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Optional\u003cJsonSerializableRestaurantDatabase\u003e jsonRestaurantDatabase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                filePath, JsonSerializableRestaurantDatabase.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!jsonRestaurantDatabase.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return Optional.of(jsonRestaurantDatabase.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        saveRestaurantDatabase(restaurantDatabase, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Similar to {@link #saveRestaurantDatabase(ReadOnlyRestaurantDatabase)}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase, Path filePath)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurantDatabase);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRestaurantDatabase(restaurantDatabase), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 79
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/JsonSerializableRestaurantDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * An Immutable RestaurantDatabase that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "@JsonRootName(value \u003d \"restaurantdatabase\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class JsonSerializableRestaurantDatabase {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESTAURANT \u003d \"Restaurants list contains duplicate restaurant(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final List\u003cJsonAdaptedRestaurant\u003e restaurants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Constructs a {@code JsonSerializableRestaurantDatabase} with the given restaurants."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonSerializableRestaurantDatabase(@JsonProperty(\"restaurants\") List\u003cJsonAdaptedRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurants.addAll(restaurants);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Converts a given {@code ReadOnlyRestaurantDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRestaurantDatabase}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonSerializableRestaurantDatabase(ReadOnlyRestaurantDatabase source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurants.addAll(source.getRestaurantList()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .map(JsonAdaptedRestaurant::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Converts this address book into the model\u0027s {@code RestaurantDatabase} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public RestaurantDatabase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        RestaurantDatabase restaurantDatabase \u003d new RestaurantDatabase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (JsonAdaptedRestaurant jsonAdaptedRestaurant : restaurants) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Restaurant restaurant \u003d jsonAdaptedRestaurant.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (restaurantDatabase.hasRestaurant(restaurant)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RESTAURANT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantDatabase.addRestaurant(restaurant);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabase;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 1,
      "MackyMaguire": 61
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/RestaurantDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a storage for {@link seedu.deliverymans.model.database.RestaurantDatabase}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public interface RestaurantDatabaseStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns RestaurantDatabase data as a {@link ReadOnlyRestaurantDatabase}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @see #getRestaurantDatabaseFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase(Path filePath)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Saves the given {@link ReadOnlyRestaurantDatabase} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param restaurantDatabase cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @see #saveRestaurantDatabase(ReadOnlyRestaurantDatabase)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 46
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/AutocompletionTextField.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.event.EventType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * @@author soilingrogue-reused"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Reused from https://stackoverflow.com/questions/36861056/javafx-textfield-auto-suggestions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class AutocompletionTextField extends TextField {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //Local variables"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //entries to autocomplete"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final SortedSet\u003cString\u003e entries;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //popup GUI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private ContextMenu entriesPopup;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public AutocompletionTextField() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.entries \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.entriesPopup \u003d new ContextMenu();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public ContextMenu getEntriesPopup() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return entriesPopup;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void hideEntriesPopup() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        entriesPopup.hide();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        entriesPopup.show(AutocompletionTextField.this, Side.BOTTOM, 0, 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Populate the entry set with the given search results. Display is limited to 10 entries, for performance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param searchResult The set of matching strings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void populatePopup(List\u003cString\u003e searchResult, String searchRequest) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        //List of \"suggestions\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        List\u003cCustomMenuItem\u003e menuItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        //List size - 10 or founded suggestions count"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        int maxEntries \u003d 10;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        int count \u003d Math.min(searchResult.size(), maxEntries);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        //Build list as set of labels"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            final String result \u003d searchResult.get(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            //label with graphic (text flow) to highlight founded subtext in suggestions"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            Label entryLabel \u003d new Label();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            entryLabel.setGraphic(buildTextFlow(result, searchRequest));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            entryLabel.setPrefHeight(10); //not sure why it\u0027s changed with \"graphic\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            CustomMenuItem item \u003d new CustomMenuItem(entryLabel, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            menuItems.add(item);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            //if any suggestion is select set it into text and close popup"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            item.setOnAction(actionEvent -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                setText(getText().substring(0, getText().lastIndexOf(searchRequest)) + result);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                positionCaret(getText().length());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                fireEvent(new Event(EventType.ROOT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        //\"Refresh\" context menu"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        entriesPopup.getItems().clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        entriesPopup.getItems().addAll(menuItems);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Get the existing set of autocomplete entries."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @return The existing autocomplete entries."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    SortedSet\u003cString\u003e getEntries() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Build TextFlow with selected text. Return \"case\" dependent."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param text   - string with text"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param filter - string to select in text"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @return - TextFlow"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static TextFlow buildTextFlow(String text, String filter) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (filter.equals(\"\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            Text toReturn \u003d new Text(text);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            toReturn.setFill(Color.BLACK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            toReturn.setFont(Font.font(\"Helvetica\", FontWeight.BOLD, 12));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new TextFlow(toReturn);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        //System.out.println(filter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        int filterIndex \u003d text.toLowerCase().indexOf(filter.toLowerCase());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Text textBefore \u003d new Text(text.substring(0, filterIndex));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Text textAfter \u003d new Text(text.substring(filterIndex + filter.length()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        //instead of \"filter\" to keep all \"case sensitive\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Text textFilter \u003d new Text(text.substring(filterIndex, filterIndex + filter.length()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        textFilter.setFill(Color.ORANGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        textFilter.setFont(Font.font(\"Helvetica\", FontWeight.BOLD, 12));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new TextFlow(textBefore, textFilter, textAfter);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 118,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private AutocompletionTextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        setListener();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author soilingrogue-reused"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //Reused from https://stackoverflow.com/questions/36861056/javafx-textfield-auto-suggestions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Setting listener for CommandBox text field."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private void setListener() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        //Add \"suggestions\" by changing text"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        commandTextField.textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            String enteredText \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            //always hide suggestion if nothing has been entered"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            // (only \"spacebars\" are disallowed in TextFieldWithLengthLimit)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (enteredText \u003d\u003d null || enteredText.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                commandTextField.hideEntriesPopup();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                //Add autocomplete results to commandTextField entries"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                LinkedList\u003cString\u003e temp \u003d logic.getAutoCompleteResults(enteredText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                commandTextField.getEntries().clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                commandTextField.getEntries().addAll(temp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                int slash \u003d enteredText.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                if (slash !\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    enteredText \u003d enteredText.substring(slash + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                List\u003cString\u003e filteredEntries \u003d getFilteredEntries(enteredText);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                //some suggestions are found"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                if (!filteredEntries.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    //build popup - list of \"CustomMenuItem\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    commandTextField.populatePopup(filteredEntries, enteredText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    if (!commandTextField.getEntriesPopup().isShowing()) { //optional"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                        //position of popup"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                        commandTextField.show();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    //no suggestions -\u003e hide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    commandTextField.hideEntriesPopup();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // Hide always by focus-in (optional) and out"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        commandTextField.focusedProperty().addListener((observableValue, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            commandTextField.hideEntriesPopup();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * tofill."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private List\u003cString\u003e getFilteredEntries(String enteredText) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return commandTextField.getEntries().stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .filter(e -\u003e e.toLowerCase().contains(enteredText.toLowerCase()))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "etlow"
        },
        "content": "         * @see seedu.deliverymans.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "etlow"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 5,
      "ryantay232": 2,
      "MackyMaguire": 1,
      "SoilingRogue": 67,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/CustomerCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * An UI component that displays information of a {@code Customer}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static final String FXML \u003d \"CustomerListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public final Customer customer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Label userName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Label orderSize;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerCard(Customer customer, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        userName.setText(customer.getUserName().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        name.setText(customer.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        phone.setText(customer.getPhone().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        address.setText(customer.getAddress().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        orderSize.setText(\"No. of Orders: \" + String.valueOf(customer.getNoOfOrders()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customer.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!(other instanceof CustomerCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        CustomerCard card \u003d (CustomerCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 customer.equals(card.customer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 69,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/CustomerListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Panel containing the list of customers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static final String FXML \u003d \"CustomerListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CustomerListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private ListView\u003cCustomer\u003e customerListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerListPanel(ObservableList\u003cCustomer\u003e customerList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerListView.setItems(customerList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerListView.setCellFactory(listView -\u003e new CustomerListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code CustomerCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    class CustomerListViewCell extends ListCell\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        protected void updateItem(Customer customer, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            super.updateItem(customer, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (empty || customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                setGraphic(new CustomerCard(customer, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 42,
      "charliechoong": 4
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/DeliverymanCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * An UI component that displays information of a {@code Deliveryman}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String FXML \u003d \"DeliverymanListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public final Deliveryman deliveryman;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private TextFlow statusTag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Text statusText;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanCard(Deliveryman deliveryman, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliveryman \u003d deliveryman;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        name.setText(deliveryman.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        phone.setText(deliveryman.getPhone().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliveryman.getTags().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        String strStatus \u003d deliveryman.getStatus().getDescription();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        handleStatusTag(strStatus);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Edits the status tag according to the corresponding status as input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void handleStatusTag(String strStatus) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (strStatus.equals(\"AVAILABLE\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            statusText \u003d new Text(\"AVAILABLE\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            statusText.setFill(Color.GREEN);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } else if (strStatus.equals(\"UNAVAILABLE\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            statusText \u003d new Text(\"UNAVAILABLE\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            statusText.setFill(Color.RED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            statusText \u003d new Text(\"DELIVERING\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            statusText.setFill(Color.YELLOW);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusTag.getChildren().add(statusText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!(other instanceof DeliverymanCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        DeliverymanCard card \u003d (DeliverymanCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 deliveryman.equals(card.deliveryman);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 87
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/DeliverymanListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Panel containing the list of deliverymen."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String FXML \u003d \"DeliverymanListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeliverymanListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private ListView\u003cDeliveryman\u003e deliverymanListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanListPanel(ObservableList\u003cDeliveryman\u003e deliverymanList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymanListView.setItems(deliverymanList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymanListView.setCellFactory(listView -\u003e new DeliverymanListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Deliveryman} using a {@code DeliverymanCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    class DeliverymanListViewCell extends ListCell\u003cDeliveryman\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        protected void updateItem(Deliveryman deliveryman, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            super.updateItem(deliveryman, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (empty || deliveryman \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                setGraphic(new DeliverymanCard(deliveryman, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 45
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/DeliverymenStatusListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Panel containing the list of deliverymen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymenStatusListPanel extends UiPart\u003cRegion\u003e implements Initializable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String FXML \u003d \"DeliverymenStatusListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeliverymanListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Button availableButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Button unavailableButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Button deliveringButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label statusLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private ObservableList\u003cDeliveryman\u003e availableList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private ObservableList\u003cDeliveryman\u003e unavailableList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private ObservableList\u003cDeliveryman\u003e deliveringList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private ListView\u003cDeliveryman\u003e deliverymenStatusListView;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymenStatusListPanel(ObservableList\u003cDeliveryman\u003e availableList,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                         ObservableList\u003cDeliveryman\u003e unavailableList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                         ObservableList\u003cDeliveryman\u003e deliveringList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.availableList \u003d availableList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.unavailableList \u003d unavailableList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliveringList \u003d deliveringList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenStatusListView.setItems(availableList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenStatusListView.setCellFactory(listView -\u003e new DeliverymenStatusListViewCell());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Deliveryman} using a {@code DeliverymanCard}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    class DeliverymenStatusListViewCell extends ListCell\u003cDeliveryman\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        protected void updateItem(Deliveryman deliveryman, boolean empty) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            super.updateItem(deliveryman, empty);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (empty || deliveryman \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                setGraphic(new DeliverymanCard(deliveryman, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Displays the corresponding status lists according to the button that is clicked."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void initialize(URL url, ResourceBundle resourceBundle) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        availableButton.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            statusLabel.setText(\"AVAILABLE DELIVERYMEN\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenStatusListView.setItems(availableList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenStatusListView.setCellFactory(listView -\u003e new DeliverymenStatusListViewCell());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        unavailableButton.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            statusLabel.setText(\"UNAVAILABLE DELIVERYMEN\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenStatusListView.setItems(unavailableList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenStatusListView.setCellFactory(listView -\u003e new DeliverymenStatusListViewCell());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliveringButton.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            statusLabel.setText(\"DELIVERING DELIVERYMEN\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenStatusListView.setItems(deliveringList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenStatusListView.setCellFactory(listView -\u003e new DeliverymenStatusListViewCell());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 90
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/DeliverymenStatusStatisticsPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatistics.StatisticsRecordCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Panel containing the statistics of deliverymen statuses, using a pie chart to display data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymenStatusStatisticsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String FXML \u003d \"DeliverymenStatusStatisticsPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeliverymenStatusStatisticsPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label totalDeliverymenLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label availableDeliverymenLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label unavailableDeliverymenLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label deliveringDeliverymenLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private PieChart statusStatisticsPieChart;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private TextArea adviceDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label caption;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private StatisticsRecordCard recordCard;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // Data fields for analysis"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e pieChartData;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private int availableListSize;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private int unavailableListSize;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private int deliveringListSize;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private int totalListSize;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Panel containing the statistics of the statuses of deliverymen."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymenStatusStatisticsPanel(StatisticsRecordCard recordCard) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.recordCard \u003d recordCard;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        availableListSize \u003d (Integer) recordCard.retrieveRecordCardField(1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        unavailableListSize \u003d (Integer) recordCard.retrieveRecordCardField(2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliveringListSize \u003d (Integer) recordCard.retrieveRecordCardField(3);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        totalListSize \u003d (Integer) recordCard.retrieveRecordCardField(4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        pieChartData \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                        new PieChart.Data(\"Available\", availableListSize),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                        new PieChart.Data(\"Unavailable\", unavailableListSize),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                        new PieChart.Data(\"Delivering\", deliveringListSize));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        initialiseLabels();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        initialiseTextArea(pieChartData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Set up the texts of all the labels."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private void initialiseLabels() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        totalDeliverymenLabel.setText(\"TOTAL DELIVERYMEN:  \" + totalListSize);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        availableDeliverymenLabel.setText(\"AVAILABLE      :  \" + availableListSize + \"  \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        unavailableDeliverymenLabel.setText(\"UNAVAILABLE :  \" + unavailableListSize + \"  \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliveringDeliverymenLabel.setText(\"DELIVERING    :  \" + deliveringListSize + \"   \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        fillPieChart();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Set up the text area and the inside text."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private void initialiseTextArea(ObservableList\u003cPieChart.Data\u003e pieChartData) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        adviceDisplay.appendText(recordCard.adviceMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        resultDisplay.appendText(recordCard.resultMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        resultDisplay.appendText(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        resultDisplay.appendText(\"AVAILABLE:  \" + String.valueOf(pieChartData.get(0).getPieValue()) + \"%\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        resultDisplay.appendText(\"UNAVAILABLE:  \" + String.valueOf(pieChartData.get(1).getPieValue()) + \"%\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        resultDisplay.appendText(\"DELIVERING:  \" + String.valueOf(pieChartData.get(2).getPieValue()) + \"%\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        resultDisplay.appendText(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Fills up the pie chart with data."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private void fillPieChart() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusStatisticsPieChart.setTitle(\"STATUS PIE CHART\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusStatisticsPieChart.setData(pieChartData);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private double[] calculatePieValues(PieChart.Data data) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        double[] pieValues \u003d new double[3];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (int i \u003d 0; i \u003c pieValues.length; i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            pieValues[i] \u003d data.getPieValue();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return pieValues;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 117
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/FoodCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final Food food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "        price.setText(food.getDisplayPrice());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        quantity.setText(\"Quantity Ordered: \" + food.getQuantityOrdered());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "        food.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .forEach(tag -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    Label label \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    if (tag.tagName.equals(\"Popular\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        label.setStyle(\"-fx-background-color: #FF0000;\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    tags.getChildren().add(label);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 67,
      "MackyMaguire": 10
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/FoodListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Panel containing the list of food."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private static final String FXML \u003d \"FoodListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private ListView\u003cFood\u003e foodListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public FoodListPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "        foodListView.setItems(foodList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "        foodListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Food} using a {@code FoodCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "    class FoodListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "                setGraphic(new FoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 46
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-t12-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 99,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private CustomerListPanel customerListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private DeliverymanListPanel deliverymanListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private DeliverymenStatusListPanel deliverymenStatusListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private DeliverymenStatusStatisticsPanel deliverymenStatusStatisticsPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private RestaurantListPanel restaurantListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private OrderListPanel orderListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private FoodListPanel foodListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private StatisticsDisplay statisticsDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private StackPane editingRestaurantPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private StackPane statisticsPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private VBox personList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        orderListPanel \u003d new OrderListPanel(logic.getFilteredOrderList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        listPanelPlaceholder.getChildren().add(orderListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getOrderBookFilePath()); // to be edited"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenStatusListPanel \u003d new DeliverymenStatusListPanel(logic.getAvailableDeliverymenList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                logic.getUnavailableDeliverymenList(), logic.getDeliveringDeliverymenList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Changes context of the system depending on {@code context}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private void changeContext(Context context) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingRestaurantPlaceholder.setPrefHeight(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingRestaurantPlaceholder.setMinHeight(0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        personList.setMinWidth(340);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (statisticsPlaceholder.getChildren().size() \u003e 0) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            statisticsPlaceholder.getChildren().remove(0);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        switch (context) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case CUSTOMER:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            customerListPanel \u003d new CustomerListPanel(logic.getFilteredCustomerList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            listPanelPlaceholder.getChildren().add(customerListPanel.getRoot());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DELIVERYMEN:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymanListPanel \u003d new DeliverymanListPanel(logic.getFilteredDeliverymenList());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            listPanelPlaceholder.getChildren().add(deliverymanListPanel.getRoot());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case RESTAURANT:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantListPanel \u003d new RestaurantListPanel(logic.getFilteredRestaurantList());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            listPanelPlaceholder.getChildren().add(restaurantListPanel.getRoot());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case EDITING:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Restaurant editing \u003d logic.getEditingRestaurantList().get(0);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            editingRestaurantPlaceholder.setPrefHeight(145.0);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            editingRestaurantPlaceholder.setMinHeight(145.0);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantListPanel \u003d new RestaurantListPanel(logic.getEditingRestaurantList());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            editingRestaurantPlaceholder.getChildren().add(restaurantListPanel.getRoot());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "etlow"
        },
        "content": "            foodListPanel \u003d new FoodListPanel(FXCollections.observableArrayList(editing.getMenu()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            listPanelPlaceholder.getChildren().add(foodListPanel.getRoot());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            orderListPanel \u003d new OrderListPanel(editing.getOrders(logic));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            statisticsPlaceholder.getChildren().add(orderListPanel.getRoot());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            orderListPanel \u003d new OrderListPanel(logic.getFilteredOrderList());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            listPanelPlaceholder.getChildren().add(orderListPanel.getRoot());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Changes the Ui to display depending the {@code Class} commandName."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private void changeUi(Class commandName) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (statisticsPlaceholder.getChildren().size() \u003e 0) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            statisticsPlaceholder.getChildren().remove(0);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        personList.setMinWidth(340);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        System.out.println(commandName.getSimpleName());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        switch(commandName.getSimpleName()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case \"CustomerHistoryCommand\":"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            orderListPanel \u003d new OrderListPanel(logic.getCustomerOrders());;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            statisticsPlaceholder.getChildren().add(orderListPanel.getRoot());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"DeliverymanStatusSwitchCommand\":"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            deliverymanListPanel \u003d new DeliverymanListPanel(logic.getFilteredDeliverymenList());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            listPanelPlaceholder.getChildren().add(deliverymanListPanel.getRoot());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            statisticsPlaceholder.getChildren().add(deliverymenStatusListPanel.getRoot());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"DeliverymanGetStatisticsCommand\":"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            personList.setMinWidth(1200);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenStatusStatisticsPanel \u003d new DeliverymenStatusStatisticsPanel(logic.getDeliverymenStatusStats());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            statisticsPlaceholder.getChildren().add(deliverymenStatusStatisticsPanel.getRoot());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"DeliverymanListStatusCommand\":"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            statisticsPlaceholder.getChildren().add(deliverymenStatusListPanel.getRoot());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            personList.setMinWidth(650);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @see seedu.deliverymans.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Class commandName \u003d commandResult.getCommandName();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Context nextContext \u003d commandResult.getContext();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (commandName !\u003d null) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                changeUi(commandName);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            } else if (nextContext !\u003d null) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                LogicManager.setContext(nextContext);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                changeContext(LogicManager.getContext());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                changeContext(LogicManager.getContext());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static Context getContext() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return LogicManager.getContext();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 5,
      "ryantay232": 53,
      "MackyMaguire": 41,
      "SoilingRogue": 6,
      "-": 172,
      "charliechoong": 33
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/OrderCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class OrderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static final String FXML \u003d \"OrderListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public final Order order;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Label orderName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Label customer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Label restaurant;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Label deliveryStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Label deliveryman;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Label food;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public OrderCard(Order order, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        orderName.setText(order.getOrderName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customer.setText(\"Customer: \\t\" + order.getCustomer().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        restaurant.setText(\"Restaurant: \\t\" + order.getRestaurant().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliveryman.setText(\"Deliveryman: \\t\" + order.getDeliveryman().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliveryStatus.setText(\"Delivery completed: \" + order.isCompleted());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Map\u003cName, Integer\u003e foodList \u003d order.getFoodList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (Map.Entry\u003cName, Integer\u003e entry : foodList.entrySet()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            sb.append(String.format(\"Food: %s\\tQuantity: %d\", entry.getKey().fullName, entry.getValue())).append(\"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        food.setText(sb.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!(other instanceof OrderCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        OrderCard card \u003d (OrderCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return id.getText().equals(card.id.getText());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 5,
      "SoilingRogue": 78
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/OrderListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class OrderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static final String FXML \u003d \"OrderListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OrderListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private ListView\u003cOrder\u003e orderListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public OrderListPanel(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        orderListView.setItems(orderList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        orderListView.setCellFactory(listView -\u003e new OrderListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    class OrderListViewCell extends ListCell\u003cOrder\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        protected void updateItem(Order order, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            super.updateItem(order, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (empty || order \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                setGraphic(new OrderCard(order, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 5,
      "SoilingRogue": 40,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/RestaurantCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * An UI component that displays information of a {@code Restaurant}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class RestaurantCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final String FXML \u003d \"RestaurantListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public final Restaurant restaurant;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Label loc;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Label rating;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public RestaurantCard(Restaurant restaurant, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurant \u003d restaurant;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        name.setText(restaurant.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        loc.setText(\"Location: \" + restaurant.getLocation().name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        rating.setText(\"Rating: \" + restaurant.getRating().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        quantity.setText(\"Quantity Ordered: \" + restaurant.getQuantityOrdered());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurant.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!(other instanceof RestaurantCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        RestaurantCard card \u003d (RestaurantCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 restaurant.equals(card.restaurant);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 21,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/RestaurantListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Panel containing the list of restaurants."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class RestaurantListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final String FXML \u003d \"RestaurantListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RestaurantListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private ListView\u003cRestaurant\u003e restaurantListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public RestaurantListPanel(ObservableList\u003cRestaurant\u003e restaurantList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantListView.setItems(restaurantList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantListView.setCellFactory(listView -\u003e new RestaurantListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Restaurant} using a {@code RestaurantCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    class RestaurantListViewCell extends ListCell\u003cRestaurant\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        protected void updateItem(Restaurant restaurant, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            super.updateItem(restaurant, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (empty || restaurant \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                setGraphic(new RestaurantCard(restaurant, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 47
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/StatisticsDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * A ui for the status bar that displays statistics."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class StatisticsDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final String FXML \u003d \"StatisticsDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private TextArea statisticsDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public StatisticsDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        statisticsDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setColor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        statisticsDisplay.setStyle(\"-fx-background-color: #963\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 31
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 1,
      "MackyMaguire": 2,
      "-": 80,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "\u003c?import seedu.deliverymans.ui.AutocompletionTextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    \u003cAutocompletionTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CustomerListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003cLabel fx:id\u003d\"userName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$name\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cLabel fx:id\u003d\"orderSize\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orderSize\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 37
    }
  },
  {
    "path": "src/main/resources/view/CustomerListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    \u003cListView fx:id\u003d\"customerListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "#statusTag {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "#statusLabel {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-text-fill: olive;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-font-size: 25;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "#totalDeliverymenLabel {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-font-size: 25;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-border-style: solid;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-background-color: orange ;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "#availableDeliverymenLabel {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-border-style: dashed;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "#unavailableDeliverymenLabel {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    -fx-border-style: dashed;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-text-fill: red;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "#deliveringDeliverymenLabel {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-border-style: dashed;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-text-fill: yellow;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ".default-color0.chart-pie { -fx-pie-color: green; }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ".default-color1.chart-pie { -fx-pie-color: red; }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ".default-color2.chart-pie { -fx-pie-color: yellow; }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ".chart-pie-label-line {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-stroke: #8b4513;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-fill: #8b4513;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-fill: #8b4513;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-background-color:  #fafad2;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    -fx-stroke: #daa520;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "#deliveryStatus {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 4,
      "-": 352,
      "charliechoong": 60
    }
  },
  {
    "path": "src/main/resources/view/DeliverymanListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cTextFlow fx:id\u003d\"statusTag\" style\u003d\"-fx-font-weight: bold\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003cText fx:id\u003d\"statusText\" styleClass\u003d\"menu-bar\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 39
    }
  },
  {
    "path": "src/main/resources/view/DeliverymanListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003cListView fx:id\u003d\"deliverymanListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 8
    }
  },
  {
    "path": "src/main/resources/view/DeliverymenStatusListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003cLabel fx:id\u003d\"statusLabel\" text\u003d\"AVAILABLE DELIVERYMEN\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003cListView fx:id\u003d\"deliverymenStatusListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003cButtonBar fx:id\u003d\"buttonPlaceholder\" styleClass\u003d\"context-menu\" \u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cbuttons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003cButton fx:id\u003d\"availableButton\" text\u003d\"AVAILABLE\" ButtonBar.buttonData\u003d\"LEFT\" style\u003d\"-fx-font: 22 cambria; \" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003cButton fx:id\u003d\"unavailableButton\" text\u003d\"UNAVAILABLE\" ButtonBar.buttonData\u003d\"LEFT\" style\u003d\"-fx-font: 22 cambria; \"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003cButton fx:id\u003d\"deliveringButton\" text\u003d\"DELIVERING\" ButtonBar.buttonData\u003d\"LEFT\" style\u003d\"-fx-font: 22 cambria; \"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003c/buttons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 20
    }
  },
  {
    "path": "src/main/resources/view/DeliverymenStatusStatisticsPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003cLabel fx:id\u003d\"totalDeliverymenLabel\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003cLabel fx:id\u003d\"availableDeliverymenLabel\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003cLabel fx:id\u003d\"unavailableDeliverymenLabel\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003cLabel fx:id\u003d\"deliveringDeliverymenLabel\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003cHBox \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003cPieChart fx:id\u003d\"statusStatisticsPieChart\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003cLabel fx:id\u003d\"caption\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003cTextArea fx:id\u003d\"resultDisplay\" style\u003d\"-fx-font-family: Consolas; -fx-highlight-fill: #00ff00;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        -fx-highlight-text-fill: #000000; -fx-text-fill: #00ff00; -fx-background-color:#000000 \" editable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003cTextArea fx:id\u003d\"adviceDisplay\" style\u003d\"-fx-font-family: Consolas; -fx-text-fill: red;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        -fx-highlight-fill: #00ff00; -fx-background-color: #000000; -fx-highlight-text-fill: #000000;\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        wrapText\u003d\"true\" editable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 21
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"100\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t\t\u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "etlow": 33,
      "MackyMaguire": 2
    }
  },
  {
    "path": "src/main/resources/view/FoodListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "  \u003cListView fx:id\u003d\"foodListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "etlow": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         title\u003d\"DeliveryMANS\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t\u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t  \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t\u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"editingRestaurantPlaceholder\" minHeight\u003d\"0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t  \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"0\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t\u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"1\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t  \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statisticsPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 1,
      "MackyMaguire": 16,
      "-": 56,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/resources/view/OrderListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003cLabel fx:id\u003d\"orderName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cLabel fx:id\u003d\"customer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$customer\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cLabel fx:id\u003d\"restaurant\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$restaurant\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cLabel fx:id\u003d\"deliveryman\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deliveryman\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cLabel fx:id\u003d\"deliveryStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deliveryStatus\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cLabel fx:id\u003d\"food\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$food\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 39
    }
  },
  {
    "path": "src/main/resources/view/OrderListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    \u003cListView fx:id\u003d\"orderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 8
    }
  },
  {
    "path": "src/main/resources/view/RestaurantListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"125\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cLabel fx:id\u003d\"loc\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$loc\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rating\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t\t\u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 36
    }
  },
  {
    "path": "src/main/resources/view/RestaurantListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "  \u003cListView fx:id\u003d\"restaurantListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003cStackPane styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatisticsDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003cStackPane styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "  \u003cTextArea fx:id\u003d\"statisticsDisplay\" editable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 8
    }
  },
  {
    "path": "src/test/java/seedu/deliverymans/logic/commands/universal/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.database.OrderDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private static final String REDONE_COMMAND_TEXT \u003d \"add someone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Model model \u003d new ModelManager(new CustomerDatabase(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            new DeliverymenDatabase(), new RestaurantDatabase(), new OrderDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void execute_hasUndo_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String expectedMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, REDONE_COMMAND_TEXT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Model updatedModel \u003d new ModelManager(new CustomerDatabase(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                new DeliverymenDatabase(), new RestaurantDatabase(), new OrderDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedModel.notifyChange(REDONE_COMMAND_TEXT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedModel.undo();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), updatedModel, expectedMessage, model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void execute_noUndo_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "        model.notifyChange(REDONE_COMMAND_TEXT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_NOTHING_TO_REDO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "etlow": 39,
      "SoilingRogue": 3,
      "charliechoong": 6
    }
  },
  {
    "path": "src/test/java/seedu/deliverymans/logic/commands/universal/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.database.OrderDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private static final String UNDONE_COMMAND_TEXT \u003d \"delete 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CustomerDatabase(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            new DeliverymenDatabase(), new RestaurantDatabase(), new OrderDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void execute_hasUndo_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String expectedMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, UNDONE_COMMAND_TEXT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Model updatedModel \u003d new ModelManager(getTypicalAddressBook(), new CustomerDatabase(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                new DeliverymenDatabase(), new RestaurantDatabase(), new OrderDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedModel.notifyChange(UNDONE_COMMAND_TEXT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), updatedModel, expectedMessage, model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void execute_noUndo_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_NOTHING_TO_UNDO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "etlow": 38,
      "SoilingRogue": 3,
      "charliechoong": 2
    }
  },
  {
    "path": "src/test/java/seedu/deliverymans/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/deliverymans/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "-": 10
    }
  }
]
