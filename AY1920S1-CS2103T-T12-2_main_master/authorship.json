[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d DeliveryMANS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T12-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-T12-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d About"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "*DeliveryMANS* is an acronym for Delivery MAnagement System. This system is for administrators in food delivery services to manage the restaurants, customers and deliverymen using their food delivery services."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d All-in-one UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "The UI allows the administrator to have a good overview of all the information needed for tasks to be done efficiently."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d ChefHat"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Administrators are able to set recommendations on the restaurant\u0027s menu using the ChefHat system."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d Deliverymen tracking"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Administrators will be able to track the deliverymen on deliveries at a glance. This allows the administrator to manage them better and efficiently queue the orders to each deliverymen."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d Customer reward tiers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Customers have reward tiers depending on how much they order from the food service. Having higher tiers allows the administrator to assign for food to be delivered to them faster than normal."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d Customer recommendations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "Each food item on each restaurant\u0027s menu are tagged with a category. Depending on how many times the customer ordered that item, recommendations will be able to be assigned to the customer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003d\u003d\u003d CLI based input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "The application is a combination of GUI outputs and CLI inputs to allow the administrator to input commands efficiently just using the keyboard."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "* Original source of the code i.e. AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 30,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "mainClassName \u003d \u0027seedu.deliverymans.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u0027site-name\u0027: \u0027DeliveryMANs\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "etlow": 1,
      "-": 153,
      "charliechoong": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliveryMANs was developed by the https://se-edu.github.io/docs/Team.html[AY2019/20 S1 CS2103-T12-02] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d Choong Jin Yao"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "image::charliechoong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{empty}[https://github.com/charliechoong[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Responsibilities: Code Quality, Documentation, Integration, Testing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d Low Ee Ter"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "image::https://comp.nus.edu.sg/~lowet/n20191002.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "image:etlow.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{empty}[https://github.com/etlow[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Responsibilities: Code Quality, Documentation, Integration, Testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d Ryan Tay"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "image::ryantay232.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{empty}[http://github.com/ryantay232[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Responsibilities: Code Quality, Documentation, Integration, Testing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d Stanley Yuan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "image::soilingrogue.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{empty}[https://github.com/SoilingRogue[github]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Responsibilities: Code Quality, Documentation, Integration, Testing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d\u003d\u003d Zhou Tianyu"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "image::mackymaguire.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "{empty}[http://github.com/MackyMaguire[github]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Responsibilities: Code Quality, Documentation, Integration, Testing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "ryantay232": 1,
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 33,
      "charliechoong": 18
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d Contact Us :grinning:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T12-2/main/issues[issue tracker] if you"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "   noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* *Email us* : You can also reach any of us through our emails as stated below : +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** *Choong Jin Yao* : _e0202817@u.nus.edu_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** *Low Ee Ter* :     _e0310486@u.nus.edu_"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** *Ryan Tay* :      _e0310823@u.nus.edu_"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** *Stanley Yuan*:   _e0309350@u.nus.edu_"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "** *Zhou Tianyu* :   _e0323028@u.nus.edu_"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "charliechoong": 13
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003d DeliveryMANS - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "By: `Team SE-EDU`      Since: `August 2019`      Licence: `NUS`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* has to juggle among several fronts (customer side, deliverymen side and restaurant side) and act as the point of contact among them"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "* prefers a centralised app that brings all 3 fronts together for better management"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "*Value proposition*: Our application allows better management of all fronts for delivery-service-command-centre administrators, and allows for more efficiency and control in handling of daily tasks."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|Priority |As an ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`* * *` |Administrator |check on all of/ sort the deliverymen at once |better manage the deliverymen"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`* * *` |Administrator |help customers add/edit/remove orders |better manage customers\u0027 orders"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`* * *` |Administrator |generate statistics |see which restaurants use our app the most"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`* * *` |Administrator |see the expected timings of the orders |know the priority of the orders"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`* * *` |Administrator |add or remove menu items from restaurant menus |restaurants can adjust their menus whenever without any delay"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`* *` |Administrator |sort restaurant by popularity/ food type/ availability |recommend restaurants to customers"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`* *` |Administrator |see the location of the deliverymen currently |track the progress of delivery (and update customers accordingly)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "|`*` |Administrator |view the schedule of deliverymen |see how many times deliverymen have delivered and reward them for their hard work"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "-": 414,
      "charliechoong": 19
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 215
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "# DeliveryMANS – User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T12-2/main"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "By: `CS2103-T12-2`   Since: `Aug 2019`  Licence: \u0027NUS\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "1. Introduction"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "2. Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3. Features"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.1. Universal commands"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.1.1. Viewing help:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.1.2. Switching context:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.1.3. Viewing order summary:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.1.4. Exiting program:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2. Customer commands"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.1. Listing all customers:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.2. Listing specific customer:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.3. Editing customer info:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.4. Editing specified customer info:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.5. Sorting customer:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.6. Viewing history:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.7. Adding order:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.8. Removing customer:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3. Restaurant commands"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.1. Listing all restaurants:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.2. Entering specific restaurant:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.3. Adding food item:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.4. Removing food item:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.5. Adding rating:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.6. Viewing orders:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.7. ChefHat food item:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4. Deliverymen commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4.1. Listing all deliverymen:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4.2. Listing available deliverymen:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4.3. Entering a specific deliveryman:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4.4. Assigning order to a deliveryman:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4.5. Viewing delivery status of a deliveryman:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "4. Command Summary"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "4.1. Universal Commands"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "4.2. Customer Commands"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "4.3. Restaurant Commands"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "4.4. Deliverymen Commands"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "# **1.**** Introduction**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "DeliveryMANs is a command-line application designed specifically for restaurant administrators who are in charge of food delivery service. It facilitates food delivery service by coaliasing the delivery men, customers and restaurant menu."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "It encompasses a well-structured system for users to keep track and manage the entire delivery process."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Coalescing"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Noun: coalition"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Verb: coalesce"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "#"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "# 2. Quick Start"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Ensure you have Java 11 or above installed on your computer."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Install the JAR file found on this website:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "[https://ay1920s1-cs2103t-t12-2.github.io/main](https://ay1920s1-cs2103t-t12-2.github.io/main)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Open the application to begin."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "#"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "# 3"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**.**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "# Features"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**Command Format**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Words in curly brackets are parameters to be supplied by the user"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**3.1.**** Universal commands**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "These are general commands for controlling the app which are notdirectly related to the customer, restaurant and delivery men."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**3.1.1.**** Viewing help:**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Generates a list of commands and tips for the user"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -help"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Context specific: -help {context}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "  - Example: -help customer"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Context specific commands: -help -cxt {context} -cmd {command}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "  - Example: -help -cxt customer -cmd sort"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**3.1.2.**** Switching context:**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Switches to a specific context for targeted commands"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -switch {context}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -switch restaurant"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**3.1.3.**** Viewing order summary:**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Views the current order summary"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -summary"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**3.1.4.**** Exiting program:**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Exits the program"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -exit"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2. Customer commands"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**3.2.1.**** Listing all customers:**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Lists all current customers"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**3.2.2.**** Listing specific customer:**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Lists the information of a specific customer"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -list {customer name}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -list John Doe"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**3.2.3.**** Editing customer info:**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Edits all of customer\u0026#39;s info"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -edit {customer name} -n {name} -a {address} -rt {reward} -o {number of orders}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -edit John Doe -n Bob Doe -a Kent ridge -rt Gold -o 1"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " List of info types: Syntax:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " Name   -n"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " Address   -a"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " Reward Tier  -rt"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " Number of orders -o"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.4. Editing specified customer info:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Edits a specified info type of a customer. See 3.2.3. Editing customer info for the list of info types"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -edit -c {customer name} {info type} -d    {description}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -edit -c John Doe -a -d Kent Ridge"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.5. Sorting customer:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Sorts customers based on info type. If none is present, sort based on their names.  See 3.2.3. Editing customer info for the list of info types"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -sort {info type}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -sort -rt"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.6. Viewing history:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Views order history of a customer"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -history {customer name}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -history Mary"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.7. Adding order:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Adds an order for a customer"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -order {customer name} -r {restaurant   name} -m {menu}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -order -c John Doe -r McDonald -m McSpicy"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.2.8. Removing customer:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Removes a customer from the database"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -delete {customer name}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -delete Donald Trump"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3. Restaurant commands"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Commands in the restaurant context"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.1. Listing all restaurants:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Lists all available restaurants"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -list"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.2. Entering specific restaurant:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Enters a specific restaurant"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -enter {restaurant}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -enter muthu\u0026#39;s curry"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.3. Adding food item:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Adds a food item for a specific restaurant"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -add {item}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -add chicken rice"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.4. Removing food item:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Removes a food item for a specific restaurant"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -remove {item}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -remove laksa"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.5. Adding rating:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Adds a rating (out of 5) for the restaurant"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -rate {rating}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -rate 5"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.6. Viewing orders:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Views all the existing orders for the restaurant"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -orders"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.3.7. ChefHat food item:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Marks a food item as Chef\u0026#39;s recommendation"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -chefhat {item}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -chefhat nasi lemak"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4. Deliverymen commands"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Commands in the delivery men context"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4.1. Listing all deliverymen:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Lists all deliverymen"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -list"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4.2. Listing available deliverymen:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Lists all available deliverymen"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -lista"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4.3. Entering a specific deliveryman:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Shows a deliveryman\u0026#39;s basic info"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -list {name}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -list Stanley Tay"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4.4. Assigning order to a deliveryman:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Assigns an order to an available deliveryman"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: -assn {name}{#orderIndex}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -assn Stanley Tay #12"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "3.4.5. Viewing delivery status of a deliveryman:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Shows delivery status of an assigned deliveryman"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Format: status {name}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "Example: -status Stanley Tay"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "#"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "# 4. Command Summary"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "**Command:** format"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "4.1. Universal Commands"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- View help: -help"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- View order summary: -summary"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Switch to restaurant context: -restaurant"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Switch to customer context: -customer"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Switch to deliverymen context: -deliverymen"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Exit application: -exit"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "4.2. Customer Commands"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- List customers: -list"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- List specified customer info: -list {name}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Edit customer info: -edit {customer name} -n      {customer name} -a {address} -r {reward tier} -o {number of order}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Edit specific customer info: -edit -n {customer name} {info type} -d {description}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Sort customer to info type: -sort {info type}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Show order history of customer: -history {customer name}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Add order: -order {customer name} -r {restaurant name} -m {menu item}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Delete customer: -delete {customer name}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "4.3. Restaurant Commands"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- List restaurants: -list"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Enter specific restaurant: -enter {restaurant}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Add food item: -add {item}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Remove food item: -remove {item}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- View order: -orders"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Add Rating from Customer: -rate {rating}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- ChefHat Food Item: -chefhat {item}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "4.4. Deliverymen Commands"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- List deliverymen: -list"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- List available deliverymen: -lista"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- List specific deliveryman info: -list {name}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Assign order to deliveryman: -assn {name} {order}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "- Show delivery status of deliveryman: -status {name}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "charliechoong": 310
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "The `address` field in `Person` is actually an instance of the `removed` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 61,
      "charliechoong": 3
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.OrderBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.storage.JsonOrderDatabaseStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.Storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.storage.customer.CustomerDatabaseStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.storage.customer.JsonCustomerDatabaseStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.storage.deliveryman.DeliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.storage.deliveryman.JsonDeliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.storage.order.OrderDatabaseStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.restaurant.JsonRestaurantDatabaseStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.restaurant.RestaurantDatabaseStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.ui.Ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.ui.UiManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing DeliveryMANS ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        CustomerDatabaseStorage customerDatabaseStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                new JsonCustomerDatabaseStorage(userPrefs.getCustomerDatabaseFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        DeliverymenDatabaseStorage deliverymenDatabaseStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                new JsonDeliverymenDatabaseStorage(userPrefs.getDeliverymenDatabaseFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        RestaurantDatabaseStorage restaurantDatabaseStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                new JsonRestaurantDatabaseStorage(userPrefs.getRestaurantDatabaseFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        OrderDatabaseStorage orderDatabaseStorage \u003d new JsonOrderDatabaseStorage(userPrefs.getOrderBookFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, customerDatabaseStorage, deliverymenDatabaseStorage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                restaurantDatabaseStorage, orderDatabaseStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Optional\u003cReadOnlyCustomerDatabase\u003e customerDatabaseOptional;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Optional\u003cReadOnlyDeliverymenDatabase\u003e deliverymenDatabaseOptional;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Optional\u003cReadOnlyRestaurantDatabase\u003e restaurantDatabaseOptional;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Optional\u003cReadOnlyOrderBook\u003e orderBookOptional;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ReadOnlyAddressBook initialAddressData;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ReadOnlyCustomerDatabase initialCustomerData;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        ReadOnlyDeliverymenDatabase initialDeliverymenData;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        ReadOnlyRestaurantDatabase initialRestaurantData;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ReadOnlyOrderBook initialOrderData;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialAddressData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            customerDatabaseOptional \u003d storage.readCustomerDatabase();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (!customerDatabaseOptional.isPresent()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CustomerDatabase\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialCustomerData \u003d customerDatabaseOptional.orElseGet(SampleDataUtil::getSampleCustomerDatabase);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    + \"Will be starting with an empty CustomerDatabase\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialCustomerData \u003d new CustomerDatabase();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    + \"Will be starting with an empty CustomerDatabase\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialCustomerData \u003d new CustomerDatabase();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenDatabaseOptional \u003d storage.readDeliverymenDatabase();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (!deliverymenDatabaseOptional.isPresent()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample DeliverymenDatabase\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            initialDeliverymenData \u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    deliverymenDatabaseOptional.orElseGet(SampleDataUtil::getSampleDeliverymenDatabase);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    + \"Will be starting with an empty DeliverymenDatabase\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            initialDeliverymenData \u003d new DeliverymenDatabase();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    + \"Will be starting with an empty DeliverymenDatabase\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            initialDeliverymenData \u003d new DeliverymenDatabase();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantDatabaseOptional \u003d storage.readRestaurantDatabase();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (!restaurantDatabaseOptional.isPresent()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample RestaurantDatabase\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            initialRestaurantData \u003d restaurantDatabaseOptional.orElseGet(SampleDataUtil::getSampleRestaurantDatabase);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    + \"Will be starting with an empty RestaurantDatabase\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            initialRestaurantData \u003d new RestaurantDatabase();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    + \"Will be starting with an empty RestaurantDatabase\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            initialRestaurantData \u003d new RestaurantDatabase();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            orderBookOptional \u003d storage.readOrderBook();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (!orderBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample OrderBook\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialOrderData \u003d orderBookOptional.orElseGet(SampleDataUtil::getSampleOrderBook);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty OrderBook\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialOrderData \u003d new OrderBook();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty OrderBook\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            initialOrderData \u003d new OrderBook();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new ModelManager(initialAddressData, initialCustomerData, initialDeliverymenData, initialRestaurantData,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                initialOrderData, userPrefs);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        logger.info(\"Starting DeliveryMANS \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping DeliveryMANS... ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 4,
      "ryantay232": 32,
      "MackyMaguire": 41,
      "SoilingRogue": 16,
      "-": 149,
      "charliechoong": 42
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX \u003d \"The restaurant index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_INVALID_DELIVERYMAN_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \"The deliveryman index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX \u003d \"The customer index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_INVALID_SWITCH_CONTEXT \u003d \"The context to switch to is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_ALREADY_IN_CONTEXT \u003d \"Already in %1$d context!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_DISPLAYED_INDEX \u003d \"The order index provided is invalid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 1,
      "MackyMaguire": 1,
      "SoilingRogue": 4,
      "-": 11,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @see seedu.deliverymans.model.addressbook.Model#getAddressBook()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of customers */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliveryman \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns the DeliverymenDatabase."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @see seedu.deliverymans.model.Model#getDeliverymenDatabase()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ReadOnlyDeliverymenDatabase getDeliverymenDatabase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of deliverymen */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns the user prefs\u0027 deliverymen database file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Path getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Restaurant \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the RestaurantDatabase."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @see seedu.deliverymans.model.Model#getRestaurantDatabase()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ReadOnlyRestaurantDatabase getRestaurantDatabase();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of restaurants */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getFilteredRestaurantList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /** Returns an unmodifiable view of the editing restaurant */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getEditingRestaurantList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the user prefs\u0027 restaurant database file path."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @see Model#getOrderBook() Book()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    ReadOnlyOrderBook getOrderBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of orders */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns the user prefs\u0027 order book file path."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 5,
      "ryantay232": 4,
      "MackyMaguire": 30,
      "SoilingRogue": 17,
      "-": 39,
      "charliechoong": 21
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.UniversalParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final UniversalParser universalParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "        universalParser \u003d new UniversalParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Command command \u003d universalParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "        model.notifyChange(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            storage.saveRestaurantDatabase(model.getRestaurantDatabase());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            storage.saveDeliverymenDatabase(model.getDeliverymenDatabase());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliveryman \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ReadOnlyDeliverymenDatabase getDeliverymenDatabase() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return model.getDeliverymenDatabase();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return model.getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Path getDeliverymenDatabaseFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return model.getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Restaurant \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ReadOnlyRestaurantDatabase getRestaurantDatabase() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return model.getRestaurantDatabase();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getFilteredRestaurantList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getEditingRestaurantList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return model.getEditingRestaurantList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getRestaurantDatabaseFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return model.getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public ReadOnlyOrderBook getOrderBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return model.getOrderBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return model.getFilteredOrderList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return model.getOrderBookFilePath();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 9,
      "ryantay232": 5,
      "MackyMaguire": 38,
      "SoilingRogue": 16,
      "-": 58,
      "charliechoong": 23
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "charliechoong": 3
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Context context;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * other fields set to their default value and passes the current context of the system."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CommandResult(String feedbackToUser, Context context) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.context \u003d context;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Context getContext() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return context;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 context \u003d\u003d otherCommandResult.context;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, context);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 20,
      "SoilingRogue": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 8,
      "-": 56,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * (to be added)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches the context for input\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + \"such that the input will only target commands of a certain context.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + \"Parameters: CONTEXT (must be a valid context)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                + \"Example: \" + COMMAND_WORD + \" RESTAURANT\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public static final String MESSAGE_ALREADY_IN_CURRENT_CONTEXT \u003d \"Already in current context: $s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public static final String MESSAGE_SUCCESS \u003d \"Switched to : $s context\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public SwitchCommand(String args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            Context context;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                context \u003d Context.valueOf(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_SWITCH_CONTEXT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (context.equals(\"model.getCurrentContext()\")) { // get context of current model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_ALREADY_IN_CURRENT_CONTEXT, context));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, context));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    || (other instanceof SwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "MackyMaguire": 3,
      "-": 20,
      "charliechoong": 47
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 20
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Deletes a person identified using its displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "MackyMaguire": 3,
      "-": 46,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.model.addressbook.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Remark updatedRemark \u003d personToEdit.getRemark(); // edit command does not allow editing remarks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedRemark, updatedTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 6,
      "MackyMaguire": 12,
      "-": 192,
      "charliechoong": 5
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 1,
      "MackyMaguire": 2,
      "-": 38,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.model.addressbook.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/RemarkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_REMARK + \"[REMARK]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_REMARK + \"Likes to swim.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param index  of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public RemarkCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "              remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 3,
      "MackyMaguire": 3,
      "charliechoong": 84
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/addressbook/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.addressbook.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 17
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Adds a customer to the system."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a customer to the customer database. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New customer added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"This customer already exists in the customer database\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Customer toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Customer}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public AddCommand(Customer customer) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        toAdd \u003d customer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (model.hasCustomer(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.addCustomer(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 58,
      "MackyMaguire": 1,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \": Deletes the customer identified by the index number used in the displayed customer list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_DELETE_CUSTOMER_SUCCESS \u003d \"Deleted Customer: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer customerToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.deleteCustomer(customerToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CUSTOMER_SUCCESS, customerToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 21,
      "charliechoong": 34
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Edits the details of an existing customer in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the customer identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + \"by the index number used in the displayed customer database. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_EDIT_CUSTOMER_SUCCESS \u003d \"Edited Customer: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"This customer already exists in the customer database.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final EditCustomerDescriptor editCustomerDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param index                  of the customer in the filtered customer list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param editCustomerDescriptor details to edit the customer with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public EditCommand(Index index, EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(editCustomerDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.editCustomerDescriptor \u003d new EditCustomerDescriptor(editCustomerDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer customerToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer editedCustomer \u003d createEditedCustomer(customerToEdit, editCustomerDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!customerToEdit.isSameCustomer(editedCustomer) \u0026\u0026 model.hasCustomer(editedCustomer)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.setCustomer(customerToEdit, editedCustomer);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Creates and returns a {@code Customer} with the details of {@code customerToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * edited with {@code editCustomerDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static Customer createEditedCustomer(Customer customerToEdit,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                                                 EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        assert customerToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Name updatedName \u003d editCustomerDescriptor.getName().orElse(customerToEdit.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Phone updatedPhone \u003d editCustomerDescriptor.getPhone().orElse(customerToEdit.getPhone());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCustomerDescriptor.getTags().orElse(customerToEdit.getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new Customer(updatedName, updatedPhone, updatedTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 editCustomerDescriptor.equals(e.editCustomerDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Stores the details to edit the customer with. Each non-empty field value will replace the corresponding field"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * value of the customer."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static class EditCustomerDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public EditCustomerDescriptor() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public EditCustomerDescriptor(EditCustomerDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (!(other instanceof EditCustomerDescriptor)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            EditCustomerDescriptor e \u003d (EditCustomerDescriptor) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 168,
      "MackyMaguire": 1,
      "charliechoong": 30
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public HistoryCommand(String arguments) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 22
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all customers\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 8,
      "charliechoong": 16
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/customer/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public SortCommand(String arguments) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 22
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Adds a deliveryman to the deliveryman book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * User must be in deliveryman context to use this command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deliveryman to the deliveryman book.\\n \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_PHONE + \"96177613\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deliveryman added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERYMAN \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \"This deliveryman already exists in the deliveryman book.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Deliveryman toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Deliveryman}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public AddCommand(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(deliveryman);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        toAdd \u003d deliveryman;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (model.hasDeliveryman(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DELIVERYMAN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.addDeliveryman(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 62
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/AssignCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Assigns an order to a deliveryman"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class AssignCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \": Assigns an order to a deliveryman.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_ASSIGN_ORDER_SUCCESS \u003d \"Order has been assigned to deliveryman: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 23
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Deletes a deliveryman identified using it\u0027s displayed index from the deliverymen book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \": Deletes the deliveryman identified by the index number used in the displayed deliveryman list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_DELETE_DELIVERYMAN_SUCCESS \u003d \"Deleted Deliveryman: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        List\u003cDeliveryman\u003e lastShownList \u003d model.getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERYMAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman deliverymanToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.deleteDeliveryman(deliverymanToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DELIVERYMAN_SUCCESS, deliverymanToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 55
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_DELIVERYMEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Edits the details of an existing deliveryman in the deliverymen database."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the deliveryman identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"by the index number used in the displayed deliveryman list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_EDIT_DELIVERYMAN_SUCCESS \u003d \"Edited Deliveryman: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERYMEN \u003d \"This deliveryman already exists in the address book.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final EditDeliverymanDescriptor editDeliverymanDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param index of the deliveryman in the filtered deliverymen list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param editDeliverymanDescriptor details to edit the deliveryman with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public EditCommand(Index index, EditDeliverymanDescriptor editDeliverymanDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(editDeliverymanDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.editDeliverymanDescriptor \u003d new EditDeliverymanDescriptor(editDeliverymanDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        List\u003cDeliveryman\u003e lastShownList \u003d model.getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERYMAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman deliverymanToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman editedDeliveryman \u003d createEditedDeliveryman(deliverymanToEdit, editDeliverymanDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!deliverymanToEdit.isSameDeliveryman(editedDeliveryman) \u0026\u0026 model.hasDeliveryman(editedDeliveryman)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DELIVERYMEN);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.setDeliveryman(deliverymanToEdit, editedDeliveryman);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.updateFilteredDeliverymenList(PREDICATE_SHOW_ALL_DELIVERYMEN);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DELIVERYMAN_SUCCESS, editedDeliveryman));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Creates and returns a {@code Deliveryman} with the details of {@code deliverymanToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * edited with {@code editDeliverymanDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static Deliveryman createEditedDeliveryman(Deliveryman deliverymanToEdit,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                                  EditDeliverymanDescriptor editDeliverymanDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        assert deliverymanToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Name updatedName \u003d editDeliverymanDescriptor.getName().orElse(deliverymanToEdit.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Phone updatedPhone \u003d editDeliverymanDescriptor.getPhone().orElse(deliverymanToEdit.getPhone());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editDeliverymanDescriptor.getTags().orElse(deliverymanToEdit.getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new Deliveryman(updatedName, updatedPhone, updatedTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 editDeliverymanDescriptor.equals(e.editDeliverymanDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Stores the details to edit the deliveryman with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static class EditDeliverymanDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public EditDeliverymanDescriptor() {}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public EditDeliverymanDescriptor(EditDeliverymanDescriptor toCopy) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (!(other instanceof EditDeliverymanDescriptor)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            EditDeliverymanDescriptor e \u003d (EditDeliverymanDescriptor) other;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 199
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/ListAvailCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Lists all the available deliverymen."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class ListAvailCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lista\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \": Lists all the deliverymen who are currently available.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_LIST_AVAIL_SUCCESS \u003d \"Listed all currently available deliverymen\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ListAvailCommand() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        model.listAvailableDeliverymen();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_AVAIL_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof ListAvailCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 38
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_LIST_SUCCESS \u003d \"Listed all deliverymen\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ListCommand(String arguments) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 22
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (To be added)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_SORT_SUCCESS \u003d \"Deliverymen sorted.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public SortCommand(String arguments) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 24
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/deliveryman/StatusCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (To be added)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class StatusCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"status\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_SHOW_STATUS_SUCCESS \u003d \"Showed status of delivery #\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatusCommand(String arguments) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 23
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/AddFoodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Adds a food to the current restaurant."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class AddFoodCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food to the current restaurant. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + PREFIX_NAME + \"Fried Chicken \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + PREFIX_PRICE + \"7.65 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + PREFIX_TIME + \"300 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "            + PREFIX_TAG + \"FastFood\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \"This food already exists in the restaurant\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final Food toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Creates a FoodCommand to add the specified {@code Food}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public AddFoodCommand(Food food) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Restaurant restaurant \u003d model.getEditingRestaurantList().get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        boolean isDuplicate \u003d restaurant.getMenu().stream().anyMatch(toAdd::isSameFood);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (isDuplicate) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurant.addFood(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof AddFoodCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFoodCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 58,
      "MackyMaguire": 8
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/AddRestaurantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Adds a restaurant to the system."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class AddRestaurantCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a restaurant to the restaurant database. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_NAME + \"KFC \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_LOCATION + \"Jurong \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_TAG + \"FastFood\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New restaurant added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESTAURANT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \"This restaurant already exists in the restaurant database\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Restaurant toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Restaurant}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public AddRestaurantCommand(Restaurant restaurant) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurant);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        toAdd \u003d restaurant;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (model.hasRestaurant(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RESTAURANT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.addRestaurant(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof AddRestaurantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddRestaurantCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 60
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/DeleteFoodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Deletes a food item identified using its displayed index from the menu list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DeleteFoodCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \": Deletes the food item identified by the index number used in the displayed menu list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_DELETE_RESTAURANT_SUCCESS \u003d \"Deleted Food: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DeleteFoodCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant restaurant \u003d model.getEditingRestaurantList().get(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d restaurant.getMenu().size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Food foodToDelete \u003d restaurant.getMenu().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurant.removeFood(foodToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RESTAURANT_SUCCESS, foodToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof DeleteFoodCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteFoodCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 54
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/DeleteRestaurantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Deletes a restaurant identified using its displayed index from the restaurant list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DeleteRestaurantCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \": Deletes the restaurant identified by the index number used in the displayed restaurant list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_DELETE_RESTAURANT_SUCCESS \u003d \"Deleted Restaurant: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DeleteRestaurantCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cRestaurant\u003e lastShownList \u003d model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RESTAURANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant restaurantToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.deleteRestaurant(restaurantToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RESTAURANT_SUCCESS, restaurantToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof DeleteRestaurantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteRestaurantCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 55
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/EditDetailsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_RESTAURANTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Edits details of the restaurant in editing mode."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class EditDetailsCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editdetails\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the restaurant \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"in editing mode currently. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_NAME + \"KFC \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + PREFIX_LOCATION + \"Woodlands\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_EDIT_RESTAURANT_SUCCESS \u003d \"Edited Restaurant: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESTAURANT \u003d \"This restaurant already exists in the \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"restaurant database.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final EditRestaurantDescriptor editRestaurantDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param editRestaurantDescriptor details to edit the restaurant with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public EditDetailsCommand(EditRestaurantDescriptor editRestaurantDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(editRestaurantDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.editRestaurantDescriptor \u003d new EditRestaurantDescriptor(editRestaurantDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant restaurantToEdit \u003d model.getEditingRestaurantList().get(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant editedRestaurant \u003d createEditedRestaurant(restaurantToEdit, editRestaurantDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!restaurantToEdit.isSameRestaurant(editedRestaurant) \u0026\u0026 model.hasRestaurant(editedRestaurant)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RESTAURANT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.setRestaurant(restaurantToEdit, editedRestaurant);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.setEditingRestaurant(editedRestaurant);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.updateFilteredRestaurantList(PREDICATE_SHOW_ALL_RESTAURANTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.updateEditingRestaurantList(PREDICATE_SHOW_ALL_RESTAURANTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_RESTAURANT_SUCCESS, editedRestaurant));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates and returns a {@code Restaurant} with the details of {@code restaurantToEdit}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * edited with {@code editRestaurantDescriptor}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static Restaurant createEditedRestaurant(Restaurant restaurantToEdit,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                                                     EditRestaurantDescriptor editRestaurantDescriptor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        assert restaurantToEdit !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Name updatedName \u003d editRestaurantDescriptor.getName().orElse(restaurantToEdit.getName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Location updatedLocation \u003d editRestaurantDescriptor.getLocation().orElse(restaurantToEdit.getLocation());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editRestaurantDescriptor.getTags().orElse(restaurantToEdit.getTags());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new Restaurant(updatedName, updatedLocation, updatedTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Stores the details to edit the restaurant with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * corresponding field value of the restaurant."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static class EditRestaurantDescriptor {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public EditRestaurantDescriptor() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public EditRestaurantDescriptor(EditRestaurantDescriptor toCopy) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, location, tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (!(other instanceof EditRestaurantDescriptor)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            EditRestaurantDescriptor e \u003d (EditRestaurantDescriptor) other;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 173
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/EditModeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Goes into editing mode for a restaurant"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class EditModeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the restaurant identified \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"by the index number used in the displayed restaurant list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Goes into editing mode for the identified restaurant.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered editing mode for: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Restaurant}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public EditModeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cRestaurant\u003e lastShownList \u003d model.getFilteredRestaurantList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant restaurantToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        model.setEditingRestaurant(restaurantToEdit);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, restaurantToEdit), Context.EDITING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof EditModeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EditModeCommand) other).targetIndex));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 62
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/restaurant/ExitEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.commands.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Exits editing mode for a restaurant"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class ExitEditCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exitedit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exited Editing Mode\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, Context.RESTAURANT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 20
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/AddOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_DELIVERYMAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Order command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class AddOrderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"order\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_ADD_ORDER_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \": Adds an order to the manager. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_ORDER + \"ORDER \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_RESTAURANT + \"RESTAURANT]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_DELIVERYMAN + \"DELIVERYMAN]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_CUSTOMER + \"Sam \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_RESTAURANT + \"KFC \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_DELIVERYMAN + \"Deliveryman #1337\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New order added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This order already exists\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Order toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public AddOrderCommand(Order toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (model.hasOrder(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        model.addOrder(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                || (other instanceof AddOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddOrderCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 44,
      "charliechoong": 14
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/ContextCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class ContextCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Context changed to: %1$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Context context;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ContextCommand(Context context) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.context \u003d context;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        model.setContext(context);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, context.toLowerCaseString()), context);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 2,
      "charliechoong": 22
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/DeleteOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Deletes an order identified using its displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class DeleteOrderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_order\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \": Deletes the order identified by the index number used in the displayed order list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Order: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public DeleteOrderCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order orderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        model.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                || (other instanceof DeleteOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteOrderCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 55
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/EditOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_DELIVERYMAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Edits the details of an existing order."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class EditOrderCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_order\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \": Edit an order already present in the manager. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_ORDER + \"ORDER \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_RESTAURANT + \"RESTAURANT]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"[\" + PREFIX_DELIVERYMAN + \"DELIVERYMAN]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_CUSTOMER + \"Sam \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_RESTAURANT + \"KFC \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            + PREFIX_DELIVERYMAN + \"Deliveryman #1337\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_EDIT_ORDER_SUCCESS \u003d \"Edited Order: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final EditOrderDescriptor editOrderDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param index               of the order in the filtered order list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param editOrderDescriptor details to edit the order with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public EditOrderCommand(Index index, EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(editOrderDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.editOrderDescriptor \u003d new EditOrderDescriptor(editOrderDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order orderToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order editedOrder \u003d createEditedOrder(orderToEdit, editOrderDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!orderToEdit.isSameOrder(editedOrder) \u0026\u0026 model.hasOrder(editedOrder)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        model.setOrder(orderToEdit, editedOrder);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ORDER_SUCCESS, editedOrder));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Creates and returns a {@code Order} with the details of {@code orderToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * edited with {@code editOrderDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static Order createEditedOrder(Order orderToEdit, EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        assert orderToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String updatedOrderName \u003d editOrderDescriptor.getOrderName().orElse(orderToEdit.getOrderName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String updatedCustomer \u003d editOrderDescriptor.getCustomer().orElse(orderToEdit.getCustomer());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String updatedRestaurant \u003d editOrderDescriptor.getRestaurant().orElse(orderToEdit.getRestaurant());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String updatedDeliveryman \u003d editOrderDescriptor.getDeliveryman().orElse(orderToEdit.getDeliveryman());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        boolean updatedIsCompleted \u003d editOrderDescriptor.getCompleted() || orderToEdit.isCompleted();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Set\u003cFood\u003e updatedFood \u003d editOrderDescriptor.getFoods().orElse(orderToEdit.getFood());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order order \u003d new Order(updatedOrderName, updatedCustomer, updatedRestaurant, updatedDeliveryman);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        order.addFood(updatedFood);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!(other instanceof EditOrderCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        EditOrderCommand e \u003d (EditOrderCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return index \u003d\u003d e.index"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 editOrderDescriptor.equals(e.editOrderDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Stores the details to edit the order with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * corresponding field value of the order."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static class EditOrderDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private String orderName;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private String customer;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private String restaurant;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private String deliveryman;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private boolean isCompleted;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        private Set\u003cFood\u003e foods;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public EditOrderDescriptor() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public EditOrderDescriptor(EditOrderDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            setOrderName(toCopy.orderName);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            setCustomer(toCopy.customer);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            setRestaurant(toCopy.restaurant);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            setDeliveryman(toCopy.deliveryman);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            setCompleted(toCopy.isCompleted);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            setFoods(toCopy.foods);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return CollectionUtil.isAnyNonNull(orderName, customer, restaurant, deliveryman, foods);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public void setOrderName(String name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.orderName \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public Optional\u003cString\u003e getOrderName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.ofNullable(orderName);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public void setCustomer(String customer) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.customer \u003d customer;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public Optional\u003cString\u003e getCustomer() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.ofNullable(customer);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public void setRestaurant(String restaurant) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.restaurant \u003d restaurant;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public Optional\u003cString\u003e getRestaurant() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.ofNullable(restaurant);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public void setDeliveryman(String deliveryman) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.deliveryman \u003d deliveryman;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public Optional\u003cString\u003e getDeliveryman() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.ofNullable(deliveryman);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public void setCompleted(boolean isCompleted) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public boolean getCompleted() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return isCompleted;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code food}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * A defensive copy of {@code food} is used internally."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public void setFoods(Set\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            this.foods \u003d (foods !\u003d null) ? new HashSet\u003c\u003e(foods) : null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * Returns an unmodifiable food set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code food} is null."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public Optional\u003cSet\u003cFood\u003e\u003e getFoods() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return (foods !\u003d null) ? Optional.of(Collections.unmodifiableSet(foods)) : Optional.empty();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (!(other instanceof EditOrderDescriptor)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            EditOrderDescriptor e \u003d (EditOrderDescriptor) other;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return getOrderName().equals(e.getOrderName())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    \u0026\u0026 getCustomer().equals(e.getCustomer())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    \u0026\u0026 getRestaurant().equals(e.getRestaurant())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    \u0026\u0026 getDeliveryman().equals(e.getDeliveryman())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    \u0026\u0026 (getCompleted() \u003d\u003d e.getCompleted())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    \u0026\u0026 getFoods().equals(e.getFoods());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 236
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "charliechoong": 4
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //TODO: complete this class as well as in the UniversalParser.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public HelpCommand(String args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "charliechoong": 9
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Redoes an action on the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully redid: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_REDO \u003d \"There is nothing to redo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!model.hasRedo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new CommandException(MESSAGE_NOTHING_TO_REDO);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.redo()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "                || other instanceof RedoCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 36
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/SummaryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 18
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/commands/universal/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Undoes an action on the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully undid: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_UNDO \u003d \"There is nothing to undo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!model.hasUndo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new CommandException(MESSAGE_NOTHING_TO_UNDO);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.undo()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "                || other instanceof UndoCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 36
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"rr/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_DELIVERYMAN \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_RESTAURANT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_FOOD \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // Prefix for universal commands"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // Prefix for customer commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final Prefix PREFIX_ORDER \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // Prefix for deliveryman commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // Prefix for restaurant commands"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "MackyMaguire": 1,
      "SoilingRogue": 15,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.LocationMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses a {@code String name} into a {@code Location}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!LocationMap.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(LocationMap.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return LocationMap.getLocation(trimmedLocation).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Parses a {@code String price} into a {@code BigDecimal}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static BigDecimal parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "etlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return new BigDecimal(trimmedPrice);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "etlow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new ParseException(e.getMessage(), e);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Parses a {@code String duration} in seconds into a {@code Duration}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static Duration parseSeconds(String seconds) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireNonNull(seconds);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String trimmedSeconds \u003d seconds.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "etlow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return Duration.ofSeconds(Long.parseLong(trimmedSeconds));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "etlow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new ParseException(e.getMessage(), e);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 34,
      "ryantay232": 1,
      "MackyMaguire": 19,
      "-": 85,
      "charliechoong": 5
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.addressbook.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Remark remark \u003d new Remark(\"\"); // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Person person \u003d new Person(name, phone, email, remark, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "MackyMaguire": 11,
      "-": 41,
      "charliechoong": 6
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.addressbook.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 11,
      "SoilingRogue": 2,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 60
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 148
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.addressbook.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 3,
      "-": 24,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.addressbook.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.addressbook.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "MackyMaguire": 8,
      "-": 66,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.addressbook.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 4,
      "-": 28,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.addressbook.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 16
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.addressbook.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 3,
      "MackyMaguire": 6,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 39
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/addressbook/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.addressbook.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 17
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/customer/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer customer \u003d new Customer(name, phone, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new AddCommand(customer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 50,
      "MackyMaguire": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/customer/CustomerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.HistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.SortCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class CustomerParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"customer\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new HistoryCommand(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new SortCommand(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 6,
      "charliechoong": 61
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/customer/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 30
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/customer/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.commands.customer.EditCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        EditCustomerDescriptor editCustomerDescriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            editCustomerDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            editCustomerDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCustomerDescriptor::setTags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!editCustomerDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new EditCommand(index, editCustomerDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 18,
      "MackyMaguire": 2,
      "charliechoong": 58
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/deliveryman/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman deliveryman \u003d new Deliveryman(name, phone, tagList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new AddCommand(deliveryman);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 58
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/deliveryman/AssignCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.AssignCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public AssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "        /* Put imports back if necessary when uncommenting this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.EditCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.addressbook.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new AssignCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 13,
      "MackyMaguire": 2,
      "charliechoong": 71
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/deliveryman/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 30
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/deliveryman/DeliverymanParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.AssignCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.ListAvailCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.SortCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.StatusCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deliverymen\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case AssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new ListCommand(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case ListAvailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new ListAvailCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new SortCommand(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case StatusCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new StatusCommand(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 1,
      "charliechoong": 75
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/deliveryman/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.deliveryman.EditCommand.EditDeliverymanDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        EditDeliverymanDescriptor editDeliverymanDescriptor \u003d new EditDeliverymanDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            editDeliverymanDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            editDeliverymanDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editDeliverymanDescriptor::setTags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!editDeliverymanDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new EditCommand(index, editDeliverymanDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "charliechoong": 77
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/AddFoodCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddFoodCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class AddFoodCommandParser implements Parser\u003cAddFoodCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public AddFoodCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRICE, PREFIX_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PRICE, PREFIX_TIME, PREFIX_TAG)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFoodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "        BigDecimal price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Duration duration \u003d ParserUtil.parseSeconds(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Food food \u003d new Food(name, price, duration, tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new AddFoodCommand(food);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 56,
      "MackyMaguire": 5
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/AddRestaurantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddRestaurantCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class AddRestaurantCommandParser implements Parser\u003cAddRestaurantCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public AddRestaurantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_LOCATION, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LOCATION)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRestaurantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant restaurant \u003d new Restaurant(name, location, tagList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new AddRestaurantCommand(restaurant);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 58
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/DeleteFoodCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.DeleteFoodCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new DeleteFoodCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DeleteFoodCommandParser implements Parser\u003cDeleteFoodCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteFoodCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * and returns a DeleteFoodCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DeleteFoodCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new DeleteFoodCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFoodCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 29
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/DeleteRestaurantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.DeleteRestaurantCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new DeleteRestaurantCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DeleteRestaurantCommandParser implements Parser\u003cDeleteRestaurantCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteRestaurantCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * and returns a DeleteRestaurantCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DeleteRestaurantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new DeleteRestaurantCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRestaurantCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 29
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/EditDetailsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditDetailsCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditDetailsCommand.EditRestaurantDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new EditDetailsCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class EditDetailsCommandParser implements Parser\u003cEditDetailsCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditDetailsCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * and returns an EditDetailsCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public EditDetailsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_LOCATION, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditDetailsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        EditRestaurantDescriptor editRestaurantDescriptor \u003d new EditRestaurantDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            editRestaurantDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            editRestaurantDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editRestaurantDescriptor::setTags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!editRestaurantDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(EditDetailsCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new EditDetailsCommand(editRestaurantDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 72
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/EditModeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditModeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses input arguments and creates a new EditRestaurantCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class EditModeCommandParser implements Parser\u003cEditModeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditRestaurantCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * and returns a EditRestaurantCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public EditModeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new EditModeCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditModeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 30
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/EditingParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddFoodCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.DeleteFoodCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditDetailsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.ExitEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses user input in editing context"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class EditingParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case EditDetailsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new EditDetailsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case AddFoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new AddFoodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case DeleteFoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new DeleteFoodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case ExitEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new ExitEditCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 59
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/restaurant/RestaurantParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.AddRestaurantCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.DeleteRestaurantCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.commands.restaurant.EditModeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Parses user input in restaurant context"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class RestaurantParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"restaurant\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case AddRestaurantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new AddRestaurantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case DeleteRestaurantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new DeleteRestaurantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case EditModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return new EditModeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 14,
      "charliechoong": 42
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/AddOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.commands.universal.AddOrderCommand.MESSAGE_ADD_ORDER_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_DELIVERYMAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.AddOrderCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Parses input arguments and creates a new {@code OrderCommand} object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class AddOrderCommandParser implements Parser\u003cAddOrderCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code OrderCommand}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * and returns a {@code OrderCommand} object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public AddOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String orderName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String customer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String restaurant;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        String deliveryman;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ORDER, PREFIX_CUSTOMER,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                PREFIX_RESTAURANT, PREFIX_DELIVERYMAN);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            orderName \u003d argMultimap.getValue(PREFIX_ORDER).orElse(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            customer \u003d argMultimap.getValue(PREFIX_CUSTOMER).orElseThrow(Exception::new);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            restaurant \u003d argMultimap.getValue(PREFIX_RESTAURANT).orElseThrow(Exception::new);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            deliveryman \u003d argMultimap.getValue(PREFIX_DELIVERYMAN).orElseThrow(Exception::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (Exception ive) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    MESSAGE_ADD_ORDER_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order order \u003d new Order(orderName, customer, restaurant, deliveryman);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new AddOrderCommand(order);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 25,
      "charliechoong": 26
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/Context.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (to be added)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public enum Context {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    GLOBAL,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    CUSTOMER,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    DELIVERYMEN,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    RESTAURANT,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    EDITING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String toLowerCaseString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return name().toLowerCase();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "charliechoong": 14
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/DeleteOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.DeleteOrderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Parses input arguments and creates a new DeleteOrderCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class DeleteOrderCommandParser implements Parser\u003cDeleteOrderCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteOrderCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * and returns a DeleteOrderCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public DeleteOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new DeleteOrderCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 31
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/EditOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_RESTAURANT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.EditOrderCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Parses input arguments and creates a new EditOrderCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class EditOrderCommandParser implements Parser\u003cEditOrderCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public EditOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ORDER, PREFIX_CUSTOMER, PREFIX_RESTAURANT, PREFIX_FOOD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        EditOrderCommand.EditOrderDescriptor editOrderDescriptor \u003d new EditOrderCommand.EditOrderDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        parseFoodForEdit(argMultimap.getAllValues(PREFIX_FOOD)).ifPresent(editOrderDescriptor::setFoods);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!editOrderDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new ParseException(EditOrderCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new EditOrderCommand(index, editOrderDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e foods} into a {@code Set\u003cTag\u003e} if {@code foods} is non-empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * If {@code foods} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero foods."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Optional\u003cSet\u003cFood\u003e\u003e parseFoodForEdit(Collection\u003cString\u003e foods) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        assert foods !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (foods.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Collection\u003cString\u003e foodSet \u003d foods.size() \u003d\u003d 1 \u0026\u0026 foods.contains(\"\") ? Collections.emptySet() : foods;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        //        return Optional.of(ParserUtil.parseFoods(foodSet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 74
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/logic/parser/universal/UniversalParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.logic.parser.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_ALREADY_IN_CONTEXT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.AddOrderCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.ContextCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.DeleteOrderCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.EditOrderCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.SummaryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.universal.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.customer.CustomerParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.deliveryman.DeliverymanParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.parser.restaurant.EditingParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.logic.parser.restaurant.RestaurantParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * (To be added)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class UniversalParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static Context currentContext \u003d Context.GLOBAL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Context nextContext;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case AddOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new AddOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case EditOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new EditOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        case DeleteOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return new DeleteOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new HelpCommand(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new SummaryCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etlow"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etlow"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case CustomerParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            nextContext \u003d Context.CUSTOMER;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            checkContext(nextContext);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            currentContext \u003d nextContext;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new ContextCommand(nextContext);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DeliverymanParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            nextContext \u003d Context.DELIVERYMEN;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            checkContext(nextContext);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            currentContext \u003d nextContext;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new ContextCommand(nextContext);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case RestaurantParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            nextContext \u003d Context.RESTAURANT;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            checkContext(nextContext);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            currentContext \u003d nextContext;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return new ContextCommand(nextContext);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            switch (currentContext) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            case CUSTOMER:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return new CustomerParser().parseCommand(userInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            case RESTAURANT:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                Command command \u003d new RestaurantParser().parseCommand(userInput);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                if (commandWord.equals(\"edit\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    currentContext \u003d Context.EDITING;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            case DELIVERYMEN:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                return new DeliverymanParser().parseCommand(userInput);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            case EDITING:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                if (commandWord.equals(\"exitedit\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    currentContext \u003d Context.RESTAURANT;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                return new EditingParser().parseCommand(userInput);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static void checkContext(Context nextContext) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (currentContext \u003d\u003d nextContext) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_ALREADY_IN_CONTEXT, nextContext.toLowerCaseString()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 8,
      "MackyMaguire": 11,
      "SoilingRogue": 20,
      "charliechoong": 85
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_ALL_ORDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Predicate\u003cCustomer\u003e PREDICATE_SHOW_ALL_CUSTOMERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Predicate\u003cDeliveryman\u003e PREDICATE_SHOW_ALL_DELIVERYMEN \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Predicate\u003cRestaurant\u003e PREDICATE_SHOW_ALL_RESTAURANTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook Database / Filepath methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliverymen Database / Filepath methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns the user prefs\u0027 deliverymen database file path."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Path getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Sets the user prefs\u0027 deliverymen database file path."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void setDeliverymenDatabaseFilePath(Path deliverymenDatabaseFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces deliverymen database data with the data in {@code deliverymenDatabase}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void setDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /** Returns the DeliverymenDatabase */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ReadOnlyDeliverymenDatabase getDeliverymenDatabase();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Restaurant Database / Filepath methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the user prefs\u0027 restaurant database file path."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Sets the user prefs\u0027 restaurant database file path."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setRestaurantDatabaseFilePath(Path restaurantDatabaseFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces restaurant database data with the data in {@code restaurantDatabase}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /** Returns the RestaurantDatabase */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ReadOnlyRestaurantDatabase getRestaurantDatabase();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order Database / Filepath methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns the user prefs\u0027 order book file path."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Sets the user prefs\u0027 order book file path."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void setOrderBookFilePath(Path orderBookFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces order book data with the data in {@code OrderBook}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void setOrderBook(ReadOnlyOrderBook orderBook);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /** Returns the OrderBook */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    ReadOnlyOrderBook getOrderBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /** Tells the model that a command was run and the text of the command */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void notifyChange(String commandText);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /** Returns whether there are actions to undo */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "etlow"
        },
        "content": "    boolean hasUndo();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /** Returns whether there are actions to redo */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "etlow"
        },
        "content": "    boolean hasRedo();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /** Undoes an action */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "etlow"
        },
        "content": "    String undo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /** Redoes an action */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "etlow"
        },
        "content": "    String redo();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Universal methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Sets current context of the system."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param context current context"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void setContext(Context context);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Context getContext();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the address book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    boolean hasCustomer(Customer customer);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Deletes the given customer."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The customer must exist in the address book."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void deleteCustomer(Customer target);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Adds the given customer."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code customer} must not already exist in the address book."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void addCustomer(Customer customer);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the given customer {@code target} with {@code editedCustomer}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the address"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void setCustomer(Customer target, Customer editedCustomer);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /** Returns an unmodifiable view of the filtered customer list */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Updates the filter of the filtered customer list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Restaurant methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a restaurant with the same identity as {@code restaurant} exists in the address book."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    boolean hasRestaurant(Restaurant restaurant);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Deletes the given restaurant."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant must exist in the address book."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void deleteRestaurant(Restaurant target);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Adds the given restaurant."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code restaurant} must not already exist in the address book."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void addRestaurant(Restaurant restaurant);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the given restaurant {@code target} with {@code editedRestaurant}."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code target} must exist in the restaurant database."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * in the restaurant database."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setRestaurant(Restaurant target, Restaurant editedRestaurant);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void setEditingRestaurant(Restaurant editingRestaurant);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /** Returns an unmodifiable view of the filtered restaurant list */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getFilteredRestaurantList();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /** Returns an unmodifiable view of the editing restaurant list */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getEditingRestaurantList();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Updates the filter of the filtered restaurant list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void updateFilteredRestaurantList(Predicate\u003cRestaurant\u003e predicate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void updateEditingRestaurantList(Predicate\u003cRestaurant\u003e predicate);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliveryman Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered deliverymen list */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if a deliveryman with the same identity as {@code deliveryman} exists in the deliveryman book."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    boolean hasDeliveryman(Deliveryman deliveryman);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Adds the given customer."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code customer} must not already exist in the address book."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void addDeliveryman(Deliveryman deliveryman);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Deletes the given customer."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The customer must exist in the address book."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void deleteDeliveryman(Deliveryman target);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns a list of all the currently available deliverymen."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    List\u003cDeliveryman\u003e listAvailableDeliverymen();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns a list of all the currently unavailable deliverymen."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void listUnavailableDeliverymen();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces the given deliveryman {@code target} with {@code editedDeliveryman}."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code target} must exist in the deliverymen database."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The deliveryman identity of {@code editedDeliveryman} must not be the same as another existing deliveryman"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * in the deliverymen database."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void setDeliveryman(Deliveryman target, Deliveryman editedDeliveryman);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void updateFilteredDeliverymenList(Predicate\u003cDeliveryman\u003e predicate);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if an order with the same identity as {@code order} exists in the address book."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    boolean hasOrder(Order order);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Deletes the given order."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order must exist in the address book."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void deleteOrder(Order target);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Adds the given order."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code order} must not already exist in the address book."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void addOrder(Order order);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces the given order {@code target} with {@code editedOrder}."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the address book."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void setOrder(Order target, Order editedOrder);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /** Returns an unmodifiable view of the filtered order list */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 15,
      "ryantay232": 36,
      "MackyMaguire": 179,
      "SoilingRogue": 53,
      "charliechoong": 77
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.OrderBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final OrderBook orderBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final CustomerDatabase customerDatabase;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final DeliverymenDatabase deliverymenDatabase;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final RestaurantDatabase restaurantDatabase;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final FilteredList\u003cOrder\u003e filteredOrders;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final FilteredList\u003cCustomer\u003e filteredCustomers;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final FilteredList\u003cDeliveryman\u003e filteredDeliverymen;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final FilteredList\u003cRestaurant\u003e filteredRestaurants;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final FilteredList\u003cRestaurant\u003e editingRestaurant;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final UndoHistory\u003cData\u003e undoHistory;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Context context;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                        ReadOnlyCustomerDatabase customerDatabase,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                        ReadOnlyDeliverymenDatabase deliverymenDatabase,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        ReadOnlyRestaurantDatabase restaurantDatabase,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                        ReadOnlyOrderBook orderBook,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireAllNonNull(addressBook, customerDatabase, deliverymenDatabase, restaurantDatabase, orderBook, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customerDatabase \u003d new CustomerDatabase(customerDatabase);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymenDatabase \u003d new DeliverymenDatabase(deliverymenDatabase);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurantDatabase \u003d new RestaurantDatabase(restaurantDatabase);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orderBook \u003d new OrderBook(orderBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        filteredCustomers \u003d new FilteredList\u003c\u003e(this.customerDatabase.getCustomerList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        filteredDeliverymen \u003d new FilteredList\u003c\u003e(this.deliverymenDatabase.getDeliverymenList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        filteredRestaurants \u003d new FilteredList\u003c\u003e(this.restaurantDatabase.getRestaurantList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingRestaurant \u003d new FilteredList\u003c\u003e(this.restaurantDatabase.getEditingRestaurantList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        filteredOrders \u003d new FilteredList\u003c\u003e(this.orderBook.getOrderList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "etlow"
        },
        "content": "        undoHistory \u003d new UndoHistory\u003c\u003e(new Data(this));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        context \u003d Context.GLOBAL;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this(new AddressBook(), new CustomerDatabase(), new DeliverymenDatabase(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                new RestaurantDatabase(), new OrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Universal Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Sets current context of the system."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param context current context"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setContext(Context context) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.context \u003d context;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Context getContext() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return context;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customerDatabase.hasCustomer(customer);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void deleteCustomer(Customer target) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerDatabase.removeCustomer(target);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void addCustomer(Customer customer) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerDatabase.addCustomer(customer);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerDatabase.setCustomer(target, editedCustomer);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Restaurant Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getRestaurantDatabaseFilePath() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return userPrefs.getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurantDatabaseFilePath(Path restaurantDatabaseFilePath) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurantDatabaseFilePath);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        userPrefs.setRestaurantDatabaseFilePath(restaurantDatabaseFilePath);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurantDatabase.resetData(restaurantDatabase);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ReadOnlyRestaurantDatabase getRestaurantDatabase() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabase;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean hasRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurant);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabase.hasRestaurant(restaurant);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void deleteRestaurant(Restaurant target) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantDatabase.removeRestaurant(target);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void addRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantDatabase.addRestaurant(restaurant);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        updateFilteredRestaurantList(PREDICATE_SHOW_ALL_RESTAURANTS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(target, editedRestaurant);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantDatabase.setRestaurant(target, editedRestaurant);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setEditingRestaurant(Restaurant editingRestaurant) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(editingRestaurant);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ArrayList\u003cRestaurant\u003e list \u003d new ArrayList\u003cRestaurant\u003e();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        list.add(editingRestaurant);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantDatabase.setEditingRestaurant(list);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliveryman Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Path getDeliverymenDatabaseFilePath() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return userPrefs.getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymenDatabaseFilePath(Path deliverymenDatabaseFilePath) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(deliverymenDatabaseFilePath);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        userPrefs.setDeliverymenDatabaseFilePath(deliverymenDatabaseFilePath);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymenDatabase.resetData(deliverymenDatabase);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ReadOnlyDeliverymenDatabase getDeliverymenDatabase() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabase;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void deleteDeliveryman(Deliveryman target) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenDatabase.removeDeliveryman(target);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void addDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenDatabase.addDeliveryman(deliveryman);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        updateFilteredDeliverymenList(PREDICATE_SHOW_ALL_DELIVERYMEN);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean hasDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(deliveryman);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabase.hasDeliveryman(deliveryman);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public List\u003cDeliveryman\u003e listAvailableDeliverymen() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabase.listAvailableMen();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void listUnavailableDeliverymen() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenDatabase.listUnavailableMen();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliveryman(Deliveryman target, Deliveryman editedDeliveryman) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireAllNonNull(target, editedDeliveryman);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenDatabase.setDeliveryman(target, editedDeliveryman);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return userPrefs.getOrderBookFilePath();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setOrderBookFilePath(Path orderBookFilePath) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(orderBookFilePath);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        userPrefs.setOrderBookFilePath(orderBookFilePath);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrderBook(ReadOnlyOrderBook orderBook) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orderBook.resetData(orderBook);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public ReadOnlyOrderBook getOrderBook() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderBook.hasOrder(order);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void deleteOrder(Order order) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orderBook.removeOrder(order);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void addOrder(Order order) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orderBook.addOrder(order);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orderBook.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "etlow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public void notifyChange(String commandText) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "etlow"
        },
        "content": "        undoHistory.notifyChange(commandText, new Data(this));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean hasUndo() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return undoHistory.hasUndo();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean hasRedo() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return undoHistory.hasRedo();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public String undo() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "etlow"
        },
        "content": "        UndoHistory\u003cData\u003e.State state \u003d undoHistory.undo();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "etlow"
        },
        "content": "        setData(state.getData());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return state.getSubsequentCause();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public String redo() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "etlow"
        },
        "content": "        UndoHistory\u003cData\u003e.State state \u003d undoHistory.redo();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "etlow"
        },
        "content": "        setData(state.getData());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return state.getCause();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private void setData(Data data) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "etlow"
        },
        "content": "        setAddressBook(data.addressBook);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        setDeliverymenDatabase(data.deliverymenDatabase);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "etlow"
        },
        "content": "        setRestaurantDatabase(data.restaurantDatabase);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "etlow"
        },
        "content": "        setOrderBook(data.orderBook);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Customer} backed by the internal list of"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return filteredCustomers;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return filteredDeliverymen;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getFilteredRestaurantList() {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return filteredRestaurants;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getEditingRestaurantList() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return editingRestaurant;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return filteredOrders;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        filteredOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        filteredCustomers.setPredicate(predicate);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void updateFilteredDeliverymenList(Predicate\u003cDeliveryman\u003e predicate) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        filteredDeliverymen.setPredicate(predicate);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void updateFilteredRestaurantList(Predicate\u003cRestaurant\u003e predicate) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        filteredRestaurants.setPredicate(predicate);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void updateEditingRestaurantList(Predicate\u003cRestaurant\u003e predicate) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingRestaurant.setPredicate(predicate);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Wrapper class for data stored in a model."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static class Data {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private final AddressBook addressBook;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        private final DeliverymenDatabase deliverymenDatabase;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private final RestaurantDatabase restaurantDatabase;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private final OrderBook orderBook;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "etlow"
        },
        "content": "        public Data(Model model) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "etlow"
        },
        "content": "            addressBook \u003d new AddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenDatabase \u003d new DeliverymenDatabase(model.getDeliverymenDatabase());"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "etlow"
        },
        "content": "            restaurantDatabase \u003d new RestaurantDatabase(model.getRestaurantDatabase());"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "etlow"
        },
        "content": "            orderBook \u003d new OrderBook(model.getOrderBook());"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "etlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "etlow"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "etlow"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "etlow"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "etlow"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "etlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "etlow"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "etlow"
        },
        "content": "            if (!(obj instanceof Data)) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "etlow"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "etlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "etlow"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "etlow"
        },
        "content": "            Data other \u003d (Data) obj;"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    \u0026\u0026 deliverymenDatabase.equals(other.deliverymenDatabase)"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "etlow"
        },
        "content": "                    \u0026\u0026 restaurantDatabase.equals(other.restaurantDatabase)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "etlow"
        },
        "content": "                    \u0026\u0026 orderBook.equals(other.orderBook);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 73,
      "ryantay232": 53,
      "MackyMaguire": 274,
      "SoilingRogue": 52,
      "charliechoong": 83
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof seedu.deliverymans.model.Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 value.equals(((seedu.deliverymans.model.Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 53
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Path getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Path getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 2,
      "MackyMaguire": 18,
      "SoilingRogue": 2,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/UndoHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Tracks history of an object for undo and redo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": " * @param \u003cT\u003e Type of the object to track."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "class UndoHistory\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private List\u003cState\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private int current;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "    UndoHistory(T addressBook) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "        history.add(new State(null, addressBook));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Notifies this undo history that the object may have been changed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * An entry in the history is only added if the object is not equal to the previous object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * according to its equals method."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param name Name of the action changing the object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param addressBook New version of the object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void notifyChange(String name, T addressBook) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!addressBook.equals(history.get(current).getData())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "            if (hasRedo()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "                history.subList(current + 1, history.size()).clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "            history.get(current).subsequentCause \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "            current++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "            history.add(new State(name, addressBook));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "    boolean hasUndo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return current !\u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "    boolean hasRedo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return current !\u003d history.size() - 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "    State undo() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": "        current--;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return history.get(current);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "    State redo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etlow"
        },
        "content": "        current++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return history.get(current);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Wrapper for the action causing the change to the object, the subsequent action, and the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * object itself at this state."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etlow"
        },
        "content": "    class State {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private String cause;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private String subsequentCause;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private T data;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etlow"
        },
        "content": "        private State(String cause, T data) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etlow"
        },
        "content": "            this.cause \u003d cause;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etlow"
        },
        "content": "            this.data \u003d data;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String getCause() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return cause;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String getSubsequentCause() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return subsequentCause;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etlow"
        },
        "content": "        public T getData() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return data;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 83
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Path customerDatabaseFilePath \u003d Paths.get(\"data\", \"customerdatabase.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Path deliverymenDatabaseFilePath \u003d Paths.get(\"data\" , \"deliverymendatabase.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Path restaurantDatabaseFilePath \u003d Paths.get(\"data\" , \"restaurantdatabase.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Path orderBookFilePath \u003d Paths.get(\"data\" , \"orderbook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        setCustomerDatabaseFilePath(newUserPrefs.getCustomerDatabaseFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        setDeliverymenDatabaseFilePath(newUserPrefs.getDeliverymenDatabaseFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        setRestaurantDatabaseFilePath(newUserPrefs.getRestaurantDatabaseFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        setOrderBookFilePath(newUserPrefs.getOrderBookFilePath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Path getCustomerDatabaseFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customerDatabaseFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomerDatabaseFilePath(Path customerDatabaseFilePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(customerDatabaseFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customerDatabaseFilePath \u003d customerDatabaseFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Path getDeliverymenDatabaseFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabaseFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymenDatabaseFilePath(Path deliverymenDatabaseFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(deliverymenDatabaseFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymenDatabaseFilePath \u003d deliverymenDatabaseFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getRestaurantDatabaseFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabaseFilePath;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurantDatabaseFilePath(Path restaurantDatabaseFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurantDatabaseFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurantDatabaseFilePath \u003d restaurantDatabaseFilePath;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderBookFilePath;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrderBookFilePath(Path orderBookFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(orderBookFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orderBookFilePath \u003d orderBookFilePath;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 11,
      "MackyMaguire": 98,
      "SoilingRogue": 11,
      "charliechoong": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 3,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 84,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 146,
      "charliechoong": 3
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 59
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Remark remark, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "SoilingRogue": 10,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/person/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "charliechoong": 32
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 3,
      "SoilingRogue": 1,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/addressbook/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.addressbook.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/customer/Customer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Represents a Customer in the system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class Customer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Set\u003cOrder\u003e orders \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Customer(Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void addOrder(Order order) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        orders.add(order);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean isSameCustomer(Customer otherCustomer) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (otherCustomer \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return otherCustomer !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 otherCustomer.getPhone().equals(getPhone());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!(other instanceof Customer)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Customer otherCustomer \u003d (Customer) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 otherCustomer.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 otherCustomer.getTags().equals(getTags());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return Objects.hash(name, phone, tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(getPhone().toString())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 107,
      "MackyMaguire": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/customer/UniqueCustomerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.exceptions.CustomerNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.exceptions.DuplicateCustomerException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Unique list of customers"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class UniqueCustomerList implements Iterable\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if the list contains an equivalent customer as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean contains(Customer toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCustomer);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Adds a customer to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * The customer must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void add(Customer toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Replaces the customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CustomerNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!target.isSameCustomer(editedCustomer) \u0026\u0026 contains(editedCustomer)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        internalList.set(index, editedCustomer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void remove(Customer toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new CustomerNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomers(UniqueCustomerList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomers(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireAllNonNull(customers);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!customersAreUnique(customers)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        internalList.setAll(customers);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ObservableList\u003cCustomer\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Iterator\u003cCustomer\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                || (other instanceof UniqueCustomerList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCustomerList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private boolean customersAreUnique(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (int i \u003d 0; i \u003c customers.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            for (int j \u003d i + 1; j \u003c customers.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                if (customers.get(i).isSameCustomer(customers.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 126,
      "MackyMaguire": 3
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/customer/exceptions/CustomerNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Signals that the operation is unable to find the specified customer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 6
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/customer/exceptions/DuplicateCustomerException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Signals that the operation will result in duplicate Customers (Customers are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class DuplicateCustomerException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public DuplicateCustomerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        super(\"Operation would result in duplicate customers\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/CustomerDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.UniqueCustomerList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Wraps all Customer data at the customer-database level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Duplicates are not allowed (by .isSameCustomer comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerDatabase implements ReadOnlyCustomerDatabase {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final UniqueCustomerList customers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customers \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerDatabase() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Creates a CustomerDatabase using the Customers in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerDatabase(ReadOnlyCustomerDatabase toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomers(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customers.setCustomers(customers);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Resets the existing data of this {@code CustomerDatabase} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void resetData(ReadOnlyCustomerDatabase newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        setCustomers(newData.getCustomerList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    //// customer-level operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the customer database."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customers.contains(customer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Adds a customer to the customer database."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * The customer must not already exist in the customer database."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void addCustomer(Customer c) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customers.add(c);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Replaces the given customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code target} must exist in the customer database."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the customer"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * database."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(editedCustomer);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customers.setCustomer(target, editedCustomer);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Removes {@code key} from this {@code CustomerDatabase}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * {@code key} must exist in the customer database."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void removeCustomer(Customer key) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customers.remove(key);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customers.asUnmodifiableObservableList().size() + \" customers\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getCustomerList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                || (other instanceof CustomerDatabase"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 customers.equals(((CustomerDatabase) other).customers));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customers.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 112
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/DeliverymenDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.StatusManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.UniqueDeliverymanList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Wraps all Deliverymen data at the deliverymen-database level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Duplicates are not allowed (by .isSameDeliveryman comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymenDatabase implements ReadOnlyDeliverymenDatabase {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final UniqueDeliverymanList deliverymen;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final StatusManager statusManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymen \u003d new UniqueDeliverymanList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager \u003d new StatusManager(deliverymen);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymenDatabase() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Creates a DeliverymenDatabase using the Deliverymen in the {@code toBeCopied}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymenDatabase(ReadOnlyDeliverymenDatabase toBeCopied) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces the contents of the deliverymen list with {@code deliverymen}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code deliverymen} must not contain duplicate deliverymen."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymen(List\u003cDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymen.setDeliverymen(deliverymen);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Resets the existing data of this {@code DeliverymenDatabase} with {@code newData}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void resetData(ReadOnlyDeliverymenDatabase newData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        setDeliverymen(newData.getDeliverymenList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //// deliverymen-level operations"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if a deliveryman with the same identity as {@code deliveryman} exists in the deliverymen database."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean hasDeliveryman(Deliveryman man) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(man);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymen.contains(man);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Adds a deliveryman to the deliverymen database."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The deliveryman must not already exist in the deliverymen database."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void addDeliveryman(Deliveryman man) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymen.add(man);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        //statusManager.updateStatusOf(man,\"UNAVAILABLE\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Lists all the available deliverymen;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public List\u003cDeliveryman\u003e listAvailableMen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return statusManager.listAvailableMen();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Lists all the unavailable deliverymen."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void listUnavailableMen() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager.listUnavailableMen();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces the given deliveryman {@code target} in the list with {@code editedDeliveryman}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code target} must exist in the deliveryman database."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The customer identity of {@code editedDeliveryman} must not be the same as another existing deliveryman in the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * deliverymen database."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliveryman(Deliveryman target, Deliveryman editedDeliveryman) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(editedDeliveryman);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymen.setDeliveryman(target, editedDeliveryman);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Removes {@code key} from this {@code DeliverymenDatabase}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code key} must exist in the deliverymen database."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void removeDeliveryman(Deliveryman key) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymen.remove(key);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces the current status of a deliveryman."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setStatusOf(Deliveryman target, String newStatus) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        statusManager.updateStatusOf(target, newStatus);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymen.asUnmodifiableObservableList().size() + \" deliverymen\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getDeliverymenList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymen.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof DeliverymenDatabase"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 deliverymen.equals(((DeliverymenDatabase) other).deliverymen));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymen.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 137
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/OrderBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.UniqueOrderList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Wraps all data at the order database level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Duplicates are not allowed (by .isSameOrder comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class OrderBook implements ReadOnlyOrderBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final UniqueOrderList orders;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orders \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public OrderBook() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public OrderBook(ReadOnlyOrderBook toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces the contents of the order list with {@code orders}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code orders} must not contain duplicate orderss."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orders.setOrders(orders);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void resetData(ReadOnlyOrderBook newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        setOrders(newData.getOrderList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if an order with the same identity as {@code order} exists in the address book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orders.contains(order);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Adds an order to the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order must not already exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void addOrder(Order o) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orders.add(o);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces the given order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order identity of {@code editedorder} must not be the same as another existing order in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orders.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void removeOrder(Order key) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orders.remove(key);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                || (other instanceof OrderBook // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 orders.equals(((OrderBook) other).orders));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orders.hashCode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 103
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/ReadOnlyCustomerDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Unmodifiable view of a customer database"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public interface ReadOnlyCustomerDatabase {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns an unmodifiable view of the customers list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * This list will not contain any duplicate customers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    ObservableList\u003cCustomer\u003e getCustomerList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 16,
      "MackyMaguire": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/ReadOnlyDeliverymenDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Unmodifiable view of the all info regarding deliverymen."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public interface ReadOnlyDeliverymenDatabase {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns an unmodifiable view of the deliverymen list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * This list will not contain any duplicate delieverymen."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getDeliverymenList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 15
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/ReadOnlyOrderBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Unmodifiable view of an order book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public interface ReadOnlyOrderBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns an unmodifiable view of the orders list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * This list will not contain any duplicate orders."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    ObservableList\u003cOrder\u003e getOrderList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 16
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/ReadOnlyRestaurantDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Unmodifiable view of a restaurant database"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public interface ReadOnlyRestaurantDatabase {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns an unmodifiable view of the restaurants list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * This list will not contain any duplicate restaurants."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getRestaurantList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    ObservableList\u003cRestaurant\u003e getEditingRestaurantList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 19
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/database/RestaurantDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.UniqueRestaurantList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Wraps all data at the restaurant database level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Duplicates are not allowed (by .isSameRestaurant comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class RestaurantDatabase implements ReadOnlyRestaurantDatabase {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final UniqueRestaurantList restaurants;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final UniqueRestaurantList editingRestaurant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurants \u003d new UniqueRestaurantList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingRestaurant \u003d new UniqueRestaurantList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public RestaurantDatabase() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Creates an RestaurantDatabase using the Restaurants in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public RestaurantDatabase(ReadOnlyRestaurantDatabase toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the contents of the restaurant list with {@code restaurants}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code restaurants} must not contain duplicate restaurants."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurants(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurants.setRestaurants(restaurants);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setEditingRestaurant(List\u003cRestaurant\u003e editingRestaurant) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.editingRestaurant.setRestaurants(editingRestaurant);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Resets the existing data of this {@code RestaurantDatabase} with {@code newData}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void resetData(ReadOnlyRestaurantDatabase newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        setRestaurants(newData.getRestaurantList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        setEditingRestaurant(newData.getEditingRestaurantList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //// restaurant-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a restaurant with the same identity as {@code restaurant} exists in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean hasRestaurant(Restaurant restaurant) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurant);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurants.contains(restaurant);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Adds a restaurant to the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void addRestaurant(Restaurant r) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        restaurants.add(r);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the given restaurant {@code target} in the list with {@code editedRestaurant}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(editedRestaurant);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurants.setRestaurant(target, editedRestaurant);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Removes {@code key} from this {@code RestaurantDatabase}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void removeRestaurant(Restaurant key) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurants.remove(key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getRestaurantList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurants.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e getEditingRestaurantList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return editingRestaurant.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurants.asUnmodifiableObservableList().size() + \" restaurants\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof RestaurantDatabase // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 restaurants.equals(((RestaurantDatabase) other).restaurants)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 editingRestaurant.equals(((RestaurantDatabase) other).editingRestaurant));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Objects.hash(restaurants, editingRestaurant);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 2,
      "MackyMaguire": 131
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/DeliveryHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Represents the delivery history of a deliveryman."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliveryHistory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 8
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/Deliveryman.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatus.StatusTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Represents a deliveryman"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Allow deliveryman to update status? or admin is responsible for that when order is complete?"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class Deliveryman {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final DeliveryHistory deliveryHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private StatusTag status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Deliveryman(Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireAllNonNull(name, phone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        status \u003d new StatusTag(\"UNAVAILABLE\"); // editing field will affect status"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliveryHistory \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setStatusTo(StatusTag status) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    } // this class should have all attributes as final?"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatusTag getStatus() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean isSameDeliveryman(Deliveryman otherDeliveryman) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (otherDeliveryman \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return otherDeliveryman !\u003d null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 otherDeliveryman.getName().equals(getName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 otherDeliveryman.getPhone().equals(getPhone());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if both persons have the same identity. Data fields need not be same."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!(other instanceof Deliveryman)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Deliveryman otherPerson \u003d (Deliveryman) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return Objects.hash(name, phone, tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .append(getPhone().toString())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 117
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/StatusManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "// import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.deliverymanstatus.UniqueStatusList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * A list that primarily focuses on the status of the deliverymen."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Handles the statuses of the deliverymen."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Issues related to the current statuses of the deliverymen are directed here."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Not allowed to edit information regarding personal info of deliverymen."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class StatusManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //private ObservableList\u003cDeliveryman\u003e statusList \u003d SortedList\u003cDeliveryman\u003e(null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final UniqueDeliverymanList deliverymen;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final UniqueStatusList statuses;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private ObservableList\u003cDeliveryman\u003e availableMen;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private ObservableList\u003cDeliveryman\u003e unavailableMen;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private ObservableList\u003cDeliveryman\u003e deliveringMen;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatusManager(UniqueDeliverymanList deliverymenList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymen \u003d deliverymenList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.statuses \u003d new UniqueStatusList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void updateStatusOf(Deliveryman deliveryman, String strStatus) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        removePreviousStatus(deliveryman);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        assignStatusTagTo(deliveryman, strStatus);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces the status tag of a deliveryman with another one."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void assignStatusTagTo(Deliveryman deliveryman, String strStatus) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (strStatus) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"AVAILABLE\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliveryman.setStatusTo(statuses.getAvailableTag());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            availableMen.add(deliveryman);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"UNAVAILABLE\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliveryman.setStatusTo(statuses.getUnavailableTag());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            unavailableMen.add(deliveryman);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"DELIVERING\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliveryman.setStatusTo(statuses.getDeliveringTag());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliveringMen.add(deliveryman);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void removePreviousStatus(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        switch (deliveryman.getStatus().getDescription()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"AVAILABLE\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            availableMen.remove(deliveryman);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"UNAVAILABLE\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            unavailableMen.remove(deliveryman);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case \"DELIVERING\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliveringMen.remove(deliveryman);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Lists all the deliverymen with their respective statuses."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void listAll() {}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns a list of all available deliverymen."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public List\u003cDeliveryman\u003e listAvailableMen() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return availableMen;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns a list of all unavailable deliverymen."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public List\u003cDeliveryman\u003e listUnavailableMen() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return unavailableMen;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns a list of all delivering deliverymen."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public List\u003cDeliveryman\u003e listDeliveringMen() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliveringMen;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 106
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/UniqueDeliverymanList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.DeliverymanNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.exceptions.DuplicateDeliverymanException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * A unique list of deliverymen that does not allow for duplicate deliverymen."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class UniqueDeliverymanList implements Iterable\u003cDeliveryman\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final ObservableList\u003cDeliveryman\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final ObservableList\u003cDeliveryman\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if the list contains an equivalent deliveryman as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean contains(Deliveryman toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeliveryman);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Adds a deliveryman to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The deliveryman must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void add(Deliveryman toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DuplicateDeliverymanException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliveryman(Deliveryman target, Deliveryman editedDeliveryman) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(editedDeliveryman);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DeliverymanNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!target.isSameDeliveryman(editedDeliveryman) \u0026\u0026 contains(editedDeliveryman)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DuplicateDeliverymanException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        internalList.set(index, editedDeliveryman);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Removes the equivalent deliveryman from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * The deliveryman must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void remove(Deliveryman toRemove) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DeliverymanNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymen(UniqueDeliverymanList replacement) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Replaces the contents of this list with {@code deliverymen}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * {@code deliverymen} must not contain duplicate deliverymen."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void setDeliverymen(List\u003cDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireAllNonNull(deliverymen);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!deliverymenAreUnique(deliverymen)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DuplicateDeliverymanException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        internalList.setAll(deliverymen);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Iterator\u003cDeliveryman\u003e iterator() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                || (other instanceof UniqueDeliverymanList // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDeliverymanList) other).internalList));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns true if {@code deliverymen} contains only unique deliverymen."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private boolean deliverymenAreUnique(List\u003cDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (int i \u003d 0; i \u003c deliverymen.size() - 1; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c deliverymen.size(); j++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                if (deliverymen.get(i).isSameDeliveryman(deliverymen.get(j))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 124
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/deliverymanstatus/StatusTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.deliverymanstatus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Represents the current status of a deliveryman."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class StatusTag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatusTag(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 21
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/deliverymanstatus/UniqueStatusList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.deliverymanstatus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * A list that contains 3 status tags."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class UniqueStatusList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final StatusTag availableTag \u003d new StatusTag(\"AVAILABLE\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final StatusTag unavailableTag \u003d new StatusTag(\"UNAVAILABLE\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final StatusTag deliveringTag \u003d new StatusTag(\"DELIVERING\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Lists all the deliverymen with their respective statuses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatusTag getAvailableTag() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return availableTag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatusTag getUnavailableTag() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return unavailableTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public StatusTag getDeliveringTag() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliveringTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 26
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/exceptions/DeliverymanNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Signals that the operation is unable to find the specified customer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 6
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/deliveryman/exceptions/DuplicateDeliverymanException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.model.deliveryman.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Signals that the operation will result in duplicate Deliverymen (Deliverymen are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DuplicateDeliverymanException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DuplicateDeliverymanException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        super(\"Operation would result in duplicate deliverymen\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/food/Food.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Represents a Food in a restaurant."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String PRICE_CONSTRAINTS \u003d \"Price should not be negative\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String PREP_CONSTRAINTS \u003d \"Preparation time should not be negative\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final BigDecimal price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final Duration prepTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructs a {@code Food}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param name A valid food name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param price A non-negative price."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param prepTime A non-negative preparation time in seconds."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @param tags Tags of the food."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Food(Name name, BigDecimal price, Duration prepTime, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "        requireAllNonNull(name, price, prepTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "        checkArgument(isValidPrice(price), PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "        checkArgument(isValidPrepTime(prepTime), PREP_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.prepTime \u003d prepTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.tags \u003d Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Food(Name name, BigDecimal price, Duration prepTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(name, price, prepTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        checkArgument(isValidPrice(price), PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        checkArgument(isValidPrepTime(prepTime), PREP_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.prepTime \u003d prepTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Returns true if a given number is a valid price."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static boolean isValidPrice(BigDecimal test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return test.compareTo(BigDecimal.ZERO) \u003e\u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Returns true if a given duration is a valid preparation time."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static boolean isValidPrepTime(Duration prepTime) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return !prepTime.isNegative();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public BigDecimal getPrice() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Duration getPrepTime() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return prepTime;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public String getDisplayPrice() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return NumberFormat.getCurrencyInstance(Locale.US).format(getPrice());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public String getDisplayPrepTime() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "etlow"
        },
        "content": "        long seconds \u003d getPrepTime().getSeconds();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return seconds / 60 + \"m \" + seconds % 60 + \"s\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if both food are of the same name."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * This defines a weaker notion of equality between two food."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean isSameFood(Food otherFood) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (otherFood \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherFood.getName().equals(getName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!(obj instanceof Food)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Food other \u003d (Food) obj;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return name.equals(other.name)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u0026\u0026 price.compareTo(other.price) \u003d\u003d 0"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u0026\u0026 prepTime \u003d\u003d other.prepTime"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u0026\u0026 tags.equals(other.tags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return Objects.hash(name, price, prepTime, tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "etlow"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "etlow"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .append(getDisplayPrice())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .append(\" Preparation time: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .append(getDisplayPrepTime())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "etlow"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 88,
      "ryantay232": 34,
      "MackyMaguire": 29
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/food/exceptions/DuplicateFoodException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Signals that the operation will result in duplicate Food (Food are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(\"Operation would result in duplicate food\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/food/exceptions/FoodNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Signals that the operation is unable to find the specified food."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 7
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/location/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Represents a location in the map."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private int x;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private int y;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "    Location(String locationName, int xCoordinate, int yCoordinate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "        name \u003d locationName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "        x \u003d xCoordinate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "        y \u003d yCoordinate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "    int getX() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return x;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "    int getY() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return y;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 32,
      "MackyMaguire": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/location/LocationMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Contains all locations."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class LocationMap {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \"Location should only be one of the following locations\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static List\u003cLocation\u003e locations \u003d new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "            new Location(\"Jurong\", 1, 1),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Location(\"Tuas\", 1, 1),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Location(\"Woodlands\", 1, 1),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Location(\"Bishan\", 1, 1),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Location(\"City\", 1, 1),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "            new Location(\"Marina\", 2, 0),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "            new Location(\"Changi\", 3, 1)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static Optional\u003cLocation\u003e getLocation(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String query \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return locations.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .filter(location -\u003e location.getName().toLowerCase().equals(query))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .findAny();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return getLocation(test).isPresent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public double getDistanceBetween(Location a, Location b) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "        double xDistance \u003d b.getX() - a.getX();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "        double yDistance \u003d b.getY() - a.getY();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return Math.sqrt(xDistance * xDistance + yDistance * yDistance);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 27,
      "MackyMaguire": 17
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/order/Order.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Represents an Order in the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class Order {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public final String orderName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String customer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String restaurant;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String deliveryman;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final Set\u003cFood\u003e foods \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructs a {@code Order}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param customer   The customer who made the order."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param restaurant The restaurant..."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Order(String orderName, String customer, String restaurant, String deliveryman) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // requireNonNull(orderName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // checkArgument(isValidOrderName(orderName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.orderName \u003d orderName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.restaurant \u003d restaurant;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.deliveryman \u003d deliveryman;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        foods.add(food);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void addFood(Set\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public String getOrderName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public String getCustomer() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public String getDeliveryman() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return deliveryman;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns an immutable food set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Set\u003cFood\u003e getFood() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return Collections.unmodifiableSet(foods);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public String getRestaurant() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return restaurant;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void completeOrder() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        isCompleted \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static boolean isValidOrderName(String test) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean isSameOrder(Order otherOrder) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (otherOrder \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return otherOrder !\u003d null"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getCustomer().equals(getCustomer())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getDeliveryman().equals(getDeliveryman())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getRestaurant().equals(getRestaurant())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getFood().equals(getFood());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if both orders have the same identity and data fields."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * This defines a stronger notion of equality between two orders."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        // return other \u003d\u003d this || (other instanceof Order \u0026\u0026 orderName.equals(((Order) other).orderName));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!(other instanceof Order)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Order otherOrder \u003d (Order) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return otherOrder.getCustomer().equals(getCustomer())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getDeliveryman().equals(getDeliveryman())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getFood().equals(getFood())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 otherOrder.getRestaurant().equals(getRestaurant());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return Objects.hash(customer, restaurant, deliveryman, foods);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        builder.append(\" Customer: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(getCustomer())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(\" Restaurant: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(getRestaurant())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(\" Deliveryman: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(getDeliveryman())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                .append(\" Food: \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        getFood().forEach(builder::append);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 36,
      "MackyMaguire": 2,
      "SoilingRogue": 107,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/order/UniqueOrderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Unique list of orders."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class UniqueOrderList implements Iterable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if the list contains an equivalent order as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean contains(Order toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameOrder);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Adds an order to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void add(Order toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces the order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!target.isSameOrder(editedOrder) \u0026\u0026 contains(editedOrder)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        internalList.set(index, editedOrder);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Removes the equivalent order from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * The order must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void remove(Order toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrders(UniqueOrderList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireAllNonNull(orders);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!ordersAreUnique(orders)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        internalList.setAll(orders);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public ObservableList\u003cOrder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Iterator\u003cOrder\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                || (other instanceof UniqueOrderList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueOrderList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private boolean ordersAreUnique(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (int i \u003d 0; i \u003c orders.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            for (int j \u003d i + 1; j \u003c orders.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                if (orders.get(i).isSameOrder(orders.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 129
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/order/exceptions/DuplicateOrderException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Signals that the operation will result in duplicate Customers (Customers are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class DuplicateOrderException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public DuplicateOrderException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        super(\"Operation would result in duplicate orders\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/order/exceptions/OrderNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Signals that the operation is unable to find the specified customer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class OrderNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 7
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/restaurant/Rating.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a Rating"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \"Rating should be an integer from 0 to 5\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public final String rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public final double ratingValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.ratingValue \u003d Double.parseDouble(rating);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if a given string is a valid rating."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static boolean isValidRating(String rating) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        boolean matchRegex \u003d rating.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (matchRegex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            double value \u003d Double.parseDouble(rating);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            boolean matchRange \u003d (value \u003c\u003d 5) \u0026\u0026 (value \u003e\u003d 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return matchRange;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public double getRatingValue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return this.ratingValue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 rating.equals(((Rating) other).rating)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return rating.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 64
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/restaurant/Restaurant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a Restaurant"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class Restaurant {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private int numberOfRatings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Set\u003cOrder\u003e orders \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final ObservableList\u003cFood\u003e menu \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Restaurant(Name name, Location location, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(name, location, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.numberOfRatings \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d new Rating(\"0\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Restaurant(Name name, Location location, Set\u003cTag\u003e tags, ObservableList\u003cFood\u003e menu) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(name, location, tags, menu);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.numberOfRatings \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d new Rating(\"0\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.menu.addAll(menu);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Restaurant(Name name, Location location, Rating rating, Set\u003cTag\u003e tags, ObservableList\u003cFood\u003e menu) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(name, location, rating, numberOfRatings, tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.numberOfRatings \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.menu.addAll(menu);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Set\u003cOrder\u003e getOrders() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return orders;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public ObservableList\u003cFood\u003e getMenu() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Adds the food item to the restaurant\u0027s menu"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void addFood(Food toAdd) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        boolean isDuplicate \u003d menu.stream().anyMatch(toAdd::isSameFood);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (isDuplicate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        menu.add(toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Removes the food time from the restaurant\u0027s menu"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void removeFood(Food toRemove) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(toRemove);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!menu.remove(toRemove)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean isSameRestaurant(Restaurant otherRestaurant) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (otherRestaurant \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return otherRestaurant !\u003d null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getName().equals(getName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!(other instanceof Restaurant)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Restaurant otherRestaurant \u003d (Restaurant) other;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return otherRestaurant.getName().equals(getName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getRating().equals(getRating())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getTags().equals(getTags())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getOrders().equals(getOrders())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 otherRestaurant.getMenu().equals(getMenu());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Objects.hash(name, location, rating, tags, orders, menu);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .append(\" Rating: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .append(getRating())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 4,
      "MackyMaguire": 168
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/restaurant/UniqueRestaurantList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static seedu.deliverymans.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.exceptions.DuplicateRestaurantException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.exceptions.RestaurantNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * A list of restaurants that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * A restaurant is considered unique by comparing using {@code Restaurant#isSameRestaurant(Restaurant)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * adding and updating of restaurants uses Restaurant#isSameRestaurant(Restaurant) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * that the restaurant being added or updated is unique in terms of identity in the UniqueRestaurantList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * However, the removal of a person uses Restaurant#equals(Object) so as to ensure that the restaurant with exactly the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * @see Restaurant#isSameRestaurant(Restaurant)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class UniqueRestaurantList implements Iterable\u003cRestaurant\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final ObservableList\u003cRestaurant\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final ObservableList\u003cRestaurant\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if the list contains an equivalent restaurant as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean contains(Restaurant toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRestaurant);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Adds a restaurant to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void add(Restaurant toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the restaurant {@code target} in the list with {@code editedRestaurant}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant identity of {@code editedRestaurant} must not be the same as another existing restaurant"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurant(Restaurant target, Restaurant editedRestaurant) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(target, editedRestaurant);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new RestaurantNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!target.isSameRestaurant(editedRestaurant) \u0026\u0026 contains(editedRestaurant)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        internalList.set(index, editedRestaurant);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Removes the equivalent restaurant from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * The restaurant must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void remove(Restaurant toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new RestaurantNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurants(UniqueRestaurantList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Replaces the contents of this list with {@code restaurants}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * {@code restaurants} must not contain duplicate restaurants."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setRestaurants(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireAllNonNull(restaurants);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!restaurantsAreUnique(restaurants)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new DuplicateRestaurantException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        internalList.setAll(restaurants);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public ObservableList\u003cRestaurant\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Iterator\u003cRestaurant\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                || (other instanceof UniqueRestaurantList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRestaurantList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns true if {@code restaurants} contains only unique restaurants."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private boolean restaurantsAreUnique(List\u003cRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (int i \u003d 0; i \u003c restaurants.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            for (int j \u003d i + 1; j \u003c restaurants.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                if (restaurants.get(i).isSameRestaurant(restaurants.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 139
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/restaurant/exceptions/DuplicateRestaurantException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.restaurant.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Signals that the operation will result in duplicate Restaurants (Restaurants are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class DuplicateRestaurantException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public DuplicateRestaurantException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(\"Operation would result in duplicate restaurants\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 11
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/restaurant/exceptions/RestaurantNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.restaurant.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Signals that the operation is unable to find the specified restaurant."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class RestaurantNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 7
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.OrderBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.LocationMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static Customer[] getSampleCustomers() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new Customer[]{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Customer(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), getTagSet(\"FastFood\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Customer(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), getTagSet(\"Indian\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Customer(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), getTagSet(\"Bar\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Customer(new Name(\"David Li\"), new Phone(\"91031282\"), getTagSet(\"Japanese\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            new Customer(new Name(\"Ifran Ibrahim\"), new Phone(\"92492021\"), getTagSet(\"Barbeque\"))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static Restaurant[] getSampleRestaurants() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new Restaurant[]{"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Restaurant(new Name(\"KFC\"), LocationMap.getLocation(\"Jurong\").get(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    getTagSet(\"FastFood\", \"Western\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    getMenu(new Food(new Name(\"Ginger Burger\"), new BigDecimal(6.5), Duration.ofSeconds(60)),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Shrooms Burger\"), new BigDecimal(5), Duration.ofSeconds(60)),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Fish Fillet Burger\"), new BigDecimal(5.5), Duration.ofSeconds(60)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"2 Piece Chicken\"), new BigDecimal(7.95), Duration.ofSeconds(120)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"3 Piece Chicken\"), new BigDecimal(10.95), Duration.ofSeconds(120)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Chicken Nuggets\"), new BigDecimal(3), Duration.ofSeconds(30)))),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Restaurant(new Name(\"Prata House\"), LocationMap.getLocation(\"Bishan\").get(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    getTagSet(\"Indian\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    getMenu(new Food(new Name(\"Plain Prata\"), new BigDecimal(0.7), Duration.ofSeconds(60)),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Egg Prata\"), new BigDecimal(1), Duration.ofSeconds(60)),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Cheese Prata\"), new BigDecimal(1.2), Duration.ofSeconds(60)),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Prata Bomb\"), new BigDecimal(2), Duration.ofSeconds(120)),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Curry Fountain\"), new BigDecimal(2), Duration.ofSeconds(120)),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Curry Waterfall\"), new BigDecimal(3), Duration.ofSeconds(120)))),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Restaurant(new Name(\"SkyBar Bar and Restaurant\"), LocationMap.getLocation(\"Marina\").get(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    getTagSet(\"Bar\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    getMenu(new Food(new Name(\"Duck Confit\"), new BigDecimal(10), Duration.ofSeconds(300)),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Foie gras\"), new BigDecimal(15), Duration.ofSeconds(300)),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Buffalo Wings\"), new BigDecimal(15), Duration.ofSeconds(350)),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Rhinoceros Pizza\"), new BigDecimal(25), Duration.ofSeconds(600)),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Hippo Teeth\"), new BigDecimal(30.5), Duration.ofSeconds(120)),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Rat with Caviar\"), new BigDecimal(49.9), Duration.ofSeconds(120)))),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Restaurant(new Name(\"IchiNiSan Ramen\"), LocationMap.getLocation(\"City\").get(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    getTagSet(\"Japanese\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    getMenu(new Food(new Name(\"Ramen A\"), new BigDecimal(10), Duration.ofSeconds(300)),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Ramen B\"), new BigDecimal(10), Duration.ofSeconds(300)),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Ramen C\"), new BigDecimal(10), Duration.ofSeconds(300)),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Ramen D\"), new BigDecimal(15), Duration.ofSeconds(300)),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Ramen E\"), new BigDecimal(15), Duration.ofSeconds(300)),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"Ramen F\"), new BigDecimal(15), Duration.ofSeconds(300)))),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            new Restaurant(new Name(\"Piggys Self Barbeque\"), LocationMap.getLocation(\"Woodlands\").get(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    getTagSet(\"Barbeque\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    getMenu(new Food(new Name(\"BBQ Head\"), new BigDecimal(10), Duration.ofSeconds(1000)),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"BBQ Shank\"), new BigDecimal(15), Duration.ofSeconds(600)),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"BBQ Trotter\"), new BigDecimal(15), Duration.ofSeconds(600)),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"BBQ Nails\"), new BigDecimal(25), Duration.ofSeconds(300)),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"BBQ Butt\"), new BigDecimal(30.5), Duration.ofSeconds(1200)),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                            new Food(new Name(\"BBQ Tail\"), new BigDecimal(49.9), Duration.ofSeconds(300))))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        };"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static Order[] getSampleOrders() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new Order[]{"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            new Order(\"o1\", \"Alex Yeoh\", \"87438807\", \"friends\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            new Order(\"o2\", \"Bernice Yu\", \"99272758\", \"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            new Order(\"o3\", \"Charlotte Oliveiro\", \"93210283\", \"charlotte@example.com\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            new Order(\"o4\", \"David Li\", \"91031282\", \"lidavid@example.com\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            new Order(\"o5\", \"Irfan Ibrahim\", \"92492021\", \"irfan@example.com\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            new Order(\"o6\", \"Roy Balakrishnan\", \"92624417\", \"royb@example.com\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        };"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static Deliveryman[] getSampleDeliverymen() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new Deliveryman[]{"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Damith\"), new Phone(\"99999999\"), getTagSet(\"inactive\")),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Donald Trump\"), new Phone(\"91234567\"), getTagSet(\"buff\", \"powerful\")),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Charlie Choong\"), new Phone(\"98887146\"), getTagSet(\"active\")),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Low ee ter\"), new Phone(\"99367862\"), getTagSet(\"inactive\")),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            new Deliveryman(new Name(\"Yuen Jun rong \"), new Phone(\"12345678\"), getTagSet(\"veryactive\"))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static ReadOnlyCustomerDatabase getSampleCustomerDatabase() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        CustomerDatabase sampleCd \u003d new CustomerDatabase();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (Customer sampleCustomer : getSampleCustomers()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            sampleCd.addCustomer(sampleCustomer);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return sampleCd;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static ReadOnlyDeliverymenDatabase getSampleDeliverymenDatabase() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        DeliverymenDatabase sampleDd \u003d new DeliverymenDatabase();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (Deliveryman sampleDeliveryman: getSampleDeliverymen()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            sampleDd.addDeliveryman(sampleDeliveryman);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return sampleDd;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static ReadOnlyRestaurantDatabase getSampleRestaurantDatabase() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        RestaurantDatabase sampleRd \u003d new RestaurantDatabase();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (Restaurant sampleRestaurant : getSampleRestaurants()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            sampleRd.addRestaurant(sampleRestaurant);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return sampleRd;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static ReadOnlyOrderBook getSampleOrderBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        OrderBook sampleOb \u003d new OrderBook();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (Order sampleOrder : getSampleOrders()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            sampleOb.addOrder(sampleOrder);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return sampleOb;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static ObservableList\u003cFood\u003e getMenu(Food... foods) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        ObservableList\u003cFood\u003e menu \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        menu.addAll(foods);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 1,
      "ryantay232": 21,
      "MackyMaguire": 117,
      "SoilingRogue": 20,
      "charliechoong": 23
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a storage for {@link seedu.deliverymans.model.addressbook.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 3,
      "-": 41,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/JsonAdaptedOrder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Jackson-friendly version of {@link Order}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "class JsonAdaptedOrder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String customer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String restaurant;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final String deliveryman;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    //    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e(); //implement food class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Constructs a {@code JsonAdaptedOrder} with the given order details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public JsonAdaptedOrder(@JsonProperty(\"customer\") String customer,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                            @JsonProperty(\"restaurant\") String restaurant,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                            @JsonProperty(\"deliveryman\") String deliveryman) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.restaurant \u003d restaurant;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.deliveryman \u003d deliveryman;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Converts a given {@code Order} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public JsonAdaptedOrder(Order source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        customer \u003d source.getCustomer();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        restaurant \u003d source.getRestaurant();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        deliveryman \u003d source.getDeliveryman();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Converts this Jackson-friendly adapted order object into the model\u0027s {@code Order} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Order toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!Name.isValidName(customer)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        final Name modelName \u003d new Name(customer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (restaurant \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    Restaurant.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!Phone.isValidPhone(restaurant)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        final Phone modelPhone \u003d new Phone(restaurant);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (deliveryman \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                    Deliveryman.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!Email.isValidEmail(deliveryman)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        final Email modelEmail \u003d new Email(deliveryman);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return new Order(\"\", customer, restaurant, deliveryman);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 81
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final List\u003cJsonAdaptedPersonTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                             @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedPersonTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .map(JsonAdaptedPersonTag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (JsonAdaptedPersonTag tag : tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelRemark, modelTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 4,
      "MackyMaguire": 7,
      "-": 85,
      "charliechoong": 10
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/JsonAdaptedPersonTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.addressbook.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class JsonAdaptedPersonTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonAdaptedPersonTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonAdaptedPersonTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 48
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 2,
      "MackyMaguire": 1,
      "-": 44,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 73,
      "charliechoong": 5
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/JsonOrderDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.storage.order.OrderDatabaseStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public class JsonOrderDatabaseStorage implements OrderDatabaseStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonOrderDatabaseStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public JsonOrderDatabaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return readOrderBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Similar to {@link #readOrderBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        Optional\u003cJsonSerializableOrderDatabase\u003e jsonOrderBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                filePath, JsonSerializableOrderDatabase.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        if (!jsonOrderBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            return Optional.of(jsonOrderBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        saveOrderBook(orderBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Similar to {@link #saveOrderBook(ReadOnlyOrderBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(orderBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableOrderDatabase(orderBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 81
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 4,
      "-": 55,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/JsonSerializableOrderDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.OrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "@JsonRootName(value \u003d \"orderdatabase\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "class JsonSerializableOrderDatabase {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"Orders list contains duplicate order(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private final List\u003cJsonAdaptedOrder\u003e orders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Constructs a {@code JsonSerializableOrderBook} with the given orders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public JsonSerializableOrderDatabase(@JsonProperty(\"orders\") List\u003cJsonAdaptedOrder\u003e orders) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orders.addAll(orders);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Converts a given {@code ReadOnlyOrderBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableOrderBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public JsonSerializableOrderDatabase(ReadOnlyOrderBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orders.addAll(source.getOrderList().stream().map(JsonAdaptedOrder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Converts this aorder book into the model\u0027s {@code OrderBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public OrderBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        OrderBook orderBook \u003d new OrderBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        for (JsonAdaptedOrder jsonAdaptedOrder : orders) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            Order order \u003d jsonAdaptedOrder.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            if (orderBook.hasOrder(order)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            orderBook.addOrder(order);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "SoilingRogue": 58
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "MackyMaguire": 1,
      "-": 42,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.storage.customer.CustomerDatabaseStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.storage.deliveryman.DeliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.storage.order.OrderDatabaseStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.restaurant.RestaurantDatabaseStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public interface Storage extends AddressBookStorage, CustomerDatabaseStorage, DeliverymenDatabaseStorage,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        RestaurantDatabaseStorage, OrderDatabaseStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Path getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Path getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase) throws IOException;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void saveRestaurantDatabase(ReadOnlyRestaurantDatabase addressBook) throws IOException;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 3,
      "ryantay232": 9,
      "MackyMaguire": 14,
      "SoilingRogue": 8,
      "-": 26,
      "charliechoong": 13
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.storage.customer.CustomerDatabaseStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.storage.deliveryman.DeliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.storage.order.OrderDatabaseStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.restaurant.RestaurantDatabaseStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private CustomerDatabaseStorage customerDatabaseStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private DeliverymenDatabaseStorage deliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private RestaurantDatabaseStorage restaurantDatabaseStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private OrderDatabaseStorage orderDatabaseStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, CustomerDatabaseStorage customerDatabaseStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                          DeliverymenDatabaseStorage deliverymenDatabaseStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                          RestaurantDatabaseStorage restaurantDatabaseStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "                          OrderDatabaseStorage orderDatabaseStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customerDatabaseStorage \u003d customerDatabaseStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymenDatabaseStorage \u003d deliverymenDatabaseStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurantDatabaseStorage \u003d restaurantDatabaseStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        this.orderDatabaseStorage \u003d orderDatabaseStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CustomerDatabase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Path getCustomerDatabaseFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customerDatabaseStorage.getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return readCustomerDatabase(customerDatabaseStorage.getCustomerDatabaseFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return customerDatabaseStorage.readCustomerDatabase(filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        saveCustomerDatabase(customerDatabase, customerDatabaseStorage.getCustomerDatabaseFilePath());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerDatabaseStorage.saveCustomerDatabase(customerDatabase, filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RestaurantDatabase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getRestaurantDatabaseFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabaseStorage.getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return readRestaurantDatabase(restaurantDatabaseStorage.getRestaurantDatabaseFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase(Path filePath)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabaseStorage.readRestaurantDatabase(filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase) throws IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        saveRestaurantDatabase(restaurantDatabase, restaurantDatabaseStorage.getRestaurantDatabaseFilePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase, Path filePath)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantDatabaseStorage.saveRestaurantDatabase(restaurantDatabase, filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d OrderBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderDatabaseStorage.getOrderBookFilePath();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return readOrderBook(orderDatabaseStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        return orderDatabaseStorage.readOrderBook(filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        saveOrderBook(orderBook, orderDatabaseStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        orderDatabaseStorage.saveOrderBook(orderBook, filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DeliverymenDatabase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Path getDeliverymenDatabaseFilePath() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabaseStorage.getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return readDeliverymenDatabase(deliverymenDatabaseStorage.getDeliverymenDatabaseFilePath());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase(Path filePath)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabaseStorage.readDeliverymenDatabase(filePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase) throws IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        saveDeliverymenDatabase(deliverymenDatabase, deliverymenDatabaseStorage.getDeliverymenDatabaseFilePath());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase, Path filePath)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymenDatabaseStorage.saveDeliverymenDatabase(deliverymenDatabase, filePath);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "ryantay232": 37,
      "MackyMaguire": 38,
      "SoilingRogue": 32,
      "-": 68,
      "charliechoong": 38
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Represents a storage for {@link seedu.deliverymans.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Saves the given {@link seedu.deliverymans.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 4,
      "MackyMaguire": 1,
      "-": 30,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/customer/CustomerDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.storage.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Represents a storage for {@link seedu.deliverymans.model.database.CustomerDatabase}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public interface CustomerDatabaseStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Path getCustomerDatabaseFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns CustomerDatabase data as a {@link ReadOnlyCustomerDatabase}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @see #getCustomerDatabaseFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Saves the given {@link ReadOnlyCustomerDatabase} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param customerDatabase cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @see #saveCustomerDatabase(ReadOnlyCustomerDatabase)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 49
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/customer/JsonAdaptedCustomer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.storage.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Jackson-friendly version of {@link Customer}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class JsonAdaptedCustomer {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Customer\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonAdaptedCustomer(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts a given {@code Customer} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonAdaptedCustomer(Customer source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Customer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final List\u003cTag\u003e customerTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            customerTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(customerTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return new Customer(modelName, modelPhone, modelTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 85
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/customer/JsonCustomerDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.storage.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * A class to access CustomerDatabase data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class JsonCustomerDatabaseStorage implements CustomerDatabaseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCustomerDatabaseStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonCustomerDatabaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Path getCustomerDatabaseFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return readCustomerDatabase(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Similar to {@link #readCustomerDatabase()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public Optional\u003cReadOnlyCustomerDatabase\u003e readCustomerDatabase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        Optional\u003cJsonSerializableCustomerDatabase\u003e jsonCustomerDatabase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                filePath, JsonSerializableCustomerDatabase.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!jsonCustomerDatabase.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return Optional.of(jsonCustomerDatabase.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        saveCustomerDatabase(customerDatabase, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Similar to {@link #saveCustomerDatabase(ReadOnlyCustomerDatabase)}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public void saveCustomerDatabase(ReadOnlyCustomerDatabase customerDatabase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(customerDatabase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCustomerDatabase(customerDatabase), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 79
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/customer/JsonSerializableCustomerDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.storage.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyCustomerDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * An Immutable CustomerDatabase that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "@JsonRootName(value \u003d \"customerdatabase\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class JsonSerializableCustomerDatabase {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"Customers list contains duplicate customer(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final List\u003cJsonAdaptedCustomer\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Constructs a {@code JsonSerializableCustomerDatabase} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonSerializableCustomerDatabase(@JsonProperty(\"persons\") List\u003cJsonAdaptedCustomer\u003e customers) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customers.addAll(customers);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts a given {@code ReadOnlyCustomerDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCustomerDatabase}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public JsonSerializableCustomerDatabase(ReadOnlyCustomerDatabase source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customers.addAll(source.getCustomerList().stream().map(JsonAdaptedCustomer::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Converts this address book into the model\u0027s {@code CustomerDatabase} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerDatabase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        CustomerDatabase addressBook \u003d new CustomerDatabase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        for (JsonAdaptedCustomer jsonAdaptedCustomer : customers) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            Customer customer \u003d jsonAdaptedCustomer.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            if (addressBook.hasCustomer(customer)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            addressBook.addCustomer(customer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 61
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/deliveryman/DeliverymenDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Represents a storage for {@link seedu.deliverymans.model.database.DeliverymenDatabase}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public interface DeliverymenDatabaseStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Path getDeliverymenDatabaseFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Returns DeliverymenDatabase data as a {@link ReadOnlyDeliverymenDatabase}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @see #getDeliverymenDatabaseFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase(Path filePath)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Saves the given {@link ReadOnlyDeliverymenDatabase} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param deliverymenDatabase cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @see #saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 46
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/deliveryman/JsonAdaptedDeliveryman.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Jackson-friendly version of {@link Deliveryman}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class JsonAdaptedDeliveryman {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deliveryman\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeliveryman} with the given deliveryman details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public JsonAdaptedDeliveryman(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                                  @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Converts a given {@code Deliveryman} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public JsonAdaptedDeliveryman(Deliveryman source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Converts this Jackson-friendly adapted deliveryman object into the model\u0027s {@code Deliveryman} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted deliveryman."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Deliveryman toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final List\u003cTag\u003e deliverymanTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymanTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(deliverymanTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return new Deliveryman(modelName, modelPhone, modelTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 86
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/deliveryman/JsonDeliverymenDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * A class to access Deliverymen database data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class JsonDeliverymenDatabaseStorage implements DeliverymenDatabaseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonDeliverymenDatabaseStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public JsonDeliverymenDatabaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Path getDeliverymenDatabaseFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return readDeliverymenDatabase(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Similar to {@link #readDeliverymenDatabase()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public Optional\u003cReadOnlyDeliverymenDatabase\u003e readDeliverymenDatabase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        Optional\u003cJsonSerializableDeliverymenDatabase\u003e jsonDeliverymenDatabase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                filePath, JsonSerializableDeliverymenDatabase.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!jsonDeliverymenDatabase.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return Optional.of(jsonDeliverymenDatabase.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        saveDeliverymenDatabase(deliverymenDatabase, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public void saveDeliverymenDatabase(ReadOnlyDeliverymenDatabase deliverymenDatabase, Path filePath) throws"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(deliverymenDatabase);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableDeliverymenDatabase(deliverymenDatabase), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 77
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/deliveryman/JsonSerializableDeliverymenDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyDeliverymenDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * An Immutable DeliverymenDatabase that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "@JsonRootName(value \u003d \"deliverymendatabase\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class JsonSerializableDeliverymenDatabase {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERYMEN \u003d \"Deliverymen list contains duplicate deliverymen.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final List\u003cJsonAdaptedDeliveryman\u003e deliverymen \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Constructs a {@code JsonSerializableDeliverymenDatabase} with the given deliverymen."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public JsonSerializableDeliverymenDatabase(@JsonProperty(\"deliverymen\") List\u003cJsonAdaptedDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliverymen.addAll(deliverymen);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Converts a given {@code ReadOnlyDeliverymenDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableDeliverymenDatabase}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public JsonSerializableDeliverymenDatabase(ReadOnlyDeliverymenDatabase source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymen.addAll(source.getDeliverymenList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .map(JsonAdaptedDeliveryman::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Converts this deliverymen book into the model\u0027s {@code DeliverymenDatabase} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymenDatabase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        DeliverymenDatabase deliverymenDatabase \u003d new DeliverymenDatabase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        for (JsonAdaptedDeliveryman jsonAdaptedDeliveryman : deliverymen) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            Deliveryman deliveryman \u003d jsonAdaptedDeliveryman.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (deliverymenDatabase.hasDeliveryman(deliveryman)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DELIVERYMEN);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymenDatabase.addDeliveryman(deliveryman);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return deliverymenDatabase;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 64
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/order/OrderDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "package seedu.deliverymans.storage.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.OrderBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a storage for {@link OrderBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "public interface OrderDatabaseStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns OrderBook data as a {@link ReadOnlyOrderBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @see #getOrderBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    Optional\u003cReadOnlyOrderBook\u003e readOrderBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * Saves the given {@link ReadOnlyOrderBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @param orderBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     * @see #saveOrderBook(ReadOnlyOrderBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    void saveOrderBook(ReadOnlyOrderBook orderBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 3,
      "SoilingRogue": 43
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/JsonAdaptedFood.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final long prepTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final List\u003cseedu.deliverymans.storage.JsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given {@code foodName}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": "                           @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "                           @JsonProperty(\"prep\") long prepTime,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cseedu.deliverymans.storage.JsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.prepTime \u003d prepTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etlow"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etlow"
        },
        "content": "        price \u003d source.getPrice().toPlainString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etlow"
        },
        "content": "        prepTime \u003d source.getPrepTime().getSeconds();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etlow"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .map(seedu.deliverymans.storage.JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etlow"
        },
        "content": "        final List\u003cTag\u003e foodTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etlow"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etlow"
        },
        "content": "            foodTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etlow"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"price\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "etlow"
        },
        "content": "        final BigDecimal modelPrice \u003d ParserUtil.parsePrice(price);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!Food.isValidPrice(modelPrice)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new IllegalValueException(Food.PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "etlow"
        },
        "content": "        final Duration modelPrepTime \u003d Duration.ofSeconds(prepTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!Food.isValidPrepTime(modelPrepTime)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "etlow"
        },
        "content": "            throw new IllegalValueException(Food.PREP_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "etlow"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(foodTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new Food(modelName, modelPrice, modelPrepTime, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 85,
      "MackyMaguire": 5,
      "SoilingRogue": 6
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/JsonAdaptedRestaurant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.Location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.location.LocationMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Rating;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Jackson-friendly version of {@link Restaurant}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class JsonAdaptedRestaurant {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Restaurant\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final String rating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e menu \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    //private final List\u003cJsonAdaptedOrder\u003e order \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Constructs a {@code JsonAdaptedRestaurant} with the given restaurant details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonAdaptedRestaurant(@JsonProperty(\"name\") String name, @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                             @JsonProperty(\"rating\") String rating,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                             @JsonProperty(\"menu\") List\u003cJsonAdaptedFood\u003e menu) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (menu !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            this.menu.addAll(menu);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Converts a given {@code Restaurant} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonAdaptedRestaurant(Restaurant source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        location \u003d source.getLocation().name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        rating \u003d source.getRating().rating;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        menu.addAll(source.getMenu().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Converts this Jackson-friendly adapted restaurant object into the model\u0027s {@code Restaurant} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted restaurant."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Restaurant toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final List\u003cTag\u003e restaurantTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final List\u003cFood\u003e restaurantMenu \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (JsonAdaptedFood food : menu) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantMenu.add(food.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!LocationMap.isValidLocation(location)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new IllegalValueException(LocationMap.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final Location modelLocation \u003d LocationMap.getLocation(location).get();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final Rating modelRating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(restaurantTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        final ObservableList\u003cFood\u003e modelMenu \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        modelMenu.addAll(restaurantMenu);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return new Restaurant(modelName, modelLocation, modelRating, modelTags, modelMenu);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 118
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/JsonRestaurantDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * A class to access RestaurantDatabase data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class JsonRestaurantDatabaseStorage implements RestaurantDatabaseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRestaurantDatabaseStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonRestaurantDatabaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Path getRestaurantDatabaseFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return readRestaurantDatabase(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Similar to {@link #readRestaurantDatabase()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        Optional\u003cJsonSerializableRestaurantDatabase\u003e jsonRestaurantDatabase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                filePath, JsonSerializableRestaurantDatabase.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!jsonRestaurantDatabase.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return Optional.of(jsonRestaurantDatabase.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        saveRestaurantDatabase(restaurantDatabase, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Similar to {@link #saveRestaurantDatabase(ReadOnlyRestaurantDatabase)}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase, Path filePath)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(restaurantDatabase);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRestaurantDatabase(restaurantDatabase), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 79
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/JsonSerializableRestaurantDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * An Immutable RestaurantDatabase that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "@JsonRootName(value \u003d \"restaurantdatabase\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class JsonSerializableRestaurantDatabase {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESTAURANT \u003d \"Restaurants list contains duplicate restaurant(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final List\u003cJsonAdaptedRestaurant\u003e restaurants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Constructs a {@code JsonSerializableRestaurantDatabase} with the given restaurants."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonSerializableRestaurantDatabase(@JsonProperty(\"restaurants\") List\u003cJsonAdaptedRestaurant\u003e restaurants) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurants.addAll(restaurants);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Converts a given {@code ReadOnlyRestaurantDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRestaurantDatabase}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public JsonSerializableRestaurantDatabase(ReadOnlyRestaurantDatabase source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurants.addAll(source.getRestaurantList()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .map(JsonAdaptedRestaurant::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Converts this address book into the model\u0027s {@code RestaurantDatabase} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public RestaurantDatabase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        RestaurantDatabase restaurantDatabase \u003d new RestaurantDatabase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        for (JsonAdaptedRestaurant jsonAdaptedRestaurant : restaurants) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Restaurant restaurant \u003d jsonAdaptedRestaurant.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (restaurantDatabase.hasRestaurant(restaurant)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RESTAURANT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantDatabase.addRestaurant(restaurant);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return restaurantDatabase;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 61
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/storage/restaurant/RestaurantDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.storage.restaurant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.database.ReadOnlyRestaurantDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Represents a storage for {@link seedu.deliverymans.model.database.RestaurantDatabase}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public interface RestaurantDatabaseStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Path getRestaurantDatabaseFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Returns RestaurantDatabase data as a {@link ReadOnlyRestaurantDatabase}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @see #getRestaurantDatabaseFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    Optional\u003cReadOnlyRestaurantDatabase\u003e readRestaurantDatabase(Path filePath)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Saves the given {@link ReadOnlyRestaurantDatabase} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @param restaurantDatabase cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @see #saveRestaurantDatabase(ReadOnlyRestaurantDatabase)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    void saveRestaurantDatabase(ReadOnlyRestaurantDatabase restaurantDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 46
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etlow"
        },
        "content": "         * @see seedu.deliverymans.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 4,
      "MackyMaguire": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/CustomerCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * An UI component that displays information of a {@code Customer}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static final String FXML \u003d \"CustomerListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public final Customer customer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerCard(Customer customer, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        name.setText(customer.getName().fullName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        phone.setText(customer.getPhone().value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customer.getTags().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        if (!(other instanceof CustomerCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        CustomerCard card \u003d (CustomerCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u0026\u0026 customer.equals(card.customer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 60,
      "charliechoong": 1
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/CustomerListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " * Panel containing the list of customers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "public class CustomerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private static final String FXML \u003d \"CustomerListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CustomerListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private ListView\u003cCustomer\u003e customerListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    public CustomerListPanel(ObservableList\u003cCustomer\u003e customerList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerListView.setItems(customerList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        customerListView.setCellFactory(listView -\u003e new CustomerListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code CustomerCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    class CustomerListViewCell extends ListCell\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        protected void updateItem(Customer customer, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            super.updateItem(customer, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (empty || customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                setGraphic(new CustomerCard(customer, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 42,
      "charliechoong": 4
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/DeliverymanCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * An UI component that displays information of a {@code Deliveryman}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String FXML \u003d \"DeliverymanListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public final Deliveryman deliveryman;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    //private Label statusTag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanCard(Deliveryman deliveryman, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        this.deliveryman \u003d deliveryman;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        name.setText(deliveryman.getName().fullName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        phone.setText(deliveryman.getPhone().value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliveryman.getTags().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        //statusTag.setText(deliveryman.getStatus().getDescription());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        if (!(other instanceof DeliverymanCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        DeliverymanCard card \u003d (DeliverymanCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u0026\u0026 deliveryman.equals(card.deliveryman);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 64
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/DeliverymanListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " * Panel containing the list of deliverymen."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "public class DeliverymanListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private static final String FXML \u003d \"DeliverymanListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeliverymanListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private ListView\u003cDeliveryman\u003e deliverymanListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    public DeliverymanListPanel(ObservableList\u003cDeliveryman\u003e deliverymanList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymanListView.setItems(deliverymanList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        deliverymanListView.setCellFactory(listView -\u003e new DeliverymanListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Deliveryman} using a {@code DeliverymanCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    class DeliverymanListViewCell extends ListCell\u003cDeliveryman\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        protected void updateItem(Deliveryman deliveryman, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            super.updateItem(deliveryman, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            if (empty || deliveryman \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                setGraphic(new DeliverymanCard(deliveryman, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 45
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/FoodCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final Food food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "        price.setText(food.getDisplayPrice());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "        food.getTags().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etlow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etlow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etlow"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 68
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/FoodListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": " * Panel containing the list of food."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private static final String FXML \u003d \"FoodListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private ListView\u003cFood\u003e foodListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public FoodListPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "        foodListView.setItems(foodList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "        foodListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Food} using a {@code FoodCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "    class FoodListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "                setGraphic(new FoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 46
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "SoilingRogue": 1,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "import seedu.deliverymans.logic.parser.universal.Context;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Context currentContext;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private CustomerListPanel customerListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    private DeliverymanListPanel deliverymanListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private RestaurantListPanel restaurantListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private FoodListPanel foodListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private StatisticsDisplay statisticsDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private StackPane editingRestaurantPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private StackPane statisticsPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.currentContext \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        //personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        //listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     * Changes context of the system depending on {@code context}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    private void changeContext(Context context) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingRestaurantPlaceholder.setPrefHeight(0);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        editingRestaurantPlaceholder.setMinHeight(0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (statisticsPlaceholder.getChildren().size() \u003e 0) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            statisticsPlaceholder.getChildren().remove(0);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        switch (context) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case CUSTOMER:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            customerListPanel \u003d new CustomerListPanel(logic.getFilteredCustomerList());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            listPanelPlaceholder.getChildren().add(customerListPanel.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        case DELIVERYMEN:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            deliverymanListPanel \u003d new DeliverymanListPanel(logic.getFilteredDeliverymenList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            listPanelPlaceholder.getChildren().add(deliverymanListPanel.getRoot());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        case RESTAURANT:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantListPanel \u003d new RestaurantListPanel(logic.getFilteredRestaurantList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            listPanelPlaceholder.getChildren().add(restaurantListPanel.getRoot());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        case EDITING:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Restaurant editing \u003d logic.getEditingRestaurantList().get(0);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            editingRestaurantPlaceholder.setPrefHeight(125.0);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            editingRestaurantPlaceholder.setMinHeight(125.0);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            restaurantListPanel \u003d new RestaurantListPanel(logic.getEditingRestaurantList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            editingRestaurantPlaceholder.getChildren().add(restaurantListPanel.getRoot());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            foodListPanel \u003d new FoodListPanel(editing.getMenu());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            listPanelPlaceholder.getChildren().add(foodListPanel.getRoot());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            statisticsDisplay \u003d new StatisticsDisplay();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            statisticsPlaceholder.getChildren().add(statisticsDisplay.getRoot());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            statisticsDisplay.setFeedbackToUser(\"THIS PART IS FOR STATISTICS\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            // to be implemented with order list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @see seedu.deliverymans.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            Context nextContext \u003d commandResult.getContext();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (nextContext !\u003d null \u0026\u0026 nextContext !\u003d currentContext) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                changeContext(nextContext);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 3,
      "ryantay232": 23,
      "MackyMaguire": 39,
      "-": 185,
      "charliechoong": 8
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "        remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "SoilingRogue": 3,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 43,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/RestaurantCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * An UI component that displays information of a {@code Restaurant}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class RestaurantCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final String FXML \u003d \"RestaurantListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public final Restaurant restaurant;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Label loc;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private Label rating;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public RestaurantCard(Restaurant restaurant, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        this.restaurant \u003d restaurant;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        name.setText(restaurant.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        loc.setText(restaurant.getLocation().name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        rating.setText(\"Rating: \" + restaurant.getRating().rating);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurant.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        if (!(other instanceof RestaurantCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        RestaurantCard card \u003d (RestaurantCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u0026\u0026 restaurant.equals(card.restaurant);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 71
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/RestaurantListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.model.restaurant.Restaurant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * Panel containing the list of restaurants."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class RestaurantListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final String FXML \u003d \"RestaurantListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RestaurantListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private ListView\u003cRestaurant\u003e restaurantListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public RestaurantListPanel(ObservableList\u003cRestaurant\u003e restaurantList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantListView.setItems(restaurantList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        restaurantListView.setCellFactory(listView -\u003e new RestaurantListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Restaurant} using a {@code RestaurantCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    class RestaurantListViewCell extends ListCell\u003cRestaurant\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        protected void updateItem(Restaurant restaurant, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            super.updateItem(restaurant, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            if (empty || restaurant \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                setGraphic(new RestaurantCard(restaurant, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 47
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/StatisticsDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " * A ui for the status bar that displays statistics."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "public class StatisticsDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private static final String FXML \u003d \"StatisticsDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    private TextArea statisticsDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public StatisticsDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        statisticsDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    public void setColor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        statisticsDisplay.setStyle(\"-fx-background-color: #963\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 31
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "import seedu.deliverymans.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 1,
      "MackyMaguire": 2,
      "-": 81,
      "charliechoong": 2
    }
  },
  {
    "path": "src/main/java/seedu/deliverymans/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "package seedu.deliverymans.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "import seedu.deliverymans.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CustomerListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 34
    }
  },
  {
    "path": "src/main/resources/view/CustomerListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantay232"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "    \u003cListView fx:id\u003d\"customerListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 8
    }
  },
  {
    "path": "src/main/resources/view/DeliverymanListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 34
    }
  },
  {
    "path": "src/main/resources/view/DeliverymanListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "charliechoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "    \u003cListView fx:id\u003d\"deliverymanListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "charliechoong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "charliechoong": 8
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "etlow": 33,
      "MackyMaguire": 1
    }
  },
  {
    "path": "src/main/resources/view/FoodListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "  \u003cListView fx:id\u003d\"foodListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "etlow": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t  \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t\u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"editingRestaurantPlaceholder\" minHeight\u003d\"0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t  \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"0\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t\u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"1\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantay232"
        },
        "content": "            \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t  \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"statisticsPlaceholder\" styleClass\u003d\"stack-pane\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                     minHeight\u003d\"300\" prefHeight\u003d\"300\" maxHeight\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t    \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\t\t\u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ryantay232": 1,
      "MackyMaguire": 17,
      "-": 57
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SoilingRogue"
        },
        "content": "            \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SoilingRogue": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/RestaurantListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cLabel fx:id\u003d\"loc\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$loc\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "            \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rating\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 35
    }
  },
  {
    "path": "src/main/resources/view/RestaurantListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "  \u003cListView fx:id\u003d\"restaurantListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003cStackPane styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatisticsDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003cStackPane styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "  \u003cTextArea fx:id\u003d\"statisticsDisplay\" editable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MackyMaguire"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "MackyMaguire": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Default remark\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "        remark \u003d personToCopy.getRemark();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.tags \u003d Arrays.stream(tags)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etlow"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etlow"
        },
        "content": "    public PersonBuilder withRemark(String address) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etlow"
        },
        "content": "        this.remark \u003d new Remark(address);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "etlow"
        },
        "content": "        return new Person(name, phone, email, remark, tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 18,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "            .withEmail(\"alice@example.com\").withPhone(\"94351253\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etlow"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etlow"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 20,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/deliverymans/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "etlow"
        },
        "content": "        ModelManager.Data expectedData \u003d new ModelManager.Data(actualModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "etlow"
        },
        "content": "        assertEquals(expectedData, new ModelManager.Data(actualModel));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 16,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/deliverymans/logic/commands/universal/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.OrderBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "class RedoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private static final String REDONE_COMMAND_TEXT \u003d \"add someone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CustomerDatabase(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": "            new DeliverymenDatabase(), new RestaurantDatabase(), new OrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void execute_hasUndo_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String expectedMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, REDONE_COMMAND_TEXT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Model updatedModel \u003d new ModelManager(getTypicalAddressBook(), new CustomerDatabase(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "                new DeliverymenDatabase(), new RestaurantDatabase(), new OrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedModel.notifyChange(REDONE_COMMAND_TEXT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedModel.undo();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), updatedModel, expectedMessage, model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void execute_noUndo_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etlow"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etlow"
        },
        "content": "        model.notifyChange(REDONE_COMMAND_TEXT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etlow"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_NOTHING_TO_REDO);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 47
    }
  },
  {
    "path": "src/test/java/seedu/deliverymans/logic/commands/universal/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.logic.commands.universal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etlow"
        },
        "content": "import static seedu.deliverymans.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.addressbook.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.CustomerDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.DeliverymenDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.OrderBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.model.database.RestaurantDatabase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etlow"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private static final String UNDONE_COMMAND_TEXT \u003d \"delete 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etlow"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CustomerDatabase(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etlow"
        },
        "content": "            new DeliverymenDatabase(), new RestaurantDatabase(), new OrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void execute_hasUndo_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etlow"
        },
        "content": "        String expectedMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, UNDONE_COMMAND_TEXT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "        Model updatedModel \u003d new ModelManager(getTypicalAddressBook(), new CustomerDatabase(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etlow"
        },
        "content": "                new DeliverymenDatabase(), new RestaurantDatabase(), new OrderBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etlow"
        },
        "content": "        updatedModel.notifyChange(UNDONE_COMMAND_TEXT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etlow"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), updatedModel, expectedMessage, model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etlow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etlow"
        },
        "content": "    void execute_noUndo_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etlow"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_NOTHING_TO_UNDO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 42
    }
  },
  {
    "path": "src/test/java/seedu/deliverymans/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etlow"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/deliverymans/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etlow"
        },
        "content": "package seedu.deliverymans.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etlow"
        },
        "content": "import seedu.deliverymans.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etlow": 2,
      "-": 10
    }
  }
]
