[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d NurseTraverse"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-F10-1/main[image:https://travis-ci.org/AY1920S1-CS2103-F10-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-F10-1/main[image:https://coveralls.io/repos/github/AY1920S1-CS2103-F10-1/main/badge.svg[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://www.codacy.com/manual/crazoter/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY1920S1-CS2103-F10-1/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/aa1c38779d564edd8b7ef798df508c9c[Codacy Badge]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "image::images/Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "NurseTraverse is a desktop application meant for community nurses."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "A community nurse has many things to keep in mind: the day\u0027s schedule, patient address, contact details, medications, medical conditions, allergies, ..."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "Fret not! NurseTraverse is built to help manage all the data that a community nurse might need. Let NurseTraverse handle the details, the nurse can focus on the patient."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* NurseTraverse helps to manage and store patient details, as well as scheduling information."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* User interaction takes place through a Command Line Interface (CLI) for quick user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Information is displayed on a Graphical User Interface (GUI) - important data can be easily glanced."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* [Coming in v2.0] Patient visit and todo tracking, data encryption."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* https://ay1920s1-cs2103-f10-1.github.io/main/UserGuide.html[User Guide]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* https://ay1920s1-cs2103-f10-1.github.io/main/DeveloperGuide.html[Developer Guide]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* https://ay1920s1-cs2103-f10-1.github.io/main/AboutUs.html[About Us]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* https://ay1920s1-cs2103-f10-1.github.io/main/ContactUs.html[Contact Us]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Built upon the AddressBook-Level3 project created by the https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 18,
      "crazoter": 6,
      "-": 18
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "mainClassName \u003d \u0027cs.f10.t1.nursetraverse.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.dataformat\u0027, name: \u0027jackson-dataformat-csv\u0027, version : \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    asciidoctor \u0027org.jruby:jruby-complete:9.1.8.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    archiveName \u003d \u0027nursetraverse.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u0027site-name\u0027: \u0027NurseTraverse\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-F10-1/main\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u0027site-seedu\u0027: false,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 2,
      "sandydays": 3,
      "crazoter": 4,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "NurseTraverse was developed by https://se-edu.github.io/docs/Team.html[CS2103-F10-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Lee Wei Ren Matthew"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "image::crazoter.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "{empty}[https://github.com/crazoter[github]] [\u003c\u003ccrazoter#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Role*: Team lead +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Responsibilities*:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": " - Project Management Scheduling, Tracking"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " - In charge of Visits Management (including documentation, implementation, testing and milestone management of said feature)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Ramachandran Sandhya"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "image::sandydays.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "{empty}[https://github.com/sandydays[github]] [\u003c\u003csandydays#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Role:* Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Responsibilities:* In charge of Appointment Management (including documentation, implementation, testing and milestone management of said feature)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Cheong Siu Hong"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "image::cheongsiuhong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "{empty}[http://github.com/cheongsiuhong[github]] [\u003c\u003ccheongsiuhong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Role:* Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Responsibilities:* In charge of import and export features (including documentation, implementation, testing and milestone management of said feature)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Francis Low Siu Yuan"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "image::francislow.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "{empty}[http://github.com/francislow[github]] [\u003c\u003cfrancislow#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Role:* Developer +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Responsibilities:* In charge of Autocomplete feature (including documentation, implementation, testing and milestone management of said feature)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Chao Fang How, Gabriel"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "image::gabrielchao.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "{empty}[http://github.com/gabrielchao[github]] [\u003c\u003cgabrielchao#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Role:* Developer +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Responsibilities:* In charge of `Undo` and `Redo` feature (including documentation, implementation, testing and milestone management of said feature)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "sandydays": 16,
      "crazoter": 13,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-F10-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* *Email us* : You can also reach us at mr47@u.nus.edu"
      }
    ],
    "authorContributionMap": {
      "sandydays": 1,
      "crazoter": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d NurseTraverse - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 47
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d NurseTraverse - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d Undo/Redo/History"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "include::./devguide/UndoRedoHistory.adoc[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Visits Management"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./devguide/VisitsManagement.adoc[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Appointment Management"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sandydays"
        },
        "content": "include::./devguide/AppointmentManagement.adoc[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d Import and Export"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "include::./devguide/ImportExport.adoc[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Auto-complete"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "francislow"
        },
        "content": "include::./devguide/Autocomplete.adoc[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "francislow"
        },
        "content": "* community nurse"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "francislow"
        },
        "content": "* needs to manage a significant number of homebound patients"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "francislow"
        },
        "content": "* has a need to manage patients’ profile efficiently"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "francislow"
        },
        "content": "* has flexibility in scheduling appointments"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Value proposition*: Makes managing patients’ data more orderly, efficient and tidy"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |see the next-of-kin contact (address, name, phone) associated with each patient |inform them in case of any emergency situations"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |track the addresses of my patients |I will not forget them"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |keep track of the dosages of medications of my patients |I know exactly what they need to take"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |see my schedule of appointments for a day |I know when to go where"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |see all my patients’ medications in a list |I can pack my bags in advance of each trip"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |see the medical conditions of each patient so that |I know how to care for them"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |record details (these details can be broken down) about the visit (e.g. environmental conditions, patient’s symptoms, warning signs) |I can better monitor the patient’s situation"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* * *` |user |save my data automatically after each change |data doesn’t get lost if I forgot or am not able to save after a session"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |take personal notes for each patient |I can take note of their personal quirks and needs"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |use a todo list / checklist to keep track of what I have to do when I visit a patient |I won’t forget or miss out on any important tasks when I visit them"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |I want to keep track of todos I have done |I will have documentations to  fall back on if i need them"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a manual for how to do certain tasks (e.g. clean wounds / first aid |I am better prepared in times of emergency"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a manual on medical conditions |I am better prepared to advise patients about their medical condition"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |keep a photo of each patient so I can |remember them better"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |alert or send reminders to patients to take any prescribed medication so that |they take their medication on time and regularly"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |set the level of importance to each todo |urgent matters regarding patients is taken priority of and can be taken care of first"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a list of emergency contacts |I will be able to find them easily in times of emergency"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |be able to organise patient’s paperwork (appointment letters for checkups) |my patients don’t miss their appointments"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a notification system |I will be reminded of important matters to settle"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |be able to import and export my app data patient-by-patient |I can share with other nurses or manager"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have an undo function |I don’t accidentally make irreversible changes due to my mistakes"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a pin login system |my patients’ information will be kept private"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have my patients’ information encrypted |their information is kept private and secure"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |be able to see all the patient’s information in a structured format |so that messy and complex details are presented to me in an organised manner"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have an autocomplete function |I can use the application more quickly without memorising all the commands of the application"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |have a help function |I do not need to worry about memorising all the commands of the application"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`* *` |user |assign each patient a priority number |I can keep track of who needs me the most"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`*` |user |solve the Travelling CN problem |I can save time when visiting my patients"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`*` |user |sort my patient list by priority |I can keep in mind who to visit"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "francislow"
        },
        "content": "|`*` |user |keep track of each patient’s available times |I know when I can visit them"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Use case: Add patient"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "francislow"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "francislow"
        },
        "content": "1.  User requests to add a new patient to the list"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "francislow"
        },
        "content": "2.  Application adds the patient to the list"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 1a. The one or more given parameters are invalid."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 1a1. Application shows an error message."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "francislow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Use case: View patient profile"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "francislow"
        },
        "content": "2.  Application shows a list of persons"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "francislow"
        },
        "content": "3.  User requests to view a specific patient in the list"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "francislow"
        },
        "content": "4.  Application shows the specified patient profile"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 3a. The one or more given parameters are invalid."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "francislow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Use case: Delete patient profile"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "francislow"
        },
        "content": "2.  Application shows a list of persons"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "francislow"
        },
        "content": "3.  User requests to delete a specific patient in the list"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "francislow"
        },
        "content": "4.  Application delete the specified patient profile"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 3a. The one or more given parameters are invalid."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "francislow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Use case: Take notes for a patient"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "francislow"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "francislow"
        },
        "content": "1.  User requests to open note GUI for a specific patient"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "francislow"
        },
        "content": "2.  User edit the patient’s notes"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "francislow"
        },
        "content": "3.  User request to exit note GUI"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 1a. Invalid command"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 1a1. Application shows an error message."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 3a. Invalid command"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "francislow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Use case: Adding an appointment"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "francislow"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "francislow"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "francislow"
        },
        "content": "2.  Application shows a list of persons"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "francislow"
        },
        "content": "3.  User picks one patient from the list and add appointment date and time through command line"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "francislow"
        },
        "content": "4.  Application adds user appointment"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "francislow"
        },
        "content": "* 3a. The one or more given parameters are invalid."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "francislow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "francislow"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "francislow"
        },
        "content": "+"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "francislow"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "francislow"
        },
        "content": ".  Should work on any mainstream OS as long as it has Java 11 or above installed"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "francislow"
        },
        "content": ".  Should be able to hold up to 50 patient profile without any noticeable performance issue"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "francislow"
        },
        "content": ".  Users should be able to understand how to use the system easily"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "francislow"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "francislow"
        },
        "content": ".  GUI should be straightforward and clear"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d Glossary (do along the way)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "francislow"
        },
        "content": "Define terms that are worth recording. Eg:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 2,
      "cheongsiuhong": 2,
      "sandydays": 2,
      "crazoter": 3,
      "francislow": 160,
      "-": 351
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d NurseTraverse - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 122
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d NurseTraverse - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 83
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d NurseTraverse - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 51
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d NurseTraverse - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F10-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "By: `Team AY1920S1-CS2103-F10-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "NurseTraverse is designed for community nurses who make home visits to their patients. It is a laptop app that will allow nurses to keep track of their patients\u0027 data, appointments and visits. ComNurse is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".  Download the latest `comnurse.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your NurseTraverse app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* *`pat-list`* : lists all patients"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* **`pat-add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to NurseTraverse."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* **`pat-delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d Features (as of v1.4)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Parameters are additional pieces of information required/used when running a command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Items in square brackets are *optional* e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Items that are not in square brackets are required e.g. `n/NAME` from the `pat-add` command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Due to the number of commands, each command will follow the syntax of `*ENTITY ACTION [PARAMETERS]*`. For example, if you wanted to delete a patient, you would do something like `pat-delete 3`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "//The spacing is required"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./userguide/Misc.adoc[]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./userguide/Patient.adoc[]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./userguide/Appointment.adoc[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./userguide/Visit.adoc[]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./userguide/AutoComplete.adoc[]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./userguide/DataSavingUndoRedo.adoc[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./userguide/ImportExport.adoc[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./userguide/Exiting.adoc[]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d Tutorials / How-To Guide(s) (as of v1.4)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./userguide/VisitHowTo.adoc[]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d Planned Feature(s) (coming in v2.0)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "//include::./userguide/Notification.adoc[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "//include::./userguide/MedicalCondition.adoc[]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "//include::./userguide/Medicine.adoc[]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./userguide/Security.adoc[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d FAQ"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::./userguide/Faq.adoc[]"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "crazoter": 33,
      "-": 55
    }
  },
  {
    "path": "docs/devguide/AppointmentManagement.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "The appointment class extends NurseTraverse with the following functionalities:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* Lists all appointments nurses have scheduled, including reference to patient details, appointment time, date, and duration, medication to be carried for each appointment, and additional details associated with the appointment."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* Displays appointments in the side screen with a calendar and also a list of the next earliest appointments for the day/week."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* Supports finding specific appointments by patient name or other parameters"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* Supports recurring tasks (e.g. weekly appointments)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* Allows adding, deleting, and editing of appointments"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* Sends notifications/reminders to nurses on upcoming appointments"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "All appointments are stored and managed in the `AppointmentBook`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "`Model` implements the following operations to accommodate for the `AppointmentBook`:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `Model#setStagedAppointmentBook(ReadOnlyAppointmentBook appointmentBook)` -- Replace appointment book in the Model with data from the `ReadOnlyAppointmentBook appointmentBook` passed in as argument."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `Model#replaceStagedAppointmentBook(List\u003cAppointment\u003e appointments)` -- Replace all appointments in appointment book with new appointments from the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `Model#getStagedAppointmentBook()` -- Return the current AppointmentBook."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `Model#hasAppointment(Appointment appointment)` -- Return true if an appointment with the same identity as the appointment passed in as argument exists in the appointment list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `Model#deleteAppointment(Appointment target)` -- Delete the given appointment. The appointment must exist in the appointment list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `Model#addAppointment(Appointment appointment)` -- Add the given appointment. The appointment passed in as argument must not already exist in the appointment list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `Model#setAppointment(Appointment target, Appointment editedAppointment)` -- Replace the given appointment `target` with `editedAppointment`. `target` must exist in the appointment list. The appointment identity of `editedAppointment` must not be the same as another existing appointment in the appointment list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `Model#ObservableList\u003cAppointment\u003e getStagedAppointmentList()` -- Return an unmodifiable view of the entire appointment list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `Model#FilteredList\u003cAppointment\u003e getFilteredAppointmentList()` -- Return an unmodifiable view of the filtered appointment list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `Model#void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate)` -- Update the filter of the filtered appointment list to filter by the given `predicate`. Throws `NullPointerException` if `predicate` is `null`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d\u003d Model Design Considerations"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d\u003d Logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d\u003d Logic Design Considerations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d\u003d UI"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "A list of `Appointment` s are displayed on a side pane with `appt-list` and `appt-find`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "A side pane is split into two parts, the top consisting of a calendar of the current month with the appointments marked for that month, and the bottom pane has the upcoming list of appointments for the week."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d\u003d UI Design Considerations"
      }
    ],
    "authorContributionMap": {
      "sandydays": 39
    }
  },
  {
    "path": "docs/devguide/Autocomplete.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": "The auto-complete mechanism extends NurseTraverse with 2 functionalities, word completion and word suggestions. To support word suggestions of only compatible words, several lists are created and the list in operation will be switched during runtime by `AutoCompletePanel#resetList()`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": "Given below is an example usage scenario and how the word suggestion and word completion function behaves at each step."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "Step 1:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "When the user launches the application, an instance of the object, command and prefix autocomplete word list will be initialised in `AutoCompleteStorage`(created in `AutoCompletePanel`), which implements the following operations:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "* `AutoCompleteWordStorage#getOListAllCommandWord()` — returns the observable list of command words stored"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "* `AutoCompleteWordStorage#getOListAllPrefixWord()` — returns the observable list of prefix words stored"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "* `AutoCompleteWordStorage#getOListAllObjectWord()` — returns the observable list of object words stored"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "* `AutoCompleteWordStorage#generateOListAllIndexWord(String objectName)` — generate an observable list of index words corresponding to object when called"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "The auto-complete panel will be set to object list by default."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "Step 2: Whenever user types a key in the command line, `CommandBox` will call `AutoCompletePanel#updateListView(String currentPhraseInCommandBox)`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "This will update the number of matched words with the current list and runs 3 sets of algorithms, through word list handler classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "First, `AutoCompletePanel#resetList()` will switch the current list based on what is typed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "Second, `AutoCompleteListFilter#filterList()` will filter the chosen list to only words that are compatible with previous correctly typed full words. Eg: prefix list will be filtered to only be compatible with “pat-add” user command, the words that come before prefix."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "Lastly, `AutoCompleteListUpdater#updateSuggestedWordsInList()` will update the chosen list which was filtered to fit the key that is partially typed. Eg: User typed “ad”. “add” and “add-medcon” which are both in the current list will be suggested."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Method to suggest auto-complete words"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "* **Alternative 1:** Have several lists. First word list, Second word list, etc"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "** Pros: Minimal effort in parsing of command line input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "** Cons: Auto-complete panel will be unorganised. Eg: both index 1 and prefix may be suggested instead of just all index or all prefix suggested."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": "* **Alternative 2:** Suggest full commands such as pat-edit 2 n/ t/ .. and omit any list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "** Pros: Easy to implement. No parsing required."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": "** Cons: Auto-complete panel will be chunky as all commands are suggested at the same time. User will not be guided in selecting which command to choose."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "* **Alternative 3(current choice):** Have several lists. Object/Command/Index/Prefix lists."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "** Pros: User will be guided. Very user friendly. Panel will be more organised as words are suggested in sets of the same type."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "francislow"
        },
        "content": "** Cons: Parsing of command line input can be tedious."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d\u003d Logic Design Considerations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d\u003d UI Design Considerations"
      }
    ],
    "authorContributionMap": {
      "francislow": 43
    }
  },
  {
    "path": "docs/devguide/ImportExport.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "Import and export functionality are split into three commands:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "1. `app-export`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "2. `app-import-replace`"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "3. `app-import-merge`"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d Jackson Library"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "The current import and export features are built upon the the existing `Jackson` libraries,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "in particular the `dataformat`, `databind` and `datatype` modules. Technical knowledge of the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`Jackson` library will be helpful for maintenance of feature, but is not necessary."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "However, understanding `Jackson` \u0027s `annotations` will be needed in order to extend export and import"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "functionality to cover new data fields or classes implemented in the future. They are explained"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "link:http://fasterxml.github.io/jackson-annotations/javadoc/2.7/[here]."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d Csv Processing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "All of the data processing needed for this feature can be found in the `CsvUtil` file;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "it is responsible for converting the data of `Patient` objects into a .csv friendly `String` format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "and vice versa. The actual reading and writing of .csv files is then done with existing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`FileUtil` functionality."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "The conversion of `Patient` objects to and from .csv formatted `Strings` are handled by"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "the `CsvMapper` and `CsvSchema` classes implemented in `dataformat`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* The `CsvMapper` is responsible for managing custom configurations for the conversions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "For instance, it can toggle headers with `withHeader()` and skip unknown fields with the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`IGNORE_UNKNOWN` feature, both of which are used in the feature implementation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* The `CsvSchema` object is created by a configured `CsvMapper` object and an `Object.class`,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "in this case, `Patient.class`. It dictates the scheme for how data in each column of the .csv"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "corresponds with the fields in the Object class. This schema can then be used to instantiate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "a reader or a writer object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "The following functions are implemented:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "1. `CsvUtil#writePatientsToCsv(List\u003cPatient\u003e, String)` -- Write"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "a list of `Patient` objects into a .csv file with specified `exportFileName`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "If successful, return the path of the written file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "2. `CstUtil#readPatientsFromCsv(String)` -- Read a .csv file with specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`importFileName` and return a corresponding list of `Patient` objects."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "3. `importsAreUnique(List\u003cPatient\u003e)` -- Check if the patients in a given list are unique, i.e. the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "contains no duplicate patients."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d Command Implementation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: `app-export`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "The `app-export` command works by retrieving a list of `Patient` objects from the `Model` and"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "passing it to `CsvUtil` to process and write into a .csv file. If provided with indexes, the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`app-export` feature can selectively export the `Patient` objects that correspond to the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "specified indexes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "To facilitate the selective export functionality, the following methods were implemented in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`Model` and `PatientBook`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* `Model#GetPatientsByIndexes(Set\u003cIndexes\u003e)` -- Retrieves and returns a list of `Patient` objects"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "corresponding to the provided indexes from the `PatientBook` , if the indexes are valid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* `PatientBook#GetPatientByIndex(Index)` -- Returns the `Patient` object corresponding"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "to the specified index, if the index is valid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "If indexes are not specified in the command arguments, a list of all currently existing `Patient`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "objects will be retrieved with `Model#getStagedPatientList()`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "The `app-export` command MUST be provided with a desired file name for the .csv file. The .csv"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "file will be written to `/exports/filename.csv`. Existing files will NOT be overridden and"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "thus the provided file name cannot already exist in `/exports`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "The following diagram shows how an export command works:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "image::ExportSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d ExportCommand Design Considerations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: File Overriding"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* **Alternative 1 (current choice)**: Disallow overriding, file name provided must be new"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Pros: Existing .csv files will not be accidentally overridden. Prevents potential loss of data."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Cons: Additional hassle for the user to delete files that they want to replace."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* **Alternative 2**: Allow overriding"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Pros: Conveniently replace existing, unused files."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Cons: May accidentally override and lose important data."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Illegal Characters in Data Fields"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* **Alternative 1 (current choice)**: Disallow forbidden characters"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Pros: Exported .csv files are guaranteed to be in the correct format."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Cons: Data fields cannot have commas, semi-colons, etc."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* **Alternative 2**: Allow forbidden characters"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Pros: Certain fields may be more accurately represented, i.e. addresses."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Cons: The exported csv file may be bugged, i.e. have data in the wrong columns."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "More developer work to code around detecting and escaping forbidden characters."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Import"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "The import commands work by reading a .csv file and converting it into a list of `Patient`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "objects by using `CsvUtil`. The list is then passed to `Model`. What happens next depends"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "on which variant of import is called."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "For both variants of the command, the imported list of patients CANNOT have any duplicates."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "This is ensured with `CsvUtil#importsAreUnique(List\u003cPatient\u003e)`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Command: `app-import-replace`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "The `Model` will replace all existing `Patient` data in the `PatientBook` with the data"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "of the new list of `Patient` objects. To do this, the following was implemented:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* `Model#replaceStagedPatientBook(List\u003cPatient\u003e)` -- Creates a new `PatientBook` object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "containing the `Patient` objects in the provided list. The old `PatientBook` stored in the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`Model` is then replaced with the new `PatientBook` by calling"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`Model#setStagedPatientBook(PatientBook)`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Command `app-import-merge`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "The `Model` will add all `Patient` data in the new list of `Patient` objects into the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`PatientBook`. To do this, the following was implemented:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* `Model#hasAnyPatientInGivenList(List\u003cPatient\u003e)` -- Checks if the model contains"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "any `Patient` in the given list of `Patient` objects."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* `Model#addPatients(List\u003cPatient\u003e)` -- Adds all `Patient` objects in the given list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "into the `Model`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "If the operation will result in duplicate `Patient` objects in the `PatientBook`,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "it will not be executed. This is checked by the function stated above,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`Model#hasAnyPatientInGivenList(List\u003cPatient\u003e)`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Import Design Considerations"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Allowing Patient Overriding for `app-import-merge`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* **Alternative 1 (current choice)**: Disallow overriding."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Pros: Existing `Patient` data will not be accidentally overridden."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Cons: User may have intended to use `app-import-merge` to update old data."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "More hassle for the user to delete old `Patient` data that they want to replace."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* **Alternative 2**: In case of duplicates, replace old `Patient` data."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Pros: Conveniently update old `Patient` data."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Cons: May accidentally override and lose important data, though not a big deal"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "with `app-undo`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* **Alternative 3**: Implement a flag to toggle overriding."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Pros: Best of both worlds."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Cons: More coding and debugging work."
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 144
    }
  },
  {
    "path": "docs/devguide/UndoRedoHistory.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "This set of functionality consists of one GUI component and two commands,"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "each of which rely on the same core components:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "1. `HistoryPane` - GUI component that displays a numbered list of previous"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "data-modifying commands that can be reverted by `app-undo`."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "2. `app-undo` - Command that reverts until a specified data-modifying command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "in the history, or the previous data-modifying command if no argument is specified."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "3. `app-redo` - Command that reverts the previous command if and only if it was an `app-undo`."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "For undo/redo/history to function, there must be the following:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* A way to mark which `Command` s are data-modifying commands so that"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "non-data-modifying commands can be ignored."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* A mechanism to clearly demarcate the model state before and after the execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "of each data-modifying command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* A way to record the state of the model before (or after) each command, together"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "with the `Command` object responsible."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Methods to switch the state of the model back and forth from the states stored"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "in the history."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "To achieve this, the following classes are introduced:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `MutatorCommand` - An empty subclass of `Command` to indicate that a `Command` is a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "data-modifying command and should be considered for undo/redo/history."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `HistoryRecord` - Record of the command and data of one atomic commit in the command history. It consists of the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`MutatorCommand` responsible for the commit and the state of the model either before or after the commit. All recorded"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "states are deep copies decoupled from their original references."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `HistoryManager` - Represents the history of the application. Maintains data structures containing `HistoryRecord` s"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "of each data state change."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Additionally, `LogicManager` and `Model` are modified to accommodate this functionality."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ".Shallow Copy vs Deep copy"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "****"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Performing a __shallow copy__ of an object simply copies the values of the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "references of each object the original object is pointing to. This results in the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "copied object pointing to the same objects as the original. In the figure below,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`patientBook` and `copiedPatientBook` are separate `PatientBook` objects but actually"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "share the same `patient` object. Changes to `patient` through `PatientBook` would thus"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "affect `copiedPatientBook` as well."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ".Shallow copy"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "image::shallow_copy.png[]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Performing a __deep copy__ creates duplicates of each object referenced by the original,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "the objects referenced by those duplicates, and so on. These duplicates are completely"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "decoupled from their originals. In the figure below, `patient` is a different"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "object from `copiedPatient`, thus changes to `patient` would not affect `copiedPatient`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ".Deep copy"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "image::deep_copy.png[]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "****"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "The following methods are added to the `Model` interface:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `Model#commit(MutatorCommand)` - Commits the changes made to the address book since the last call to this method,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "making them permanent and updating the UI data. The committing `MutatorCommand` is stored for history record purposes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `Model#getHistory()` - Returns an unmodifiable view of the history."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `Model#undoTo(HistoryRecord)` - Reverts current model state to the that contained in the specified `HistoryRecord`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "(i.e. the state before the command was executed)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `Model#redo()` - Redoes the previous `MutatorCommand` if it was an undo."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d Model Design Considerations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to record the PatientBook and AppointmentBook states in the history"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Alternative 1: Simply store references to `PatientBook` and `AppointmentBook`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Easier to implement."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Relies on the assumption that the objects in `PatientBook` and `AddressBook`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "are immutable; if they are not truly immutable, changes to the current model\u0027s"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`PatientBook` and `AddressBook` state may leak and affect the states stored in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "the history."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* **Alternative 2 (current choice):** Defensively store deep copies of the `PatientBook` and `AppointmentBook`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Prevents improperly coded `Patient` or `Appointment` (or their"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "associated classes) from breaking undo/redo/history functionality."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Can reuse JSON serialization code for persistent storage of `PatientBook` and `AppointmentBook`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "to create deep copies by serializing then immediately deserializing them."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Consumes more memory and CPU time."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** More difficult to implement - MVC pattern between UI view and models is broken in"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "two. This is because each time the current state is swapped with a state in the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "history by `ModelManager`, the `ObservableList` viewed by the UI must also be"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "updated by the `ModelManager` instead of the `PatientBook` as the current"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`PatientBook` is completely decoupled and placed into the history."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Which class to place the HistoryManager in"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* **Alternative 1 (current choice):** Make `HistoryManager` a field of `ModelManager`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Ensures atomicity of the records in the history as pushing a transaction"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "to the `HistoryManager` can only be (and is always) done by `Model#commit()`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "itself - records in the history are guaranteed to be products of complete command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "execution rather than intermediate states."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** More difficult to test `ModelManager` as two `ModelManager` objects may have"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "the same current state but differing `HistoryManager` objects."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** May violate Single Responsibility Principle as `ModelManager` now has to manage"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "both its current state and its previous states."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Alternative 2: Make `HistoryManager` a field of `LogicManager`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Higher cohesion as `ModelManager` only represents the model\u0027s current state."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Easier to test `ModelManager` as only its current state matters."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** It is possible for intermediate model states to be pushed to the `HistoryManager` -"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "trusts `LogicManager` to push the transaction to history after (and only"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "after) calling `Model#commit()`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Requires `Command#execute()` to accept `HistoryManager` as a parameter just so"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`UndoCommand` and `RedoCommand` can work even though the vast majority of commands do not require it."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d Logic"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "In addition to `MutatorCommand` which was described earlier, the following logical classes are added:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "1. `UndoCommand` - Undoes a designated command in the history, or the previous one if no argument is specified. The"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`COMMAND_WORD` for this command is `app-undo`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "2. `UndoCommandParser` - Parses input arguments and creates a new UndoCommand object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "3. `RedoCommand` - Redoes the previous command if it was an undo. The `COMMAND_WORD` for this command is `app-redo`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`HistoryManager` checks the classes of commands pushed to the history and does not record"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "them if they are instances of `UndoCommand` or `RedoCommand`. This ensures that successive `UndoCommand` s do"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "not undo themselves instead of the desired data-modifying commands, requiring `RedoCommand` for"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "the special case of undo reversion."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d UI"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "The command history is constantly displayed in a panel on the right side of"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "the app. This `HistoryPanel` uses `HistoryRecordCard` s to display the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "user-input text that invoked each command. It is a view of the `ObservableList\u003cHistoryRecord\u003e`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "returned by `HistoryManager#asUnmodifiableObservableList()`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d UI Design Considerations"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Where to display the history"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* **Alternative 1 (current choice):** Permanently display it in a dedicated panel."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** User does not have to execute a \u0027history\u0027 command to view the history,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "making it much easier to use the multiple undo function."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Takes up more space in the UI."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Alternative 2: Display it as a tab in the `TabPane`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Saves space in the UI."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** User has to switch to the history tab to view it."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*** Less intuitive UX as the other tabs in the `TabPane` all display actual data"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "such as `Patient`, `Visit`, and `Appointment` info, whereas history is app metadata."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d Use case"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "The following sequence diagram illustrates what happens when an `app-undo 3` command is executed:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 173
    }
  },
  {
    "path": "docs/devguide/VisitsManagement.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::visitmanagement[]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Visit Management has 3 sections to it: the model that models the visits, the logic that allows users to manipulate these models and the UI."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "How Visits, VisitTodos and VisitTasks are stored can be seen in \u003c\u003cDesign-Model\u003e\u003e above. To support the feature of ongoing visits and the constraint that there can only be 1 ongoing visit at a time, a `Pair\u003cInteger, Integer\u003e` named `pairOfOngoingPatAndVisitIndexes` is stored in `PatientBook`. This serves multiple purposes:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* To identify the `Patient` that is currently being visited and the `Visit` that is ongoing"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* To ensure that the state is saved even if the application shuts down during an ongoing visit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* To ensure there is no duplication of data by storing only the indexes for reference"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Although there is a reference to the `Patient` in the `Visit` class, it is not stored in the JSON file. Thus, the `Patient` needs to be stored together with the `Visit` as a pair in `PatientBook`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`Model` implements the following operations:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `Model#setNewOngoingVisit(Visit visit)` -- Record a new ongoing `Visit` of person in the model. This `Visit` must be retrieved unmodified from a `Patient`, or an `IllegalArgumentException` will be thrown so only use this to begin visits."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `Model#updateOngoingVisit(Visit updatedVisit)` -- Update an ongoing `Visit` in the model. This will update the ongoing `Visit` and update the `Visit` in the `Patient`. Use this to update an ongoing `Visit` when there is already a `Visit`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `Model#unsetOngoingVisit()` -- Set the ongoing visit of person in the model and address book to null (for cancelling or deleting visits)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `Model#patientHasOngoingVisit(Person person)` -- Return true if the person has an ongoing visit."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `Model#getObservableOngoingVisitList()` -- Returns a `ObservableList\u003cVisit\u003e` containing the ongoing `Visit` if there is an ongoing `Visit`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d Model Design Considerations"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to reflect changes in ongoing visit on UI"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* **Alternative 1 (current choice):** Use an `ObservableList\u003cVisit\u003e` returned from `FXCollections.observableArrayList()`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Pros: Easier to implement."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Cons: May not make logical sense as there will only be 0..1 ongoing `Visit` s at any point in time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* **Alternative 2:** Manually trigger an update every time the ongoing `Visit` is updated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Pros: Makes logical sense as there will only be 0..1 ongoing `Visit` s at any point in time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Cons: Complex, increased coupling between UI and Model. These lead to an increase of work (and potentially errors) for the developer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d Logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d Logic Design Considerations"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d UI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "A `Patient` \u0027s `Visit` s, `VisitTodo` are displayed together with his details on `pat-list` and `pat-find` in a `TitledPane`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "An ongoing `Visit` is displayed in another tab named \"Current Visit\" using  `OngoingVisitListPanel` containing `OngoingVisitCard` which contains `VisitTaskTableView`. Likewise, in `pat-list` and `pat-find` use `FinishedVisitCard` s each containing a `VisitTaskTableView` to display the `Visit` s and `VisitTask` s."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Changing of tabs on running the appropriate command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The application currently does not change tabs when an appropriate command is run (e.g. if you\u0027re on the Patient tab and you run visit-now-update, it will stay on the Patient tab). This is actually by design as it allows users to multitask across tabs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If in future iterations there is a need to change the tab on running an appropriate command, there are some consideration on how to implement the changing of tabs programmatically (e.g. when someone executes the command to begin a visit), which necessitates some additional coupling between `Model` and `Ui`. The proposed implementation may be to use the Observer pattern: `Model` would contain a subject that would notify its observers whenever a component (e.g. `Patient` or `Visit`) is listed/added/updated/deleted/etc, and `Ui` could observer this subject and update itself accordingly."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d UI Design Considerations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Aspect: How to display the `Patient` \u0027s `Visit` records (and his `VisitTodo` s)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* **Alternative 1 (current choice):** Embed it with `pat-list` and `pat-find`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Pros: Easier to implement, convenient for user (don\u0027t have to call methods such as `visit-view` which will only show the visit)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Cons: May clutter screen."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* **Alternative 2:** Implement functions such as `visit-view` etc."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Pros: A cleaner result page from `pat-list` and `pat-find`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Cons: Increased developer work and user will have to use multiple commands to view the `Patient` \u0027s `Visit` data."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Aspect: How to display the ongoing `Visit`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* **Alternative 1 (current choice):** Put the `PersonListPanel` into a `TabPane` and put the `OngoingVisitListPanel` in the same `TabPane`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Pros: Neater."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Cons: No real cons apart from the fact that the user will have to click to change tabs."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* **Alternative 2:** Open a new window to show the ongoing `Visit`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Pros: Can be viewed side by side with the main application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Cons: Increases clutter on user screen, increases complexity in handling scenario where user closes the window."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d Use case"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Visit Management is used when the user wants to visit a patient and record their visit. There are 4 actions that a user can perform:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "image::VisitManagementUseCase.png[]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The possible workflow a user can take when these set of actions is depicted in the following diagram. Take note that the application will always start without an ongoing visit and this is an assumption is applied in the activity diagram. Also note that the terms \"visit\" and \"ongoing visit\" are interchangeable, as a user can only cancel, update or finish an ongoing visit."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "image::VisitActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The most complex part of this use case is in when the user decides to update the ongoing visit. The sequence of events when updating an ongoing visit is detailed in this link:images/UpdateOngoingVisitSequenceDiagram.png[sequence diagram]. Note that this sequence diagram is _not_ exhaustive to help you understand without going into too much detail. (e.g. Exception handling is omitted)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "image::UpdateOngoingVisitSequenceDiagram.png[]"
      }
    ],
    "authorContributionMap": {
      "crazoter": 83
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(patientBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/ExportSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "participant \":ExportCommandParser\" as ExportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "participant \"e:ExportCommand\" as ExportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "participant \":AddressBook\" as AddressBook MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "participant \":UniquePersonList\" as UniquePersonList MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "box Util"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "participant \":CsvUtil\" as CsvUtil MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "participant \":FileUtil\" as FileUtil MODEL_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "[-\u003e LogicManager : execute(\"export n/name i/1\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"export n/name i/1\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "create ExportCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "AddressBookParser -\u003e ExportCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "activate ExportCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "create ExportCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "ExportCommandParser -\u003e ExportCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "ExportCommand --\u003e ExportCommandParser : e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "ExportCommandParser --\u003e AddressBookParser : e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "deactivate ExportCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "AddressBookParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "LogicManager -\u003e ExportCommand : execute()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "ExportCommand -\u003e Model : getStagedPersonList()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "Model --\u003e ExportCommand : personList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "opt indexes provided"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    ExportCommand -\u003e Model : getPersonsByIndexes(indexes)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    Model -\u003e AddressBook : getPersonsByIndexes(indexes)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    activate AddressBook"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    loop for each index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        AddressBook -\u003e UniquePersonList : getByIndex(index)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        activate UniquePersonList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        UniquePersonList --\u003e AddressBook : person"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        deactivate UniquePersonList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    end"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    AddressBook --\u003e Model : personList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    deactivate AddressBook"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    Model --\u003e ExportCommand : personList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "end"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "ExportCommand -\u003e CsvUtil : writePersonsToCsv(personList, name)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "activate CsvUtil"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "CsvUtil -\u003e CsvUtil : getCsvStringsFromPersons(personList)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "CsvUtil -\u003e FileUtil : createFile(name)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "activate FileUtil"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "FileUtil --\u003e CsvUtil"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "deactivate FileUtil"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "CsvUtil --\u003e FileUtil : writeToFile(name, csvString)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "activate FileUtil"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "FileUtil --\u003e CsvUtil"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "deactivate FileUtil"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "CsvUtil --\u003e ExportCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "deactivate CsvUtil"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "ExportCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 92
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Package VisitTodo {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Class VisitTodo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Package Visit {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Class Visit {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "patient: Person"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Class Remark"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Package VisitTask {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Class VisitTask {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    isDone: boolean"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Class Detail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Package DateTime {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Class DateTime"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Class StartDateTime"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Class EndDateTime"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Person *-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Person *--\u003e \"*\" VisitTodo"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Person *--\u003e \"*\" Visit"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "DateTime \u003c|-- StartDateTime"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "DateTime \u003c|-- EndDateTime"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "note \"Visit has a reference\\nto its patient, but it\\nis not used to compare\\nVisits or generate the\\nhashCode of a Visit\" as N1"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Visit .. N1"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Visit *--\u003e \"1\" Remark"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Visit *-up-\u003e \"1\" StartDateTime"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Visit *-up-\u003e \"0..1\" EndDateTime"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Visit *--\u003e \"*\" VisitTask"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "show Visit members"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "VisitTask *--\u003e \"1\" Detail"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "VisitTask *-left-\u003e \"1\" VisitTodo"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "show VisitTask members"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "crazoter": 44,
      "-": 55
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Interface PatientBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Class JsonPatientBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "StorageManager o--\u003e PatientBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "JsonPatientBookStorage .left.|\u003e PatientBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "JsonPatientBookStorage .down.\u003e JsonSerializablePatientBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "JsonSerializablePatientBookStorage .right.\u003e JsonSerializablePerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "JsonSerializablePerson .right.\u003e JsonAdaptedTodo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "JsonSerializablePerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "JsonSerializablePerson .down.\u003e JsonAdaptedVisit"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "JsonAdaptedVisit .right.\u003e JsonAdaptedVisitTask"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "JsonAdaptedVisitTask .right.\u003e JsonAdaptedTodo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "crazoter": 10,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "participant \":AppParser\" as AppParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "participant \":HistoryManager\" as HistoryManager MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "[-\u003e LogicManager : execute(\"app-undo 3\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "LogicManager -\u003e AppParser : parseCommand(\"app-undo 3\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "activate AppParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "AppParser -\u003e UndoCommand : UndoCommand(index)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "UndoCommand --\u003e AppParser : u"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "AppParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "deactivate AppParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "UndoCommand -\u003e Model : getHistory()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Model -\u003e HistoryManager : asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "activate HistoryManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "HistoryManager --\u003e Model : history"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "deactivate HistoryManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Model --\u003e UndoCommand : history"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "UndoCommand -\u003e Model : undoTo(targetRecord)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Model -\u003e HistoryManager : popRecordsTo(targetRecord)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "activate HistoryManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "HistoryManager --\u003e Model : poppedRecords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "deactivate HistoryManager"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Model -\u003e Model : changeBaseTo(copyOfPatientBook)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 31,
      "-": 38
    }
  },
  {
    "path": "docs/diagrams/UpdateOngoingVisitSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "participant \":PatientBookParser\" as PatientBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "participant \"u:UpdateOngoingVisitCommandParser\" as UpdateOngoingVisitCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "participant \"d:UpdateOngoingVisitDescriptor\" as UpdateOngoingVisitDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "participant \"cmd:UpdateOngoingVisitCommand\" as UpdateOngoingVisitCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "participant \"cmdResult:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "participant \":PatientBook\" as PatientBook MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "box Util"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "participant \":VisitUtil\" as VisitUtil MODEL_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "end box"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "[-\u003e LogicManager : execute(\"visit-now-update d/2 details f/2 r/Remarks\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "LogicManager -\u003e PatientBookParser : parseCommand(\"visit-now-update d/2 details f/2 r/Remarks\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "activate PatientBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "create UpdateOngoingVisitCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "PatientBookParser -\u003e UpdateOngoingVisitCommandParser : UpdateOngoingVisitCommandParser()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "activate UpdateOngoingVisitCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommandParser --\u003e PatientBookParser : u"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "PatientBookParser -\u003e UpdateOngoingVisitCommandParser : parse(arguments)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "create UpdateOngoingVisitDescriptor"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommandParser -\u003e UpdateOngoingVisitDescriptor : UpdateOngoingVisitDescriptor()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommandParser \u003c-- UpdateOngoingVisitDescriptor : d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "ref over UpdateOngoingVisitCommandParser, UpdateOngoingVisitDescriptor : Parse args from argMultimap into updateOngoingVisitDescriptor based on each prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "create UpdateOngoingVisitCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommandParser -\u003e UpdateOngoingVisitCommand : UpdateOngoingVisitCommand(updateOngoingVisitDescriptor)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "activate UpdateOngoingVisitCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommand --\u003e UpdateOngoingVisitCommandParser : cmd"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deactivate UpdateOngoingVisitCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommandParser --\u003e PatientBookParser : cmd"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deactivate UpdateOngoingVisitCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "PatientBookParser --\u003e LogicManager : cmd"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deactivate PatientBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "LogicManager -\u003e UpdateOngoingVisitCommand : execute(model)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "activate UpdateOngoingVisitCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommand -\u003e UpdateOngoingVisitDescriptor : isAnyFieldUpdated()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "activate UpdateOngoingVisitDescriptor"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitDescriptor --\u003e UpdateOngoingVisitCommand : isAnyFieldUpdated"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deactivate UpdateOngoingVisitDescriptor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommand -\u003e VisitUtil : getOngoingVisitIfExists(model, MESSAGE_NO_ONGOING_VISIT)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommand \u003c-- VisitUtil : visitToUpdate"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommand -\u003e UpdateOngoingVisitCommand : createUpdated(visitToUpdate, updateOngoingVisitDescriptor)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "activate UpdateOngoingVisitCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommand \u003c-- UpdateOngoingVisitCommand : updatedVisit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deactivate UpdateOngoingVisitCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommand -\u003e Model : updateOngoingVisit(updatedVisit)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "ref over Model, PatientBook : updateOngoingVisit(updatedVisit) : void"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommand \u003c-- Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommand -\u003e CommandResult : CommandResult(successfullyUpdatedVisitMessage)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "UpdateOngoingVisitCommand \u003c-- CommandResult : cmdResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "LogicManager \u003c-- UpdateOngoingVisitCommand : cmdResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deactivate UpdateOngoingVisitCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "crazoter": 81
    }
  },
  {
    "path": "docs/diagrams/VisitManagementUseCase.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "skinparam packageStyle rectangle"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "actor User"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "rectangle NurseTraverse {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "  User -- (Begin Visit)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "  User -- (Update Ongoing Visit)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "  User -- (Cancel Ongoing Visit)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "  User -- (Finish Ongoing Visit)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "  (Verify Ongoing Visit Exists)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "  (Update Ongoing Visit) ..\u003e (Verify Ongoing Visit Exists) : \u003c\u003cinclude\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "  (Cancel Ongoing Visit) ..\u003e (Verify Ongoing Visit Exists) : \u003c\u003cinclude\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "  (Finish Ongoing Visit) ..\u003e (Verify Ongoing Visit Exists) : \u003c\u003cinclude\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "crazoter": 15
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "skinparam ClassAttributeFontColor #FFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 75
    }
  },
  {
    "path": "docs/team/cheongsiuhong.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d Cheong Siu Hong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d PROJECT: NurseTraverse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "NurseTraverse is a desktop application meant for community nurse to help manage all the data that a community nurse might need. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "crazoter": 1,
      "-": 69
    }
  },
  {
    "path": "docs/team/crazoter.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d Lee Wei Ren Matthew - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d PROJECT: NurseTraverse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "NurseTraverse is a desktop application meant for community nurse to help manage all the data that a community nurse might need. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* *Major enhancement*: added *the ability to manage visits*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** What it does: allows the user to manage their visits to their patients. They can create their own \"checklist\" of things to do for each patient, record said data during a visit and view data from previous visits."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Justification: This feature has been identified as a required feature by user stories https://github.com/AY1920S1-CS2103-F10-1/main/issues/5[#5], https://github.com/AY1920S1-CS2103-F10-1/main/issues/6[#6] and https://github.com/AY1920S1-CS2103-F10-1/main/issues/25[#25] and will provide significant value-add by allowing users to manage visit data directly."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Highlights: This enhancement adds a new feature for the user. From a design perspective, it was challenging as there was a need to make the use cases and commands usable and efficient while keeping the workload manageable. The implementation too was challenging as it is a rather big feature involving changes to existing commands and the creation of new commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "** Credits: No code or ideas were referenced to outside of this application (beyond code that already exists within _Address Book 3_)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* *Code contributed*: Code contributed can be found via references in the following issues:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "(v1.2: Issue https://github.com/AY1920S1-CS2103-F10-1/main/issues/62[#62],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "v1.3: Issue https://github.com/AY1920S1-CS2103-F10-1/main/issues/53[#53],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Bug Hunting: Issue https://github.com/AY1920S1-CS2103-F10-1/main/issues/182[#182])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Setup initial https://github.com/AY1920S1-CS2103-F10-1/main/projects/1[Project Management Board]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Setup https://github.com/AY1920S1-CS2103-F10-1/main/pull/94[v1.2.1 release], v1.4 Issues for team (See issues #182-#186)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Helped coordinate team and help teammates debug code (offline, no documentation)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Modified relative to absolute indexing for Person list, find and edit (Pull Request https://github.com/AY1920S1-CS2103-F10-1/main/pull/69[#69]) which was required for this feature and some other features e.g. Appointment Management"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Updated the GUI color scheme (Pull request https://github.com/AY1920S1-CS2103-F10-1/main/pull/77[#77])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Added tabbing system to main window (Pull request https://github.com/AY1920S1-CS2103-F10-1/main/pull/77[#77]) which was required for this feature and some other features e.g. Appointment Management"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Setup initial User Guide to guide direction of project: (Pull Requests https://github.com/AY1920S1-CS2103-F10-1/main/pull/36[#36], https://github.com/AY1920S1-CS2103-F10-1/main/pull/37[#37])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Pull Requests reviewed with non-trivial review comments or reviewed to approve:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/66[#66],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/67[#67],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/71[#71],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/72[#72],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/73[#73],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/87[#87],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/91[#91],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/105[#105],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/112[#112],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/112[#112],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/197[#197],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Contributed to discussions (in Pull Request(s)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "https://github.com/AY1920S1-CS2103-F10-1/main/pull/42[#42]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "and offline/Telegram discussions)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Setup example Milestone issue format (https://github.com/AY1920S1-CS2103-F10-1/main/issues/53[#53])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Helped in setting up team repo"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Helped in integrating Travis"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*** Integrated Netlify, Coveralls and Codacy to the team repo"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The full list of PRs by me (which includes all the PRs for https://github.com/AY1920S1-CS2103-F10-1/main/pull/104[refactoring], updating documentation, impromptu bug fixes and more) can be found https://github.com/AY1920S1-CS2103-F10-1/main/pulls?q\u003dis%3Apr+author%3Acrazoter[here], and the full list of issues by me can be found https://github.com/AY1920S1-CS2103-F10-1/main/issues?utf8\u003d%E2%9C%93\u0026q\u003dis%3Aissue+author%3Acrazoter+[here]."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "|_Given below are sections I contributed to the User Guide (aside from the team based components). They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::../userguide/Visit.adoc[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::../userguide/VisitHowTo.adoc[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::../userguide/Security.adoc[]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide (aside from the team based components). They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "include::../devguide/VisitsManagement.adoc[]"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "crazoter": 46,
      "-": 32
    }
  },
  {
    "path": "docs/team/francislow.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d Francis Low Siu Yuan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d PROJECT: NurseTraverse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "NurseTraverse is a desktop application meant for community nurse to help manage all the data that a community nurse might need. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "crazoter": 1,
      "-": 69
    }
  },
  {
    "path": "docs/team/gabrielchao.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d Chao Fang How, Gabriel - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d PROJECT: NurseTraverse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "NurseTraverse is a desktop application meant for community nurse to help manage all the data that a community nurse might need. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "crazoter": 1,
      "-": 69
    }
  },
  {
    "path": "docs/team/sandydays.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d Ramachandran Sandhya - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d PROJECT: NurseTraverse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "NurseTraverse is a desktop application meant for community nurse to help manage all the data that a community nurse might need. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "sandydays": 2,
      "crazoter": 1,
      "-": 69
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "This document was originally written for _AddressBook Level 3_ and hence it refers to _Address Book_ and other classes / fields that exist in _Address Book Level 3_ but not in _NurseTraverse_. Since the tutorial can still be used to understand how to remove a field from an entity in the application, it has been left in this repository as a reference."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "crazoter": 5,
      "-": 117
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "This document was originally written for _AddressBook Level 3_ and hence it refers to _Address Book_ and other classes / fields that exist in _Address Book Level 3_ but not in _NurseTraverse_. Since the tutorial can still be used to understand how to trace the application, it has been left in this repository as a reference."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "crazoter": 5,
      "-": 258
    }
  },
  {
    "path": "docs/userguide/Appointment.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Appointments [Parameters not updated]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Appointments*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often make home visits to your patients. and keep track of these appointments you make with your patients. You can use the application to manage and keep track of these appointments. This section describes the features that will allow you to manage your appointments."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Listing All Appointments: `appt list` [coming in V1.4]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a list of all appointments in the app by typing `appt list`."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each appointment will have an *index* number which can then be used for other features that require you to select an appointment by *index* e.g. `appt delete`. Take note that an appointment will be given the same *index* regardless of other display commands such as `appt find`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt list`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finding Appointment(s): `appt find`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can find appointments that fit the parameters given using `appt find`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each appointment will have an *index* number which can then be used for other features that require you to select an appointment by *index* e.g. `appt delete`. Take note that an appointment will be given the same *index* regardless of other display commands such as `appt list` or if different parameters are used."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt find [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the parameter is text (e.g. `n/NAME`), partial words will be matched (e.g. `n/John` will return `John Smith` and `John Kim`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt find n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Lists all appointments of that particular patient"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Viewing an Appointment: `appt view` [coming in V1.4]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see an appointment\u0027s full details using `appt view`. The appointment is selected by their *index*."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt view INDEX`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* View the appointment at the specified `INDEX`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of appointments displayed by `appt list` or `appt find`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt list` +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`appt view 1`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with index number 1. This index can be found from the full list of appointments."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt view 2`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with the index number 2."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Listing the next earliest Appointments: `appt next` [coming in V1.4]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can list the next earliest appointments using `appt next`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt next NUMBER`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`appt next 3` +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Displays the next 3 earliest appointments sorted by time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003d\u003d\u003d Editing an Appointment: `appt edit` [coming in V1.4]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can edit an existing appointment in the app using `appt edit`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Edits the person at the specified `INDEX`."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of appointments displayed by `appt list` or `appt find`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt list` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": " `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the phone number and email address of the 1st person in the entire appointment\u0027s list to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the name of the 2nd person with the index 1.`Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting an Appointment: `appt delete`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete an appointment by *index* using `appt delete`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt delete INDEX`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the appointment at the specified `INDEX`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of appointments displayed by `appt list` or `appt find`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt list` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`appt delete 2` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd appointment in the appointment list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt delete 1` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the appointment which had been assigned the index 1."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting multiple Appointments: `appt delete` `[coming in V2.0]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete an appointment by *indexes* using `appt delete`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `appt delete INDEX_1 [INDEX_2] [INDEX_3]...`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the appointment at the specified `INDEX` es. You can put in as many indexes to delete as many appointments as you wish."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of appointments displayed by `appt list` or `appt find`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt list` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`appt delete 2` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd appointment in the appointment list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `appt delete 1 2` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the and 2nd appointments which had been assigned the index 1."
      }
    ],
    "authorContributionMap": {
      "sandydays": 4,
      "crazoter": 134
    }
  },
  {
    "path": "docs/userguide/AutoComplete.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Autocomplete"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Autocomplete*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will be performing several commands through the Command Line Interface (CLI). In order to speed up the process, the application includes an autocomplete feature that allows you to more quickly and conveniently input your commands and parameters. This section describes the feature in further detail."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Viewing list of suggested words"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "To the right of the command box, there is a panel that has a few suggestion words. The suggestion list will be constantly updated to fit your input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Updating list of suggested words"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "The suggested list of words in the autocomplete panel will be updated as you type in the command box. The panel will only suggest to you words that you need, in sequential order, based on your input and your previous word selection. Should your input be wrong or does not match any of the suggested word, no words will be suggested to you. +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Eg:* +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "If your \"visit-\" is your input in your commandbox, only words that are related to \"visit\" will be suggested such as \"start\" and \"end\"."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "If your \"abc\" is your input in your commandbox, only words that starts with \"abc\" will be suggested. +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Note:*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "- When prefixes are suggested you should select all prefixes that you need then type in respective sub-details +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "Eg: Select all prefixes \"pat-add n/ p/ e/ a/ t/\" before adding sub-details \"pat-add n/John p/98762615 e/john@example.com a/exampleaddress t/exampletag vt/examplevisittodo\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": " - If no words appear in the autocomplete panel, this can only mean 2 things: +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "1) Your full command is finished, there are no more words to be suggested. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "2) Your input is wrong and does not match any of the words to be suggested. (Try to change your input by backspacing)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Selecting a suggested words"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "`*UP*`, `*DOWN*` key +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "You can use the `*UP*` and `*DOWN*` keys in your keyboard to move from one selected word to another. Descriptions of the suggested words will be shown as you select them to guide you in choosing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "`*RIGHT*` key +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "Confirm your selection by pressing the `*RIGHT*` key in your keyboard. This will auto-fill the selected word to your current words in the command box text field. Doing this will also perform an auto correction of your input in order to fit the correct sequence of commands. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Eg:* +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": "Selecting the \"now-update\" in the autocomplete panel will concatenate with \"now-update\" with \"visit-\", the current text in your command box."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "*Note:* +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "When pressing `*UP*`, `*DOWN*`, or `*RIGHT*` keys, make sure that the command box is selected."
      }
    ],
    "authorContributionMap": {
      "crazoter": 6,
      "francislow": 32
    }
  },
  {
    "path": "docs/userguide/DataSavingUndoRedo.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d Data Saving, History, Undo, Redo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "*Data Saving, History, Undo, Redo*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "As a community nurse, you will often perform commands that modify information"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "managed by the application (e.g. patient data). This section describes the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "features involving the storage of this data, viewing command history, and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "undo-ing / redo-ing commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Saving your data"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Your data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d Viewing the command history"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "The rightmost panel of the app shows a history of the previous data-modifying commands executed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "since the app was started. Examples of data-modifying commands are `pat-edit` or `visit-start`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Commands that do not affect the app data, such as `pat-list`, are not shown."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Each command is displayed with an index number. The most recent command is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "shown at the bottom of the history and has the greatest index number. The"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "earliest command in the history is shown at the top with an index of 1."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "The app keeps a record of the previous 20 data-modifying commands in the history."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d Undoing a command: `app-undo`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "You can undo the changes of the data-modifying commands in the history"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "with `app-undo`. All app data will be reverted to how they were before the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "undone command was executed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-undo` can be used in two ways. The first way is to provide no arguments"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "to the command. This simply undoes the latest command. The second way is to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "specify the index of a command in the history. This would cause all commands"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "after and including that command to be undone."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "The command `app-undo` itself is not affected by `app-undo` and is not recorded in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "the history. To revert an `app-undo`, use `app-redo`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format: `app-undo [INDEX]`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "****"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * If the index is provided, undoes all commands after and including the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "indicated command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * If the index is *not* provided, undoes the previous data-modifying command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * The index, if provided, *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Can only undo commands in the history."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "****"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `pat-clear` +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`pat-list` +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-undo` (reverts the `pat-clear` command)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Suppose the history looks like this:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "--"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " 1. `pat-edit 1 n/Ivan Yeoh`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " 2. `pat-delete 3`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " 3. `pat-clear`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "--"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Now `app-undo 2` is executed. `pat-clear` and `pat-delete 3` are undone in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "that order. The app data is now as it was before `pat-delete 3` was executed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d Redoing an undone command: `app-redo`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "You can redo and reapply the changes of the last undone command using `app-redo`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "This is only possible when the latest data-modifying command (other than"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-redo` itself) was an `app-undo`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Format: `app-redo`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "****"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Redoes the latest undone command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * The previous data-modifying command must have been an `app-undo` (excluding"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-redo` itself)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "****"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `pat-edit 1 n/Ivan Yeoh` +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-undo` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-redo` (reverts data to after `pat-edit` was executed)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* `pat-edit 1 n/Ivan Yeoh` +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`pat-clear` +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-undo` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-undo` +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-redo` (redoes `pat-edit`) +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-redo` (redoes `pat-clear`)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Suppose the history looks like this:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "--"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "1. `pat-edit 1 n/Ivan Yeoh`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "2. `pat-delete 3`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "3. `pat-clear`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "--"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "+"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Now the following commands are executed: +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-undo 2` (reverts `pat-clear` and `pat-delete`) +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-redo` (redoes `pat-delete`) +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "`app-redo` (redoes `pat-clear`)"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 88,
      "crazoter": 17
    }
  },
  {
    "path": "docs/userguide/Exiting.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "You can exit the program using `app-exit`. +"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": "Format: `app-exit`"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "francislow": 2
    }
  },
  {
    "path": "docs/userguide/Faq.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous NurseTraverse folder."
      }
    ],
    "authorContributionMap": {
      "crazoter": 2
    }
  },
  {
    "path": "docs/userguide/ImportExport.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Importing and Exporting of Patient Data"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Importing and Exporting of Patient Data*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "As a community nurse, you may be assigned new patients, or some of your patients may be assigned to other community nurses. To facilitate the transferring of patient information from one device to another, you can import and export the data of your patients. This section describes the features that will allow you to import and export patient information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d Importing patient data from a CSV file: `app-import-replace`, `app-import-merge`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "You can import patient data from a .csv file into the application using"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`app-import-replace` or `app-import-merge`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Only the file format .csv is supported."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* The application will look for the specified .csv file in the `./imports` folder."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Both import commands are undoable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d Import and Replace: `app-import-replace`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "Reads patient data from a specified .csv file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`\".csv\"` will be auto-appended to the specified `FILENAME`,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "**so there is no need to type in the file extension**."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "All existing patient data will be deleted and replaced with this new data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "All existing appointment data will be deleted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "****"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Provided file should not be empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Cannot be executed when there is an ongoing visit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "****"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "Format: `app-import-replace n/FILENAME`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* `app-import-replace n/my_assigned_patients`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Patient data will be entirely replaced with new data from `./imports/my_assigned_patients.csv`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d Import and Merge: `app-import-merge`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "Patient data will be read from a specified .csv file and merged without"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "affecting existing data. Provided file should not be empty."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`\".csv\"` will be auto-appended to the specified `FILENAME`,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "**so there is no need to type in the file extension**."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "****"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* The .csv file cannot contain a patient that already exists in the app."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Can be executed when there is an ongoing visit."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "****"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "Format: `app-import-merge n/FILENAME`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* `app-import-replace n/my_new_patients`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Patient data from `./imports/my_new_patients.csv` will be added into the app."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "CSV files used for importing must adhere to the following format requirements."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Provided file name should not be blank, and can contain only alphanumerics, hyphens and underscores."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* The top row of the file must be exactly the following headers in the order:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\tname, phone, email, address, tagged, visitTodos"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Each row in the .csv corresponds to one patient."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* The data in each cell must adhere to the format of the field it belongs in."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** Cells under `phone` must contain 3 to 8 digit numbers, cells under `name` must contain only alphanumerics and spaces, etc."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** For the fields `tagged` and `visitTodos` with multiple elements per cell,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "each element is to be separated with a newline."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* The data row for any patient cannot have empty cells in the following fields:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\t`name`, `phone`, `address`, `email`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Do not have any of the following special characters in the .csv:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\t, and ;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "An example of a valid .csv can be seen link:samplecsvs/importsample.csv[here]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d Exporting data into a CSV file: `app-export`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "You can export patient data from the application into a .csv file using `app-export`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "A new .csv file will be created and data will be written into it."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "Indexes can be provided to selectively export data of specific persons."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "`\".csv\"` will be auto-appended to the specified `FILENAME`,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "**so there is no need to type in the file extension**."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Only the file format .csv is supported."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* Creates `FILENAME.csv` in the `./exports` folder"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* **The provided file name must not be already in use.**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "Format: `app-export n/FILENAME [i/INDEX...]`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* `app-export n/patients.csv`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** All patient data will be exported to `./exports/patients.csv`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* `app-export n/alex.csv i/1`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** The data of the patient at index 1 will be exported to `./exports/alex.csv`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* `app-export n/tomorrow.csv i/2 i/4 i/6`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "** The data of the patients at indexes 2, 4 and 6 will be exported to `./exports/tomorrow.csv`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* **As of version 1.4, the export feature does not support Visits and Appointments.**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* **Patients\u0027 visit data will not be exported.**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "* The provided file name cannot be blank, and can contain only alphanumerics, hyphens and underscores."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 102,
      "crazoter": 25
    }
  },
  {
    "path": "docs/userguide/MedicalCondition.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Medical Conditions"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Medical Conditions*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often have to keep track of your patients\u0027 medical conditions. This section describes the features that will allow you to manage the full list of medical conditions, as well as the list of medical conditions of a patient."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing All Medical Conditions: `medcon list`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a list of all medical conditions in the app by typing `medcon list`."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each medical condition will have an *index* number which can then be used for other features that require you to select a medical condition by *index* e.g. `medcon delete`. Take note that a medical condition will be given the same *index* regardless of other display commands such as `medcon find`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `medcon list`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finding Medical Condition(s): `medcon find`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can find medical conditions that fit the parameters given using `medcon find`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each medical condition will have an *index* number which can then be used for other features that require you to select a medical condition by *index* e.g. `medcon delete`. Take note that a medical condition will be given the same *index* regardless of other display commands such as `medcon list` or if different parameters are used."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `medcon find [KEYWORD] [n/NAME] [s/SYMPTOMS] [d/DIAGNOSIS] [t/TREATMENT]`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The search is case insensitive. e.g `asthma` will match `Asthma`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the parameter is text (e.g. `n/NAME`), partial words will be matched (e.g. `n/Diabetes` will return `Diabetes, Type 1` and `Diabetes, Type 2`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If KEYWORD is specified, will attempt search all fields for a match for KEYWORD."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon find asthma` +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Returns all medical conditions with the keyword `asthma` in it"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon find` +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Returns all medical conditions in the application database"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Viewing a Medical Condition: `medcon view`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a medical condition\u0027s full details using `medcon view`. The medical condition is selected by their *index*."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `medcon view INDEX`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* View the medical condition at the specified `INDEX`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medical conditions displayed by `medcon list` or `medcon find`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon list` +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`medcon view 1`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with index number 1. This index can be found from the full list of medical conditions."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon view 2`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with the index number 2."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a Medical Condition: `medcon add`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add a medical condition to the list of all conditions by using `medcon add`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `medcon add n/NAME s/SYMPTOMS d/DIAGNOSIS t/TREATMENT`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * All fields must be specified."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `medcon add n/Diabetes, Type 1 s/Increased thirst, frequent urination, extreme hunger, unexplained weight loss"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    d/A1C test, blood sugar test, oral glucose test t/Insulin injections, insulin pump, blood sugar monitoring,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    carbohydrate counting`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Editing a Medical Condition: `medcon edit`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can edit an existing medical condition in the app using `medcon edit`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `medcon edit INDEX [n/NAME] [s/SYMPTOMS] [d/DIAGNOSIS] [t/TREATMENT]`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Edits the medical condition at the specified `INDEX`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medical conditions displayed by `medcon list` or `medcon find`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon list` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": " `medcon edit 3 s/increased hunger, increased thirst, weight loss, frequent urination, blurry vision, extreme fatigue, sores that don’t heal` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the symptoms of the medical condition with index 3."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting a Medical Condition: `medcon delete`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a medical condition by *index* using `medcon delete`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `medcon delete INDEX`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the medical condition at the specified `INDEX`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medical conditions displayed by `medcon list` or `medcon find`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon list` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`medcon delete 2` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd medical condition in the medical condition list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon delete 1` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the medical condition which had been assigned the index 1."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting multiple Medical Conditions: `medcon delete` `[coming in V2.0]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a medical condition by *indexes* using `medcon delete`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `medcon delete INDEX_1 [INDEX_2] [INDEX_3]...`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the medical condition at the specified `INDEX` es. You can put in as many indexes to delete as many medical conditions as you wish."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medical conditions displayed by `medcon list` or `medcon find`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon list` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`medcon delete 2` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd medical condition in the medical condition list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `medcon delete 1 2` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the and 2nd medical conditions with which had been assigned the 1.command."
      }
    ],
    "authorContributionMap": {
      "crazoter": 139
    }
  },
  {
    "path": "docs/userguide/Medicine.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Medicines `[coming in v2.0]`"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Medicines*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often come across and use various medicines. This section describes the features that will allow you to manage the list of medicines and their information in the application."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing All Medicines: `med-list`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a list of all medicines in the app by typing `med list`."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each medicine will have an *index* number which can then be used for other features that require you to select a medicine by *index* e.g. `med delete`. Take note that a medicine will be given the same *index* regardless of other display commands such as `med find`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med list`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finding Medicine(s): `med-find`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can find medicines that fit the parameters given using `med find`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each medicine will have an *index* number which can then be used for other features that require you to select a medicine by *index* e.g. `med delete`. Take note that a medicine will be given the same *index* regardless of other display commands such as `med list` or if different parameters are used."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med find [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the parameter is text (e.g. `n/NAME`), partial words will be matched (e.g. `n/John` will return `John Smith` and `John Kim`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med find panadol` +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Returns all medicines with the keyword `panadol` in it"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Viewing a Medicine: `med view`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a medicine\u0027s full details using `med view`. The medicine is selected by their *index*."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med view INDEX`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* View the medicine at the specified `INDEX`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medicines displayed by `med list` or `med find`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med list` +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`med view 1`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with index number 1. This index can be found from the full list of medicines."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med view 2`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "View the item with the index number 2."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a Medicine: `med add`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add a medicine to the list of all medicines by using `med add`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med add pn/MEDICINE_NAME pi/MEDICINE_IC p/PHONE_NUMBER a/ADDRESS [e/EMAIL] [t/TAG]…​ [kn/NOK_NAME] [kp/NOK_PHONE_NUMBER] [ka/NOK_ADDRESS] [ke/NOK_EMAIL] [imp/PRIORITY]`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A medicine can have any number of tags."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A medicine can have next-of-kin contact details."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Every medicine is uniquely identified by their IC."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Priority can take values from 0 to 10."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `med add n/John Doe pi/S7012255C p/98765432 a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `med add n/Choong Siew Hwang pi/S7015376D p/91239876 a/22 College Avenue East; Singapore 138608 e/cho0ng@email.com t/Big kn/Choong Tee Ling kp/85639274 ka/10 Buangkok View, Singapore 534194 ke/ch1ng@email.com`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `med add n/Betsy Crowe pi/S0011239X t/friend e/betsycrowe@example.com a/Newgate Prison p/12345678 t/criminal imp/4`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Editing a Medicine: `med edit`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can edit an existing medicine in the app using `med edit`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Edits the person at the specified `INDEX`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medicines displayed by `med list` or `med find`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med list` +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": " `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the phone number and email address of the 1st person in the entire medicine\u0027s list to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the name of the 2nd person with the index 1.Crower` and clears all existing tags."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting a Medicine: `med delete`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a medicine by *index* using `med delete`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med delete INDEX`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the medicine at the specified `INDEX`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medicines displayed by `med list` or `med find`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med list` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`med delete 2` +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd medicine in the medicine list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med delete 1` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the medicine which had been assigned the index 1."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting multiple Medicines: `med delete` `[coming in V2.0]`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a medicine by *indexes* using `med delete`."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `med delete INDEX_1 [INDEX_2] [INDEX_3]...`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the medicine at the specified `INDEX` es. You can put in as many indexes to delete as many medicines as you wish."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of medicines displayed by `med list` or `med find`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med list` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`med delete 2` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd medicine in the medicine list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `med delete 1 2` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the and 2nd medicines which had been assigned the index 1."
      }
    ],
    "authorContributionMap": {
      "crazoter": 148
    }
  },
  {
    "path": "docs/userguide/Misc.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Viewing help : `app-help`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Directs you to this page."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "Format: `app-help`"
      }
    ],
    "authorContributionMap": {
      "crazoter": 5,
      "francislow": 2
    }
  },
  {
    "path": "docs/userguide/Notification.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Notifications"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Notifications*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often have deadlines to meet or appointments for home visits. You can schedule the application to notify you for these deadlines/events. This section describes the features that will allow you to manage such notifications."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Enabling the Notifications `notif enable`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can enable notifications for upcoming appointments using `notif enable`."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif enable`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Disabling the Notifications `notif disable`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can disable notifications for upcoming appointments using `notif disable`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif disable`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Setting the Notification Time ahead of Appointments: `notif apptalert`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "By default, the application will prompt a notification 30 minutes before any of your appointments. You can change that using `notif apptalert`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif apptalert m/MINUTES_BEFORE_APPOINTMENT`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * The application will prompt a notification `MINUTES_BEFORE_APPOINTMENT` minutes before any of your appointments."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `MINUTES_BEFORE_APPOINTMENT` is 30 minutes by default."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing all Notifications: `notif list`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see the list of your notifications using `notif list`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif list`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finding Notification(s): `notif find`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can find notifications that fit the parameters given using `notif find`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each notification will have an *index* number which can then be used for other features that require you to select a notification by *index* e.g. `notif delete`. Take note that a notification will be given the same *index* regardless of other display commands such as `notif find` or if different parameters are used."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif find [n/NAME] [b/BODY] [d/DATE(DD-MM-YYYY)] [t/TIME(HH:mm)]`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If the parameter is text (e.g. `n/NAME`), partial words will be matched (e.g. `n/John` will return `John Smith` and `John Kim`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a Notification: `notif add`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add your own notifications (that are not attached to any appointments) using `notif add`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif add n/NAME b/BODY d/DATE(DD-MM-YYYY) t/TIME(HH:mm)`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Example: `notif add n/Call Terry b/Remind Terry to take his medicine d/23-03-2019 t/13:00`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting a Notification: `notif delete`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a notification by *index* using `notif delete`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `notif delete INDEX`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the notification at the specified `INDEX`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of notifications displayed by `notif list` or `notif find`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Notifications that were added because of an appointment can be deleted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `notif list` +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`notif delete 2` +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd notification in the notification list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `notif delete 1` +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the notification which had been assigned the index 1."
      }
    ],
    "authorContributionMap": {
      "crazoter": 82
    }
  },
  {
    "path": "docs/userguide/Patient.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::patient[]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Patient Features"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Patient Features*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often need to visit various patients at their homes. This section describes the features that will allow you to manage the list of patients and their information in the application. This section covers the management of patients and their data."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Listing All Patients: `pat-list`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can see a list of all patients in the app by typing `pat-list`."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In the list displayed, each patient will have an *index* number which can then be used for other features that require you to select a patient by *index* e.g. `pat-delete`. Take note that a patient will be given the same *index* regardless of other display commands such as `pat-find`. However, this index may change if the `pat-delete` command is executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `pat-list`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Finding patients by name: `pat-find`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "You can find patients whose names contain any keyword of your choice using `pat-find`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "Format: `pat-find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Only the name of patients is searched."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Patients matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "* `pat-find John` +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Returns patients `john` and `John Doe`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "* `pat-find Betsy Tim John` +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Returns any patient(s) having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Adding a Patient: `pat-add`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can add a patient to the list of all patients by using `pat-add`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `pat-add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​ [vt/VISIT_TODO]…​`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A patient can have any number of tags."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A patient can have any number of visit todos."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * The patient cannot have the same **identity** an existing patient."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "TIP: Visit Todos are described in further detail under \u003c\u003cVisitHowTo\u003e\u003e."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `pat-add n/John Doe p/98765432 e/john@email.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `pat-add n/Choong Siew Hwang p/91239876 a/22 College Avenue East; Singapore 138608 e/cho0ng@email.com t/Male vt/Check Blood Pressure`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * `pat-add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Street p/12345678 t/Female vt/Check fridge for expired food vt/Check for bed sores`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ".Patient identity"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "A patient is identified by three things: their name, phone number, and email. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Two patient entries are said to have the same **identity** (and thus refer to the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "same person) when both of the following conditions are satisfied:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "1. They have the same name (case insensitive)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "2. They have the same phone number **or** email."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "To prevent duplicates, there cannot be two patients with the same identity in the app at"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "the same time."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Editing a Patient: `pat-edit`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can edit an existing patient in the app using `pat-edit`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `pat-edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]… [vt/VISIT_TODO]…`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Edits the person at the specified `INDEX`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of patients displayed by `pat-list` or `pat-find`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* When editing visit todos, the existing visit todos of the person will be removed i.e adding of visit todos is not cumulative."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* You can remove all the person\u0027s visit todos by typing `vt/` without specifying any visit todos after it."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "TIP: Visit Todos are described in further detail under \u003c\u003cVisitHowTo\u003e\u003e."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `pat-list` +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": " `pat-edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the phone number and email address of the 1st person in the entire patient\u0027s list to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `pat-edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Edits the name of the 2nd person in the entire patient\u0027s list with `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Deleting a Patient: `pat-delete`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can delete a patient by *index* using `pat-delete`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `pat-delete INDEX`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Deletes the patient at the specified `INDEX`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of patients displayed by `pat-list` or `pat-find`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* All patients with an index number higher than the deleted patient will have their indexes decremented by 1. E.g. after"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deleting index 3, index 4 will become 3, 5 will become 4 and so on."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `pat-list` +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`pat-delete 2` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the 2nd patient in the patient list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `pat-delete 1` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Deletes the patient which had been assigned the index 1."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Warning:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If `pat-delete` is successfully executed, the indexes of remaining patients may change. Please verify the index of the patient you are referencing after executing this command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::patient[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003d\u003d\u003d Clear all Patient data: `pat-clear`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "francislow"
        },
        "content": "You can clear all Patient data in the app using `pat-clear`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "francislow"
        },
        "content": "Format: `pat-clear`"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 18,
      "crazoter": 108,
      "francislow": 11
    }
  },
  {
    "path": "docs/userguide/Security.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Login System \u0026 Security `[coming in v2.0]`"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Login System \u0026 Security*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often be managing your patients\u0027 confidential data. A login system will be useful in helping you to ensure the confidentiality and security of your patients\u0027 information. This section describes the features that will allow you to manage this security system."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Enabling the Login System `login-enable` `[coming in v2.0]`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you haven\u0027t setup a login PIN, you can enable the login system by setting a login pin using `login-enable`."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `login-enable PIN`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * The PIN is a series of 6 alphanumeric characters (case sensitive)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Disabling the Login System `login-disable` `[coming in v2.0]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you have setup a login PIN, you can disable the login system using `login-disable`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `login-disable CURRENT_PIN`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * CURRENT_PIN refers to the PIN that you use to login."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * CURRENT_PIN is a series of 6 alphanumeric characters (case sensitive)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Changing the Login Pin `login-changepin` `[coming in v2.0]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you have setup a login PIN, you can change the pin using `login-changepin`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `login-changepin o/OLD_PIN n/NEW_PIN`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * OLD_PIN refers to the PIN that you use to login."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * NEW_PIN refers to the new PIN that you want to use in the future."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * OLD_PIN and NEW_PIN are a series of 6 alphanumeric characters (case sensitive)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Locking the Application `login-lock` `[coming in v2.0]`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you have setup a login PIN, you can lock the application using `login-lock`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `login-lock`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Changing Login Lock Timeout `login-timeout` `[coming in v2.0]`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you have setup a login PIN, you can change the amount of time (in minutes) before the system automatically locks the application using `login-timeout`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `login-timeout MINUTES`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Example: `login-timeout 3` will configure the system to automatically lock the application after 3 minutes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Logging in / Unlocking the Application `[coming in v2.0]`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "On the lock screen you will be prompted to enter your PIN. Once you enter the correct and press kbd:[Enter], the application will unlock."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Data Encryption `[coming in v2.0]`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The save files of the application will be automatically encrypted using your PIN."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::dataencryption[]"
      }
    ],
    "authorContributionMap": {
      "crazoter": 64
    }
  },
  {
    "path": "docs/userguide/Visit.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::visit[]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "[[Visit]]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Visit Management"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Visit Management*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "As a community nurse, you will often make home visits to your patients. When you are visiting a patient, there is often a todo list that you will have to do as well as information that you will have to record. This can now be done using the app. This section describes the features that will allow you to start a visit, keep track of your tasks during a visit, finish a visit and view information recorded during previous visits."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Starting a Visit `visit-start`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can begin a visit by using `visit-start`. When you visit a patient and you want to record in the application that you are visiting said patient, you can use this feature to begin the visit for that patient (which will unlock the `visit-now-update` and `visit-now-finish` commands that will be applied to that visit). You can only have one ongoing visit at any point in time. This ongoing visit can be viewed in the \"Current Visit\" tab."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "`visit-start` uses the patient\u0027s Visit Todos to populate a checklist of Visit Tasks for you to use (these Visit Tasks are simply referred to as \"tasks\"). Visit Todos are described in further detail under \u003c\u003cVisitHowTo\u003e\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `visit-start INDEX`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Begins a visit for the patient specified at `INDEX`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index refers to the index number shown in the list of patients displayed by `pat-list` or `pat-find`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* There can only be one ongoing visit at any point in time; if there is already an ongoing visit this command does nothing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `visit-start 1` +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Starts a visit for the 1st patient in the patient list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Updating the ongoing Visit `visit-now-update`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Once you have begun a visit using `visit-start`, the application will note that you have an ongoing visit. You can then update the details of this ongoing visit using `visit-now-update`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `visit-now-update [t/TASK_INDEX DETAIL]… [f/TASK_INDEX]… [uf/TASK_INDEX]… [r/REMARK]`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Each argument (e.g. `t/`, `f/`, `uf/`, `r/`) triggers their own change to the visit:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `d/` Represents \"detail\". Each task in the visit checklist can be assigned some information if it is useful for you. For example, if task of index 1 is \"Check Body Temp\", you can use `t/1 37.0degc` to record that detail to that task (`TASK_INDEX` followed by a space followed by the details you want to store)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `f/` Represents \"finish\". Each task begins as unfinished and to mark a task as finished, you can use this prefix. For example, to mark task of index 1 as finished, you can use `f/1` (`TASK_INDEX of the task you want to mark as finished)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `uf/` Represents \"un-finish\". If you have marked a task as finished prior using `f/` and you want to undo that, you can use `uf/` (e.g. for task index 1 use `uf/1`)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `r/` Represents \"remark\". You can use this to update the remarks section of the visit."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "When you are on the \"Current Visit\" tab, you will see information of the patient you are currently visiting, a checklist of tasks and a remarks section. `TASK_INDEX` refers to the index number of the task (shown in the displayed checklist of tasks)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `TASK_INDEX` refers to the index number of the task (shown in the displayed checklist of tasks)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Each argument can target different `TASK_INDEX` es. This allows you to use this command to update multiple tasks at once."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Other notes:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* If you use both `f/` and `uf/` on the same task in a single `visit-now-update` command, `uf/` will take priority (i.e. the task will be marked as unfinished)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* A task does not need to be marked as finished in order to finish the visit. It is simply for your reference and to help you keep track of which tasks have / have not been finished."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "****"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Assume that you have an ongoing visit and 2 tasks (task 1 is \"Check Blood Pressure\", task 2 is \"Check for bed bugs\") in your visit checklist. After you\u0027re done, you can update the application using:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `visit-now-update d/1 140/90mmHg f/1 f/2 r/Patient is healthy`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "This sets the details for task 1 in the checklist to \"140/90mmHg\" and marks tasks 1 and 2 as finished. It also sets the remarks to \"Patient is healthy\"."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Assuming then in the above scenario you discovered bed bugs after checking again before you leave. You decide to help the patient change the bedsheets and you want to update that information. You can run:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* `visit-now-update uf/2 r/Patient must be reminded to wash bedsheets regularly`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "This would set task 2 to unfinished and change the remarks. Once you have finished changing the bedsheets, you can then verify there are no bed bugs and use `visit-now-update f/2` to mark task 2 as finished."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Cancelling the ongoing Visit `visit-cancel`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Once you have begun a visit using `visit-start`, the application will note that you have an ongoing visit. You can cancel that visit using `visit-cancel`, which will cancel the visit and remove it from the list of visits of the patient. The ongoing visit will also be removed from the Current Visit tab."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `visit-cancel`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d Finishing the ongoing Visit `visit-end`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Once you have begun a visit using `visit-start`, the application will note that you have an ongoing visit. You can then mark that visit as finished using `visit-end`, which will archive that visit. The ongoing visit will be removed from the Current Visit tab."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Format: `visit-end`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::visit[]"
      }
    ],
    "authorContributionMap": {
      "crazoter": 90
    }
  },
  {
    "path": "docs/userguide/VisitHowTo.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// tag::visithowto[]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "[[VisitHowTo]]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d Visit Tutorials / How-To Guide(s)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d What are Visit Todos (and Visit Tasks)?"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Visit Todos are, as the name suggests, todo items. These are items that are attached to a patient and are todo items that you want to be reminded to do when you visit that patient. Each Visit Todo contains a description of that task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "When you begin a visit using `visit-start`, the patient\u0027s Visit Todos are copied into the visit checklist as Visit Tasks. Each visit task has a description (of the visit todo it was copied from), a field for you to add details to that task and a flag to indicate if that task is finished."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d How to view the ongoing visit"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The ongoing visit can be viewed by clicking on the current visit tab. Note that you will have to change tabs manually and your commands will not affect which tab you are viewing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "image::CurrentVisit.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d How to view the visit todos of a patient"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can view the visit todos of a patient using `pat-list` and `pat-find`. Visit Todos are displayed under their patient details. A visual representation can be seen below under."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d How to view visits of a patient (previous and ongoing)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can view the visits of a patient using `pat-list` and `pat-find`. Visits are displayed under their patient details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "image::VisitTodoAndVisits.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003d\u003d\u003d How to manage a visit (an example)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "To introduce how to manage a visit, let\u0027s use an example where you have a patient named John Heng. Assume that John is a new patient (his data is not in NurseTraverse) and you have the following list of things (visit todos) you want to do when you visit him:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Take Blood Pressure"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Take Body Temperature"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "* Restock Medicine"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Adding a new patient with Visit Todos* +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you are adding a new patient, you can add these visit todos using `pat-add`. Example: `pat-add n/John Heng p/82221222 e/john@gmail.com a/John\u0027s address t/Male vt/Take Blood Pressure vt/Take Body Temperature vt/Restock Medicine`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Editing the Visit Todos of a patient* +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Alternatively, if John is an existing patient in NurseTraverse you can update John\u0027s list of Visit Todos using `pat-edit`. In this scenario, John is the 2nd patient in `pat-list`, so you would use `pat-edit 2 vt/Take Body Temperature vt/Restock Medicine`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Starting a Visit* +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Let\u0027s assume that you decide to visit John\u0027s house. When you are at John\u0027s house during a house visit and you want to begin keeping track of your visit and recording visit details, you can use `visit-start`. In this scenario, John is the 2nd patient in `pat-list`, so you would use `visit-start 2`. Since you can only be visiting one patient at one time, you can only have one ongoing visit at any time; `visit-start` can only be performed if there is no ongoing visit."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Cancelling a Visit* +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you realized you started the visit for a wrong person, you can cancel it using `visit-cancel`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Updating a Visit\u0027s details* +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Once you have begun a visit using `visit-start`, you can begin updating the visit\u0027s details using `visit-now-update`. Let\u0027s assume that you\u0027ve finished all the tasks in the checklist during your visit with John, so an example would be `visit-now-update f/1 f/2 f/3`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you accidentally marked a task as finished, you can mark it as unfinished using `uf/TASK_INDEX` e.g. `visit-now-update uf/1`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "If you also want to add details to the tasks (e.g. record the blood pressure as task 1, body temperature as task 2) you can do so like this: `visit-now-update d/1 140/90mmHg d/2 37.0`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can also set the visit\u0027s remarks. An example would be `visit-now-update r/Remember to bring stretch band next session`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Finally, you can combine all of the above into one command: `visit-now-update f/1 f/2 f/3 d/1 140/90mmHg d/2 37.0 r/Remember to bring stretch band next session`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Finishing a Visit* +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Finally, once you have concluded the visit, you can finish the visit using `visit-end`. This will tell the application that the ongoing visit has concluded. It will then save the visit under the patient (in this case, John)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "*Viewing previous Visits* +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "You can view the visits of a patient using `pat-list` and `pat-find`. Visits are displayed under their patient details. In this case, it may be better to use `pat-find` to find John\u0027s records e.g. `pat-find John Heng`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "// end::visithowto[]"
      }
    ],
    "authorContributionMap": {
      "crazoter": 63
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.JsonPatientBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.PatientBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PatientBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBookStorage patientBookStorage \u003d new JsonPatientBookStorage(userPrefs.getPatientBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        storage \u003d new StorageManager(patientBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s patient book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The data from the sample patient book will be used instead if {@code storage}\u0027s patient book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * or an empty patient book will be used instead if errors occur when reading {@code storage}\u0027s patient book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cReadOnlyPatientBook\u003e patientBookOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ReadOnlyPatientBook initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            patientBookOptional \u003d storage.readPatientBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (!patientBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PatientBook\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            initialData \u003d patientBookOptional.orElseGet(SampleDataUtil::getSamplePatientBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PatientBook\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            initialData \u003d new PatientBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PatientBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            initialData \u003d new PatientBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PatientBook\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        logger.info(\"Starting PatientBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Patient book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 45,
      "-": 139
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/autocomplete/AssociableWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Interface class for words that has associated words"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "public interface AssociableWord {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    LinkedList\u003cString\u003e getAssociatedWordList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "francislow": 9
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/autocomplete/AutoCompleteListHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": " * A handler class that updates list of autocomplete words to be shown according to userinput"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class AutoCompleteListHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private AutoCompleteWordStorage autoCompleteWordStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public AutoCompleteListHandler(AutoCompleteWordStorage autoCompleteWordStorage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.autoCompleteWordStorage \u003d autoCompleteWordStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Choose initial list to be suggested"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public ObservableList\u003cAutoCompleteWord\u003e chooseInitialList(LinkedList\u003cAutoCompleteWord\u003e matchedAutoCompleteWords) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "        ObservableList\u003cAutoCompleteWord\u003e currentList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (matchedAutoCompleteWords.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "            // Set to object list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": "            currentList \u003d autoCompleteWordStorage.getOListAllObjectWord();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "        } else if (matchedAutoCompleteWords.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "            // Set to command list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "            currentList \u003d autoCompleteWordStorage.getOListAllCommandWord();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "        } else if (matchedAutoCompleteWords.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "            // Set to prefix/index/empty list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "            if (((CommandWord) matchedAutoCompleteWords.get(1)).hasIndex()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": "                currentList \u003d autoCompleteWordStorage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        .generateOListAllIndexWord((ObjectWord) matchedAutoCompleteWords.get(0));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": "            } else if (((CommandWord) matchedAutoCompleteWords.get(1)).hasPrefix()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": "                currentList \u003d autoCompleteWordStorage.getOListAllPrefixWord();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "                currentList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": "            // Set to prefix/empty list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "francislow"
        },
        "content": "            if (((CommandWord) matchedAutoCompleteWords.get(1)).hasPrefix()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "francislow"
        },
        "content": "                currentList \u003d autoCompleteWordStorage.getOListAllPrefixWord();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": "                currentList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return currentList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Update list of autocomplete words to be suggested according to current phrase in command box textfield"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param currentList       list to be updated"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param segments          Array of segments of the full command in textfield"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param firstSegmentParts Linkedlist of parts in first segment of segments array"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @return updatedList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public ObservableList\u003cAutoCompleteWord\u003e updateList(LinkedList\u003cAutoCompleteWord\u003e matchedAutoCompleteWords,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                                       ObservableList\u003cAutoCompleteWord\u003e currentList, String[] segments,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                                       LinkedList\u003cString\u003e firstSegmentParts) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "francislow"
        },
        "content": "        ObservableList\u003cAutoCompleteWord\u003e updatedList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "francislow"
        },
        "content": "        LinkedList\u003cString\u003e combinedList \u003d new LinkedList\u003c\u003e(firstSegmentParts);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "francislow"
        },
        "content": "        combinedList.addAll(Arrays.asList(segments).subList(1, segments.length));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (matchedAutoCompleteWords.size() \u003d\u003d combinedList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "francislow"
        },
        "content": "            return currentList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "francislow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "francislow"
        },
        "content": "            for (AutoCompleteWord autoCompleteWord : currentList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "francislow"
        },
        "content": "                if (autoCompleteWord.getSuggestedWord().startsWith(combinedList.get(matchedAutoCompleteWords.size()))) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    updatedList.add(autoCompleteWord);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "francislow"
        },
        "content": "            // Add \u0027-\u0027 to each object word displayed for user understanding"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "francislow"
        },
        "content": "            addDashToObjectWordList(updatedList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "francislow"
        },
        "content": "            return updatedList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Filter unrelated words from either prefix or command wordlist"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param listToBeSuggested list to be filtered"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @return filteredList"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public ObservableList\u003cAutoCompleteWord\u003e filterList(LinkedList\u003cAutoCompleteWord\u003e matchedAutoCompleteWords,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                                       ObservableList\u003cAutoCompleteWord\u003e listToBeSuggested) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "francislow"
        },
        "content": "        ObservableList\u003cAutoCompleteWord\u003e filteredList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Perform filter only if listToBeSuggested is not empty and is a prefix or command list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (listToBeSuggested.size() !\u003d 0 \u0026\u0026 (listToBeSuggested.get(0) instanceof PrefixWord"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "francislow"
        },
        "content": "                || listToBeSuggested.get(0) instanceof CommandWord)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "francislow"
        },
        "content": "            // filter based on first 2 correct word"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "francislow"
        },
        "content": "            for (AutoCompleteWord autoCompleteWord : listToBeSuggested) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "francislow"
        },
        "content": "                boolean isAssociable \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "francislow"
        },
        "content": "                // Checks what if word in list are associable to the correctly matched words"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "francislow"
        },
        "content": "                // Checks for first match word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "francislow"
        },
        "content": "                if (matchedAutoCompleteWords.size() \u003e\u003d 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    boolean isAssociableToFirstWord \u003d matchedAutoCompleteWords.get(0).getSuggestedWord()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "francislow"
        },
        "content": "                            .equals(((AssociableWord) autoCompleteWord).getAssociatedWordList().get(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    if (!isAssociableToFirstWord) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        isAssociable \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "francislow"
        },
        "content": "                // Checks for second match word"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "francislow"
        },
        "content": "                if (matchedAutoCompleteWords.size() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    boolean isAssociableToSecondWord \u003d matchedAutoCompleteWords.get(1).getSuggestedWord()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "francislow"
        },
        "content": "                            .equals(((AssociableWord) autoCompleteWord).getAssociatedWordList().get(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    if (!isAssociableToSecondWord) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        isAssociable \u003d false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "francislow"
        },
        "content": "                if (isAssociable) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    filteredList.add(autoCompleteWord);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "francislow"
        },
        "content": "            return filteredList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "francislow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "francislow"
        },
        "content": "            return listToBeSuggested;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Add - for each word in object list, for user understanding in the autocomplete panel ui"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param objectList list for words to add dash to"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void addDashToObjectWordList(ObservableList\u003cAutoCompleteWord\u003e objectList) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (objectList.size() !\u003d 0 \u0026\u0026 objectList.get(0) instanceof ObjectWord) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "francislow"
        },
        "content": "            for (int i \u003d 0; i \u003c objectList.size(); i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "francislow"
        },
        "content": "                objectList.set(i, new AutoCompleteWord(objectList.get(i).getSuggestedWord() + \"-\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "francislow": 136
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/autocomplete/AutoCompleteWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Represents an autocomplete word in application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class AutoCompleteWord {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private String suggestedWord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public AutoCompleteWord(String suggestedWord) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.suggestedWord \u003d suggestedWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public String getSuggestedWord() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return suggestedWord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public String getConnectorChar() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "francislow": 19
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/autocomplete/AutoCompleteWordStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ImportMergeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ImportReplaceCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.AddAppointmentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.FindAppointmentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.BeginVisitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.CancelOngoingVisitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.FinishOngoingVisitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.UpdateOngoingVisitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Class that initialise and stores all list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class AutoCompleteWordStorage {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public static final String VISIT_OBJECT_WORD \u003d UserinputParserUtil"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "            .parseFirstSegment(BeginVisitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "            .get(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public static final String PATIENT_OBJECT_WORD \u003d UserinputParserUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": "            .parseFirstSegment(AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": "            .get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public static final String APP_OBJECT_WORD \u003d UserinputParserUtil"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "francislow"
        },
        "content": "            .parseFirstSegment(ExportCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": "            .get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public static final String APPT_OBJECT_WORD \u003d UserinputParserUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "francislow"
        },
        "content": "            .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "francislow"
        },
        "content": "            .get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private ObservableList\u003cAutoCompleteWord\u003e oListAllObjectWord;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private ObservableList\u003cAutoCompleteWord\u003e oListAllCommandWord;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private ObservableList\u003cAutoCompleteWord\u003e oListAllPrefixWord;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private FilteredList\u003cPatient\u003e patList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private FilteredList\u003cAppointment\u003e apptList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public AutoCompleteWordStorage(FilteredList\u003cPatient\u003e patList, FilteredList\u003cAppointment\u003e apptList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.oListAllCommandWord \u003d initAllCommandWordList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.oListAllPrefixWord \u003d initAllPrefixWordList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.oListAllObjectWord \u003d initAllObjectWordList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.patList \u003d patList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.apptList \u003d apptList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Initialise command list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private ObservableList\u003cAutoCompleteWord\u003e initAllCommandWordList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "francislow"
        },
        "content": "        ObservableList\u003cAutoCompleteWord\u003e oListAllCommandWord \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Visit commands"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(VISIT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(BeginVisitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), true, false));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(VISIT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(CancelOngoingVisitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, false));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(VISIT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(FinishOngoingVisitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, false));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(VISIT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(UpdateOngoingVisitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, true));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // App commands"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(APP_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(UndoCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, false));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(APP_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(RedoCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, false));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(APP_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(ImportReplaceCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, true));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(APP_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(ImportMergeCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, true));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(APP_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(ExportCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, true));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(APP_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(HelpCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, false));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Patient commands"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(ListCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, false));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(FindCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, false));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, true));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), true, true));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(DeleteCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), true, false));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(ClearCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, false));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Appointment commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, true));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(DeleteAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), true, false));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, true));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllCommandWord.add(new CommandWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(FindAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), false, false));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return oListAllCommandWord;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Initialise prefix list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private ObservableList\u003cAutoCompleteWord\u003e initAllPrefixWordList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "francislow"
        },
        "content": "        ObservableList\u003cAutoCompleteWord\u003e oListAllPrefixWord \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Visit prefixes"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(VISIT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(UpdateOngoingVisitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_VISIT_TASK_INDEX_AND_DETAIL.getPrefix()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(VISIT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(UpdateOngoingVisitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_TAG.getPrefix()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(VISIT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(UpdateOngoingVisitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_VISIT_TASK_UNFINISH.getPrefix()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(VISIT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(UpdateOngoingVisitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_VISIT_REMARKS.getPrefix()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(VISIT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(UpdateOngoingVisitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_VISIT_TASK_FINISH.getPrefix()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // App prefixes"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APP_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(ExportCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_INDEXES.getPrefix()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APP_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(ExportCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_NAME.getPrefix()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APP_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(ImportReplaceCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_NAME.getPrefix()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APP_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(ImportMergeCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_NAME.getPrefix()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Pat prefixes"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_NAME.getPrefix()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_PHONE.getPrefix()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_EMAIL.getPrefix()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_ADDRESS.getPrefix()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_TAG.getPrefix()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_PATIENT_VISIT_TODO.getPrefix()));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_NAME.getPrefix()));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_PHONE.getPrefix()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_EMAIL.getPrefix()));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_ADDRESS.getPrefix()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_TAG.getPrefix()));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(PATIENT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_PATIENT_VISIT_TODO.getPrefix()));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Appt prefixes"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Add"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_PATIENT_INDEX.getPrefix()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_APPOINTMENT_START_DATE_AND_TIME.getPrefix()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_APPOINTMENT_END_DATE_AND_TIME.getPrefix()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_YEARS.getPrefix()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_MONTHS.getPrefix()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_WEEKS.getPrefix()));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_DAYS.getPrefix()));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_HOURS.getPrefix()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_MINUTES.getPrefix()));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(AddAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_APPOINTMENT_DESCRIPTION.getPrefix()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Edit"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_PATIENT_INDEX.getPrefix()));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_APPOINTMENT_START_DATE_AND_TIME.getPrefix()));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_APPOINTMENT_END_DATE_AND_TIME.getPrefix()));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_YEARS.getPrefix()));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_MONTHS.getPrefix()));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_WEEKS.getPrefix()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_DAYS.getPrefix()));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_HOURS.getPrefix()));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_RECUR_MINUTES.getPrefix()));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllPrefixWord.add(new PrefixWord(APPT_OBJECT_WORD, UserinputParserUtil"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .parseFirstSegment(EditAppointmentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .get(1), CliSyntax.PREFIX_APPOINTMENT_DESCRIPTION.getPrefix()));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return oListAllPrefixWord;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Initialise object list"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private ObservableList\u003cAutoCompleteWord\u003e initAllObjectWordList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "francislow"
        },
        "content": "        ObservableList\u003cAutoCompleteWord\u003e oListAllObjectWord \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllObjectWord.add(new ObjectWord(PATIENT_OBJECT_WORD));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllObjectWord.add(new ObjectWord(APP_OBJECT_WORD));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllObjectWord.add(new ObjectWord(VISIT_OBJECT_WORD));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "francislow"
        },
        "content": "        oListAllObjectWord.add(new ObjectWord(APPT_OBJECT_WORD));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return oListAllObjectWord;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public ObservableList\u003cAutoCompleteWord\u003e getOListAllCommandWord() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return FXCollections.observableArrayList(oListAllCommandWord);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public ObservableList\u003cAutoCompleteWord\u003e getOListAllPrefixWord() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return FXCollections.observableArrayList(oListAllPrefixWord);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public ObservableList\u003cAutoCompleteWord\u003e getOListAllObjectWord() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return FXCollections.observableArrayList(oListAllObjectWord);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Generate index word list according to the number of specified object present"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param objectWord object that determines the number of index that will be generated"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @return list of index word"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public ObservableList\u003cAutoCompleteWord\u003e generateOListAllIndexWord(ObjectWord objectWord) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "francislow"
        },
        "content": "        FilteredList listToGenerateFrom;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (objectWord.getSuggestedWord().equals(APPT_OBJECT_WORD)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "francislow"
        },
        "content": "            listToGenerateFrom \u003d apptList;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "francislow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "francislow"
        },
        "content": "            listToGenerateFrom \u003d patList;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "francislow"
        },
        "content": "        ObservableList\u003cAutoCompleteWord\u003e oListAllIndexWord \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "francislow"
        },
        "content": "        for (int i \u003d 0; i \u003c listToGenerateFrom.size(); i++) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "francislow"
        },
        "content": "            oListAllIndexWord.add(new IndexWord(Integer.toString(i + 1)));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return oListAllIndexWord;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 11,
      "francislow": 314
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/autocomplete/CommandWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Represents an autocomplete command word(eg: find, sort, delete) in application"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class CommandWord extends AutoCompleteWord implements AssociableWord {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private String associatedWord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private boolean hasIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private boolean hasPrefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public CommandWord(String associatedWord, String suggestionWord, Boolean hasIndex , Boolean hasPrefix) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "        super(suggestionWord);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.associatedWord \u003d associatedWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.hasIndex \u003d hasIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.hasPrefix \u003d hasPrefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public LinkedList\u003cString\u003e getAssociatedWordList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "        LinkedList\u003cString\u003e associatedWordList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "        associatedWordList.add(associatedWord);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return associatedWordList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public boolean hasIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return hasIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public boolean hasPrefix() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return hasPrefix;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "francislow": 32
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/autocomplete/IndexWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Represents an index word(eg: 1, 2, 3) in application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class IndexWord extends AutoCompleteWord {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public IndexWord(String suggestionWord) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "        super(suggestionWord);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "francislow": 10
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/autocomplete/MatchedWordUpdater.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Update current matching words based on string in command box text field"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class MatchedWordUpdater {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private LinkedList\u003cAutoCompleteWord\u003e matchedAutoCompleteWords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private AutoCompleteWordStorage autoCompleteWordStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private AutoCompleteListHandler autoCompleteListHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public MatchedWordUpdater(AutoCompleteWordStorage autoCompleteWordStorage,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "                              AutoCompleteListHandler autoCompleteListHandler) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.autoCompleteWordStorage \u003d autoCompleteWordStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.autoCompleteListHandler \u003d autoCompleteListHandler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.matchedAutoCompleteWords \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Update matchedAutoCompleteWords list given userinput"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param segments segments of the userinputs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param firstSegmentParts parts of the first segment of userinput"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void updateMatchedWords(String[] segments, LinkedList\u003cString\u003e firstSegmentParts) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // segments[0] -\u003e object-command format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // segments[1] -\u003e either prefix or index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // segments[2] onwards -\u003e prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "        matchedAutoCompleteWords.clear();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "        boolean isCorrectFirstSegment \u003d matchFirstSegment(firstSegmentParts);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (segments.length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": "            boolean isCorrectSecondSegment \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": "            if (isCorrectFirstSegment) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "                isCorrectSecondSegment \u003d matchSecondSegment(segments[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "francislow"
        },
        "content": "            if (segments.length \u003e\u003d 3 \u0026\u0026 isCorrectFirstSegment \u0026\u0026 isCorrectSecondSegment) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": "                matchRestOfSegment(segments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Check if first segment of userinput matches with current matched words"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param firstSegmentParts parts of the first segment of userinput"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @return true if first segment parts matches with current matched words"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public boolean matchFirstSegment(LinkedList\u003cString\u003e firstSegmentParts) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "francislow"
        },
        "content": "        boolean isCorrectObjectWord \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "francislow"
        },
        "content": "        boolean isCorrectCommandWord \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (firstSegmentParts.size() \u003e\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "francislow"
        },
        "content": "            // First object word"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "francislow"
        },
        "content": "            for (AutoCompleteWord autoCompleteWord : autoCompleteWordStorage.getOListAllObjectWord()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "francislow"
        },
        "content": "                if (firstSegmentParts.get(0).matches(autoCompleteWord.getSuggestedWord())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    matchedAutoCompleteWords.add(autoCompleteWord);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    isCorrectObjectWord \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "francislow"
        },
        "content": "            // Second command word"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "francislow"
        },
        "content": "            if (firstSegmentParts.size() \u003d\u003d 2 \u0026\u0026 isCorrectObjectWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "francislow"
        },
        "content": "                for (AutoCompleteWord autoCompleteWord : autoCompleteWordStorage.getOListAllCommandWord()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    if (firstSegmentParts.get(1).matches(autoCompleteWord.getSuggestedWord())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        matchedAutoCompleteWords.add(autoCompleteWord);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        isCorrectCommandWord \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return isCorrectObjectWord \u0026\u0026 isCorrectCommandWord;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Check if second segment of userinput matches with current matched words"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param secondSegment second segment of userinput"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @return true if second segment matches with current matched words"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public boolean matchSecondSegment(String secondSegment) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "francislow"
        },
        "content": "        boolean isCorrect \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (((CommandWord) matchedAutoCompleteWords.get(1)).hasIndex()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "francislow"
        },
        "content": "            for (AutoCompleteWord autoCompleteWord : autoCompleteWordStorage"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    .generateOListAllIndexWord((ObjectWord) matchedAutoCompleteWords.get(0))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "francislow"
        },
        "content": "                if (secondSegment.equals(autoCompleteWord.getSuggestedWord())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    matchedAutoCompleteWords.add(autoCompleteWord);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    isCorrect \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "francislow"
        },
        "content": "        } else if (((CommandWord) matchedAutoCompleteWords.get(1)).hasPrefix()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "francislow"
        },
        "content": "            for (AutoCompleteWord autoCompleteWord : autoCompleteListHandler"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    .filterList(matchedAutoCompleteWords, autoCompleteWordStorage.getOListAllPrefixWord())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "francislow"
        },
        "content": "                if (secondSegment.equals(autoCompleteWord.getSuggestedWord())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    matchedAutoCompleteWords.add(autoCompleteWord);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    isCorrect \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return isCorrect;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Check if all other segment of userinput matches with current matched words"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param segments Array of segments to be checked"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void matchRestOfSegment(String[] segments) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "francislow"
        },
        "content": "        for (int i \u003d 3; i \u003c\u003d segments.length; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "francislow"
        },
        "content": "            if (matchedAutoCompleteWords.size() \u003d\u003d i) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "francislow"
        },
        "content": "                for (AutoCompleteWord autoCompleteWord : autoCompleteListHandler"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        .filterList(matchedAutoCompleteWords, autoCompleteWordStorage.getOListAllPrefixWord())) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    if (segments[i - 1].equals(autoCompleteWord.getSuggestedWord())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        matchedAutoCompleteWords.add(autoCompleteWord);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @return string representation of all the matched words"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public String getCombinedMatchedWords() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "francislow"
        },
        "content": "        StringBuilder combinedMatchedWords \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "francislow"
        },
        "content": "        for (AutoCompleteWord autoCompleteWord : matchedAutoCompleteWords) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "francislow"
        },
        "content": "            combinedMatchedWords"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    .append(autoCompleteWord.getSuggestedWord())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    .append(autoCompleteWord.getConnectorChar());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return combinedMatchedWords.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public LinkedList\u003cAutoCompleteWord\u003e getMatchedAutoCompleteWords() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return matchedAutoCompleteWords;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "francislow": 143
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/autocomplete/ObjectWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Represents an object word(eg: patient, med, medcon) in application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class ObjectWord extends AutoCompleteWord {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public ObjectWord(String suggestionWord) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "        super(suggestionWord);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public String getConnectorChar() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return \"-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "francislow": 14
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/autocomplete/PrefixWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Represents a prefix word(eg: n/, t/) in application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class PrefixWord extends AutoCompleteWord implements AssociableWord {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    // Two associated words is needed since the PrefixWord suggested will depend on both object and command word."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private String associatedObjectWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private String associatedCommandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public PrefixWord(String associatedObjectWord, String associatedCommandWord, String suggestionWord) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "        super(suggestionWord);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.associatedCommandWord \u003d associatedCommandWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.associatedObjectWord \u003d associatedObjectWord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public LinkedList\u003cString\u003e getAssociatedWordList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "        LinkedList\u003cString\u003e associatedWordList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "        associatedWordList.add(associatedObjectWord);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "        associatedWordList.add(associatedCommandWord);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return associatedWordList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "francislow": 24
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/autocomplete/UserinputParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Utility class for parsing userinput"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class UserinputParserUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Parse userinput by spaces"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param currentPhraseInCommandBox string in command box text field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @return array of split strings"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public static String[] splitIntoSegments(String currentPhraseInCommandBox) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return currentPhraseInCommandBox.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Parse first segment of userinput into object and command word"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param firstSegment a string from the start of userinput to the first space"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @return linkedlist of object word and command word if they exist"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public static LinkedList\u003cString\u003e parseFirstSegment(String firstSegment) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "        LinkedList\u003cString\u003e splitWords \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "        String[] parts \u003d firstSegment.split(\"-\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (parts.length !\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "            String firstSplitWord \u003d parts[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "            splitWords.add(firstSplitWord);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "            String secondSplitWord \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": "            if (parts.length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": "                secondSplitWord \u003d parts[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    for (int i \u003d 2; i \u003c parts.length; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        secondSplitWord +\u003d \"-\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        secondSplitWord +\u003d parts[i];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "francislow"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    throw new IndexOutOfBoundsException(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "francislow"
        },
        "content": "            if (secondSplitWord !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "francislow"
        },
        "content": "                splitWords.add(secondSplitWord);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return splitWords;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "francislow": 51
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 850;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String LOG_FILE \u003d \"patientBook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d patients listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    // Appointment related messages"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d \"The appointment index provided is \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                                                            + \"invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_APPOINTMENTS_LISTED_OVERVIEW \u003d \"%1$d appointments listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 4,
      "crazoter": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 5,
      "crazoter": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/exceptions/CopyError.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Represents an error during the copying of data. This is a fatal error and cannot be caught with try-catch."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CopyError extends Error {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CopyError(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CopyError(Throwable cause) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CopyError(String message, Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 17,
      "crazoter": 1
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if {@code item A} items are equal to {@code item B}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean checkEqual(Collection\u003c?\u003e itemA, Collection\u003c?\u003e itemB) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireAllNonNull(itemA, itemB);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Iterator itemBIterator \u003d itemB.iterator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Object obj : itemA) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (!itemBIterator.hasNext()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    || !obj.equals(itemBIterator.next())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //If itemBIterator still has stuff, return false. Else true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return !itemBIterator.hasNext();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a String representation of {@code items} with each element separated"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * by a newline."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static \u003cE\u003e String collectionToString(Collection\u003cE\u003e items) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return collectionToString(items, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a String representation of {@code items} with each element separated"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * by a newline."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static \u003cE\u003e String collectionToString(Collection\u003cE\u003e items, boolean showIndexes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int oneIndex \u003d 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (E item : items) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (showIndexes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(oneIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(\". \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(item.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            oneIndex++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (sb.length() !\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.deleteCharAt(sb.length() - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a String representation of {@code items} with each element preceded by its"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * one-based index number and separated by a newline."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static \u003cE\u003e String collectionToStringShowingIndexes(Collection\u003cE\u003e items) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return collectionToString(items, true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 38,
      "crazoter": 18,
      "-": 34
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/util/CopyUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.CopyError;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Deep copies an object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CopyUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the specified object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param instance  the object to copy"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param \u003cT\u003e  the generic type of the object to copy"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the copied object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws CopyError  if an error occurs while copying"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static \u003cT\u003e T deepCopy(T instance) throws CopyError {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (instance instanceof Serializable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return (T) deepCopySerializable((Serializable) instance);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return deepCopyGeneric(instance);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the specified object. The copy is performed by using Jackson to serialize and then"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * deserialize the target object. Jackson may have issues with some classes so"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@link #deepCopySerializable(Serializable)} is preferred if the object is {@link Serializable}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param instance  the object to copy"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param \u003cT\u003e  the generic type of the object to copy"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the copied object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws CopyError  if an error occurs while copying"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static \u003cT\u003e T deepCopyGeneric(T instance) throws CopyError {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return (T) JsonUtil.fromJsonString(JsonUtil.toJsonString(instance), instance.getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new CopyError(\"Error copying object\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the specified serializable object. The copy is performed by serializing the target object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * with a stream and then deserializing it."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param serializable  the object to copy"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param \u003cT\u003e  class that implements Serializable"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the copied object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws CopyError  if an error occurs while copying"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static \u003cT extends Serializable\u003e T deepCopySerializable(T serializable) throws CopyError {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(baos);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            oos.writeObject(serializable);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ByteArrayInputStream bais \u003d new ByteArrayInputStream(baos.toByteArray());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(bais);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return (T) ois.readObject();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new CopyError(\"Error copying serializable object\", e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the specified {@code ObservableList}. The copy is identical to the original except for"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * the listeners which will not be carried over. Any changes to the copied list or its elements will not affect"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * the original and vice versa."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static \u003cE\u003e ObservableList\u003cE\u003e deepCopyOfObservableList(ObservableList\u003cE\u003e list) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cE\u003e listCopy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (E item : list) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            listCopy.add(deepCopy(item));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return FXCollections.observableArrayList(listCopy);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 86,
      "crazoter": 2
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 81
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/util/VisitTaskUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.Detail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Helper class for Visit Todos"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitTaskUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates a list of Visit Tasks from a patient object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static List\u003cVisitTask\u003e listFromPatient(Patient patient) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patient.getVisitTodos().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(VisitTaskUtil::newTaskFromTodo)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Create a new VisitTask from a VisitTodo object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static VisitTask newTaskFromTodo(VisitTodo todo) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(todo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new VisitTask(todo, new Detail(\"\"), false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 34
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/commons/util/VisitUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Helper class for Visit Todos"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Get ongoing visit if exists. For Visit Commands that require an ongoing visit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Throws a CommandException if the ongoingVisit is empty."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Visit getOngoingVisitIfExists(Model model, String messageNoOngoingVisit)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(model, messageNoOngoingVisit);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cVisit\u003e ongoingVisit \u003d model.getOngoingVisit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (ongoingVisit.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(messageNoOngoingVisit);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ongoingVisit.get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 26
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/importexport/CsvUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.importexport;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.core.JsonGenerator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.databind.MappingIterator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectWriter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvMapper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.dataformat.csv.CsvSchema;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.FileUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.exceptions.ExportingException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.exceptions.ImportingException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.JsonAdaptedPatient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Reads and writes Java based Patient objects to and fro .csv files"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class CsvUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CsvUtil.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String MESSAGE_OVERRIDING_FORBIDDEN \u003d \"File with given filename already exists,\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"overriding is not allowed\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String MESSAGE_MISSING_FILE \u003d \"File not found.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String importFolder \u003d \"imports\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Writing/Export functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Writes a list of Patients into a .csv file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @param patients pathString"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static void writePatientsToCsv(List\u003cPatient\u003e patients, String pathString)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throws IOException, ExportingException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireAllNonNull(patients, pathString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        assert !patients.isEmpty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Path writePath \u003d Paths.get(pathString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (FileUtil.isFileExists(writePath)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new ExportingException(MESSAGE_OVERRIDING_FORBIDDEN);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        assert !patients.isEmpty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String toWrite \u003d getCsvStringFromPatients(patients);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        FileUtil.createFile(writePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        logger.info(\"Writing export data to: \" + writePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        FileUtil.writeToFile(writePath, toWrite);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a List of patient objects into a String to be written into a .csv file"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @param patients a list of patients"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @return csv friendly string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @throws JsonProcessingException"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static String getCsvStringFromPatients(List\u003cPatient\u003e patients) throws JsonProcessingException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CsvMapper mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        mapper.configure(JsonGenerator.Feature.IGNORE_UNKNOWN, true)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .addMixIn(JsonAdaptedPatient.class, PatientMixIn.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CsvSchema schema \u003d mapper.schemaFor(JsonAdaptedPatient.class).withHeader().withArrayElementSeparator(\"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        ObjectWriter writer \u003d mapper.writer(schema);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return writer.writeValueAsString(convertToCsvAdaptedList(patients));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a list of Patient objects to a list of Jackson .csv friendly objects"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @param patients a list of json adapted patients"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return csv adapted patients"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static List\u003cJsonAdaptedPatient\u003e convertToCsvAdaptedList(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(patients);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedPatient\u003e csvAdaptedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Patient patient : patients) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            csvAdaptedList.add(convertToCsvAdaptedPatient(patient));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return csvAdaptedList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a Patient object to a Jackson .csv friendly object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param patient"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return JsonAdaptedPatient"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static JsonAdaptedPatient convertToCsvAdaptedPatient(Patient patient) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new JsonAdaptedPatient(patient);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reading/Import functions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Reads data from a .csv file and converts it to a list of {@Code Patient} objects"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @param pathString the string of the path to read from"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return a list of patients"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @throws IOException from file util"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @throws IllegalValueException if illegal values exist in the .csv file"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static List\u003cPatient\u003e readPatientsFromCsv(String pathString)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throws IOException, IllegalValueException, ImportingException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(pathString);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Path readPath \u003d Paths.get(pathString);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (!FileUtil.isFileExists(readPath)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new ImportingException(MESSAGE_MISSING_FILE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CsvMapper mapper \u003d new CsvMapper();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        mapper.addMixIn(JsonAdaptedPatient.class, PatientMixIn.class)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                // when an empty field is encountered, create a null object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                .enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CsvSchema schema \u003d mapper.schemaFor(JsonAdaptedPatient.class)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    .withHeader()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    // list elements are separated by a new line"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    .withArrayElementSeparator(\"\\n\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        MappingIterator\u003cJsonAdaptedPatient\u003e iter \u003d mapper.readerFor(JsonAdaptedPatient.class)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    .with(schema)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    .readValues(readPath.toFile());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedPatient\u003e importedCsvPatients \u003d iter.readAll();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return convertImportedPatientsToPatientList(importedCsvPatients);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a {@Code JsonAdaptedPatient} read from a csv file into a {@Code Patient} object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static Patient convertToPatient(JsonAdaptedPatient patient) throws IllegalValueException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patient.toModelType();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a list of {@Code JsonAdaptedPatient} objects read from a csv file"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * into a list of {@Code Patient} objects"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static List\u003cPatient\u003e convertImportedPatientsToPatientList(List\u003cJsonAdaptedPatient\u003e patients)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPatient\u003e newPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (JsonAdaptedPatient patient : patients) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            newPatientList.add(convertToPatient(patient));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return newPatientList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Returns true if the imported list contains duplicates."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static boolean importsContainDupes(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(patients);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        int len \u003d patients.size();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        for (int i \u003d 0; i \u003c len - 1; i++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c len; j++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                if (patients.get(i).isSamePatient(patients.get(j))) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 136,
      "crazoter": 40
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/importexport/ImportExportPaths.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.importexport;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * The default import and export folder paths."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ImportExportPaths {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    // Folder paths"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String EXPORT_FOLDER \u003d \"exports\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String IMPORT_FOLDER \u003d \"imports\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 11
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/importexport/PatientMixIn.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.importexport;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.JsonAdaptedVisit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Additional Jackson annotations specific for csv Patient parsing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "abstract class PatientMixIn {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Visit fields are nested beyond two layers and cannot properly be represented in .csv"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private List\u003cJsonAdaptedVisit\u003e visits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 14,
      "crazoter": 4
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/importexport/exceptions/ExportingException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.importexport.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Represents an error that occurs during the export process, unrelated to IO."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ExportingException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public ExportingException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Constructs a new {@code ExportingException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public ExportingException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 16,
      "crazoter": 1
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/importexport/exceptions/ImportingException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.importexport.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " *  Represents an error that occurs during the import process, unrelated to IO."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ImportingException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public ImportingException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Constructs a new {@code ImportingException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public ImportingException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 17
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.model.HistoryRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the PatientBook."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @see Model#getStagedPatientBook()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ReadOnlyPatientBook getPatientBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of patients */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    FilteredList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of appointments */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    FilteredList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the user prefs\u0027 patient book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Path getPatientBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an unmodifiable view of the list of ongoing visits."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The current constraint is to only have 1 ongoing visit at any time."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ObservableList\u003cVisit\u003e getObservableOngoingVisitList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns an unmodifiable view of the list of the history."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    ObservableList\u003cHistoryRecord\u003e getObservableHistoryList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 6,
      "sandydays": 4,
      "crazoter": 26,
      "-": 34
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.AppParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.model.HistoryRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String STAGED_BUT_NOT_MUTATOR_ERROR_MESSAGE \u003d \"Command attempted to make changes but is not a \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + \"MutatorCommand\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private final AppParser appParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        appParser \u003d new AppParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Command command \u003d appParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (command instanceof MutatorCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (!model.hasStagedChanges()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                logger.info(\"Command \" + command + \" is a MutatorCommand but did not stage changes\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            model.commit((MutatorCommand) command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (model.hasStagedChanges()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                model.discardStagedChanges();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                logger.severe(\"Command \" + command + \" staged changes but is not a MutatorCommand.\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                        + \" Changes discarded.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                throw new CommandException(STAGED_BUT_NOT_MUTATOR_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            storage.savePatientBook(model.getStagedPatientBook());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ReadOnlyPatientBook getPatientBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return model.getStagedPatientBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public FilteredList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return model.getFilteredPatientList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public FilteredList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return model.getPatientBookFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ObservableList\u003cVisit\u003e getObservableOngoingVisitList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return model.getObservableOngoingVisitList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ObservableList\u003cHistoryRecord\u003e getObservableHistoryList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return model.getHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 26,
      "sandydays": 5,
      "crazoter": 29,
      "-": 55
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PATIENT_VISIT_TODO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Adds a patient to the patient book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class AddCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pat-add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the patient book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_PATIENT_VISIT_TODO + \"VISIT_TODO]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + PREFIX_TAG + \"Back Pain \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + PREFIX_TAG + \"Joint Pain \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_PATIENT_VISIT_TODO + \"Check blood pressure \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_PATIENT_VISIT_TODO + \"Check if patient has been drinking\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the patient book\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Patient toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AddCommand(Patient patient) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        toAdd \u003d patient;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (model.hasPatient(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.addPatient(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "cheongsiuhong": 2,
      "crazoter": 26,
      "-": 42
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Clears the patient book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class ClearCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pat-clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Patient book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.setStagedPatientBook(new PatientBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 7,
      "-": 15
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Full command text input by the user that resulted in the creation of this {@code Command}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private String commandText \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Sets the command text."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void setCommandText(String commandText) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        requireNonNull(commandText);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.commandText \u003d commandText;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns an {@code Optional} containing the command text. In the case where the {@code Command} was created"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * programmatically (e.g. in tests), this may return an empty {@code Optional}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Optional\u003cString\u003e getCommandText() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return Optional.ofNullable(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 24,
      "crazoter": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Deletes a patient identified using it\u0027s displayed index from the patient book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DeleteCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pat-delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_HAS_ONGOING_VISIT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \"Patient still has an ongoing visit. Please finish the visit before executing this operation.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPatient\u003e fullPatientList \u003d model.getStagedPatientList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d fullPatientList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patientToDelete \u003d fullPatientList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (model.patientHasOngoingVisit(patientToDelete)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATIENT_HAS_ONGOING_VISIT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 57
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PATIENT_VISIT_TODO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Edits the details of an existing patient in the patient book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class EditCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pat-edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"by the index number used in the displayed patient list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_PATIENT_VISIT_TODO + \"VISIT_TODO]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the patient book.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final EditPatientDescriptor editPatientDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param index of the patient in the filtered patient list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param editPatientDescriptor details to edit the patient with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditCommand(Index index, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(editPatientDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getStagedPatientList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.setPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.updateFilteredPatientList(Model.PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * edited with {@code editPatientDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assert patientToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Email updatedEmail \u003d editPatientDescriptor.getEmail().orElse(patientToEdit.getEmail());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Address updatedAddress \u003d editPatientDescriptor.getAddress().orElse(patientToEdit.getAddress());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPatientDescriptor.getTags().orElse(patientToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Collection\u003cVisitTodo\u003e updatedVisitTodos \u003d editPatientDescriptor.getVisitTodos()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .orElse(patientToEdit.getVisitTodos());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Editing visits with this command is not supported"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cVisit\u003e updatedVisits \u003d patientToEdit.getVisits();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new Patient(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                updatedVisitTodos, updatedVisits);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Stores the details to edit the patient with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * corresponding field value of the patient."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static class EditPatientDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        private Collection\u003cVisitTodo\u003e visitTodos;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public EditPatientDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public EditPatientDescriptor(EditPatientDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            setVisitTodos(toCopy.visitTodos);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, visitTodos);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * Sets {@code visitTodos} to this object\u0027s {@code visitTodos}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * A defensive copy of {@code visitTodos} is used internally."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void setVisitTodos(Collection\u003cVisitTodo\u003e visitTodos) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.visitTodos \u003d (visitTodos !\u003d null) ? new LinkedHashSet\u003c\u003e(visitTodos) : null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * Returns an unmodifiable visitTodo collection, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code visitTodos} is null."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public Optional\u003cCollection\u003cVisitTodo\u003e\u003e getVisitTodos() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return (visitTodos !\u003d null) ? Optional"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    .of(Collections.unmodifiableCollection(visitTodos)) : Optional.empty();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (!(other instanceof EditPatientDescriptor)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            EditPatientDescriptor e \u003d (EditPatientDescriptor) other;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (getVisitTodos().isEmpty() \u003d\u003d e.getVisitTodos().isEmpty()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //If both collections populated, ensure equal data"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (getVisitTodos().isPresent()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    //Verify visit todos separately because .equals doesn\u0027t work with Collection\u003c\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    if (!CollectionUtil.checkEqual(getVisitTodos().get(), e.getVisitTodos().get())) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //One empty, one populated, different"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 104,
      "-": 165
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"app-exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Patient book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_INDEXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.CsvUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.ImportExportPaths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.exceptions.ExportingException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Exports Patient data from the PatientBook"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"app-export\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \": Exports patients data into a .csv file in /exports.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Patients are exported selectively by index.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"If indexes are not provided, all patients will be exported.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"File name cannot be blank and can only contain alphanumerics, underscores and hyphens.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"File name must be new - overriding an existing file is not permitted.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Parameters: \" + PREFIX_FILENAME + \"FILENAME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"[\" + PREFIX_INDEXES + \"INDEXES]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_FILENAME + \"patient_data \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + PREFIX_INDEXES + \"2 \" + PREFIX_INDEXES + \"4 \" + PREFIX_INDEXES + \"6\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Export success! File written to: %s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Export failed.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"Nothing to export!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_FILE_EXISTS \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            \"File name already in use. Please delete the existing file or use a new file name\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private final String exportFileName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private final Optional\u003cSet\u003cIndex\u003e\u003e targetIndexes;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @param exportFileName of the .csv to create and export to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param targetIndexes of the patients to selectively export, if any"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public ExportCommand(String exportFileName, Optional\u003cSet\u003cIndex\u003e\u003e targetIndexes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        this.exportFileName \u003d exportFileName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * export all patients specified by {@Code targetIndexes}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * if no indexes are provided, all patients data are exported."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getStagedPatientList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (lastShownList.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Selectively export if indexes are provided"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (targetIndexes.isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            if (!indexesAllInBounds(targetIndexes.get(), lastShownList.size())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                // If any index is out of bounds, throw an exception"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            // Else get a list of patients at the specified indexes"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            lastShownList \u003d model.getPatientsByIndexes(targetIndexes.get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String pathString \u003d ImportExportPaths.EXPORT_FOLDER + \"/\" + exportFileName + \".csv\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            CsvUtil.writePatientsToCsv(lastShownList, pathString);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (ExportingException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_EXISTS, e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE, e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, pathString));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Returns true if indexes in the set are all within bounds."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private boolean indexesAllInBounds(Set\u003cIndex\u003e indexes, int bound) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        for (Index index : indexes) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d bound) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (!(other instanceof ExportCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        ExportCommand otherCommand \u003d (ExportCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return this.exportFileName.equals(otherCommand.exportFileName)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                \u0026\u0026 this.targetIndexes.equals(otherCommand.targetIndexes);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 97,
      "crazoter": 22
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Finds and lists all patients in patient book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pat-find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all patients whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, model.getFilteredPatientList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 9,
      "-": 33
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"app-help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.HistoryRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Displays the application data-changing command history to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"app-history\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"History shown.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cHistoryRecord\u003e history \u003d model.getHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return new CommandResult(String.format(\"There are %d records in the history:\\n%s\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                history.size(), CollectionUtil.collectionToStringShowingIndexes(history)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 20,
      "crazoter": 6
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/ImportMergeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.CsvUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.ImportExportPaths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.exceptions.ImportingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Imports data from a .csv file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Patients from the .csv are batch added into the AB."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class ImportMergeCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"app-import-merge\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \": Imports data from a .csv file in /imports.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"All patients in the .csv will be imported and merged with existing data.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Importing visit and appointment data is currently not supported.\\n \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"File name cannot be blank and can only contain alphanumerics, underscores and hyphens.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"File name provided must exist and be in .csv format\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Parameters: \" + PREFIX_FILENAME + \"FILENAME\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_FILENAME + \"new_patients_data\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Import success!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Import failed.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Check that the .csv file adheres to the format in the User Guide\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_INVALID_CSV_FIELDS \u003d \"Invalid fields in csv file.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CSV_PATIENTS \u003d \"Operation will result in duplicate patients.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Duplicates are not allowed.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_FILE_DOES_NOT_EXIST \u003d \"File does not exist: %s.csv cannot be found\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_FILE_EMPTY \u003d \"Provided file is empty, nothing to import.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private final String importFileName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public ImportMergeCommand(String importFileName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        this.importFileName \u003d importFileName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String pathString \u003d ImportExportPaths.IMPORT_FOLDER + \"/\" + importFileName + \".csv\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        List\u003cPatient\u003e importedPatients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            importedPatients.addAll(CsvUtil.readPatientsFromCsv(pathString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (ImportingException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FILE_DOES_NOT_EXIST, importFileName));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE, e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CSV_FIELDS, e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (DuplicatePatientException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CSV_PATIENTS, e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Check that the operation will not cause duplicates"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (CsvUtil.importsContainDupes(importedPatients)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            || model.hasAnyPatientInGivenList(importedPatients)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CSV_PATIENTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Ensure imported list is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (importedPatients.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_EMPTY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        model.addPatients(importedPatients);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public boolean equals(Object that) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return this \u003d\u003d that"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                || (that instanceof ImportMergeCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    \u0026\u0026 this.importFileName.equals(((ImportMergeCommand) that).importFileName));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "cheongsiuhong": 91
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/ImportReplaceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.CsvUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.ImportExportPaths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.exceptions.ImportingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Imports data from a csv file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Replaces ALL data in the patient book with the imported data"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class ImportReplaceCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"app-import-replace\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \": Imports data from a .csv file in /imports.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"All patients in the .csv will be imported. ALL EXISTING PERSONS WILL BE ERASED.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Importing visit and appointment data is currently not supported.\\n \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"ALL VISITS AND APPOINTMENTS WILL BE ERASED.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"File name cannot be blank and can only contain alphanumerics, underscores and hyphens.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"File name provided must exist and be in .csv format\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Cannot import and replace when visit is ongoing. \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Parameters: \" + PREFIX_FILENAME + \"FILENAME\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_FILENAME + \"assigned_patient_data\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Import success!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Import failed.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Check that the .csv file adheres to the format in the User Guide\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_INVALID_CSV_FIELDS \u003d \"Invalid fields in csv file.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CSV_PATIENTS \u003d \"Duplicate patients exist in the csv file.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"Duplicates are not allowed.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_VISIT_ONGOING \u003d \"Cannot import and replace when visit is ongoing\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_FILE_DOES_NOT_EXIST \u003d \"File does not exist: %s.csv cannot be found\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_FILE_EMPTY \u003d \"Provided file is empty, nothing to import.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private final String importFileName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public ImportReplaceCommand(String importFileName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        this.importFileName \u003d importFileName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Replacing not allowed when there is an ongoing association"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (model.getOngoingVisit().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_VISIT_ONGOING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String pathString \u003d ImportExportPaths.IMPORT_FOLDER + \"/\" + importFileName + \".csv\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPatient\u003e importedPatients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            importedPatients.addAll(CsvUtil.readPatientsFromCsv(pathString));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (ImportingException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FILE_DOES_NOT_EXIST, importFileName), e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE, e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CSV_FIELDS, e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Ensure imported list is unique."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (CsvUtil.importsContainDupes(importedPatients)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CSV_PATIENTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Ensure imported list is non-empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (importedPatients.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_EMPTY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.replaceStagedPatientBook(importedPatients);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public boolean equals(Object that) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return this \u003d\u003d that"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                || (that instanceof ImportReplaceCommand"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                \u0026\u0026 this.importFileName.equals(((ImportReplaceCommand) that).importFileName));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "cheongsiuhong": 84,
      "crazoter": 10
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Lists all patients in the patient book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pat-list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.updateFilteredPatientList(Model.PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 23
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/MutatorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Empty subclass to indicate that a {@link Command} mutates the model. All data-modifying Commands should"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * extend this class instead of the bare {@code Command}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public abstract class MutatorCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 8,
      "crazoter": 1
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.HistoryRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Redoes the previous command if it was an undo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class RedoCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"app-redo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + \": Redoes the previous data-modifying command if it was an undo.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String MESSAGE_REDO_SUCCESS \u003d \"Redid command:\\n%s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String MESSAGE_NO_MORE_HISTORY \u003d \"No more redo history.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            HistoryRecord redoneRecord \u003d model.redo();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_REDO_SUCCESS,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    redoneRecord.getCommand().getCommandText().orElse(redoneRecord.toString())));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IllegalStateException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MORE_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 26,
      "crazoter": 5
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.HistoryRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Undos a designated command in the history, or the previous one if no argument is specified"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class UndoCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"app-undo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + \": Undoes the previous data-modifying command. If an index is specified, undoes commands up to\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + \"and including the command identified by that index as used in the displayed history list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + \"Parameters: [INDEX (must be a positive integer)]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + COMMAND_WORD + \" 3\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Undid %d command%s:\\n%s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String MESSAGE_NO_MORE_HISTORY \u003d \"No more undo history.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_INDEX \u003d \"There is no command with that index.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public UndoCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        targetIndex \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public UndoCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cHistoryRecord\u003e history \u003d model.getHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (history.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MORE_HISTORY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // No arguments specified: undo the previous command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (targetIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            targetIndex \u003d Index.fromZeroBased(history.size() - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryRecord targetRecord;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            targetRecord \u003d history.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cHistoryRecord\u003e poppedRecords \u003d model.undoTo(targetRecord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return new CommandResult(makeResultString(poppedRecords));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Creates a formatted String listing the undone commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String makeResultString(List\u003cHistoryRecord\u003e undoneRecords) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (HistoryRecord record : undoneRecords) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(record.getCommand().getCommandText().orElse(record.toString()))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(MESSAGE_UNDO_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                undoneRecords.size(), undoneRecords.size() \u003e 1 ? \"s\" : \"\", sb.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 73,
      "crazoter": 6
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/appointment/AddAppointmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_END_DATE_AND_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_START_DATE_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_DAYS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_HOURS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_MINUTES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_MONTHS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_WEEKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_YEARS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Adds an appointment to the appointment list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class AddAppointmentCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"appt-add\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \": Adds an appointment to the appointment list with a patient identified by the index number used in the\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \" displayed patient list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + PREFIX_PATIENT_INDEX + \"PATIENT_INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + PREFIX_APPOINTMENT_START_DATE_AND_TIME + \"APPOINTMENT_START_DATE_AND_TIME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + PREFIX_APPOINTMENT_END_DATE_AND_TIME + \"APPOINTMENT_END_DATE_AND_TIME \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"[\" + PREFIX_RECUR_YEARS + \"RECUR_YEARS]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"[\" + PREFIX_RECUR_MONTHS + \"RECUR_MONTHS]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"[\" + PREFIX_RECUR_WEEKS + \"RECUR_WEEKS]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"[\" + PREFIX_RECUR_DAYS + \"RECUR_DAYS]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"[\" + PREFIX_RECUR_HOURS + \"RECUR_HOURS]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"[\" + PREFIX_RECUR_MINUTES + \"RECUR_MINUTES]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"[\" + PREFIX_APPOINTMENT_DESCRIPTION + \"APPOINTMENT_DESCRIPTION]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + PREFIX_PATIENT_INDEX + \"1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + PREFIX_APPOINTMENT_START_DATE_AND_TIME + \"01-11-2019 1200 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + PREFIX_APPOINTMENT_END_DATE_AND_TIME + \"01-11-2019 0200 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + PREFIX_RECUR_YEARS + \"2 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + PREFIX_RECUR_MONTHS + \"1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + PREFIX_APPOINTMENT_DESCRIPTION + \"Dental hygiene checkup \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"in the appointment book\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Appointment toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Creates an AddAppointmentCommand to add the specified {@code Appointment}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public AddAppointmentCommand(Appointment appointment) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        toAdd \u003d appointment;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        toAdd.setPatient(model.getPatientByIndex(toAdd.getPatientIndex()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (model.hasAppointment(toAdd)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        model.addAppointment(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                || (other instanceof AddAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAppointmentCommand) other).toAdd));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "sandydays": 66,
      "crazoter": 17
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/appointment/DeleteAppointmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Deletes a patient identified using it\u0027s displayed index from the patient book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DeleteAppointmentCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"appt-delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \": Deletes the appointment identified by the index number used in the displayed appointment list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DeleteAppointmentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        List\u003cAppointment\u003e fullAppointmentList \u003d model.getStagedAppointmentList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d fullAppointmentList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Appointment appointmentToDelete \u003d fullAppointmentList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        model.deleteAppointment(appointmentToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                || (other instanceof DeleteAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteAppointmentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "sandydays": 44,
      "crazoter": 10
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/appointment/EditAppointmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_END_DATE_AND_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_START_DATE_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_DAYS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_HOURS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_MINUTES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_MONTHS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_WEEKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_YEARS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.RecurringDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Edits the details of an existing appointment in the appointment book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class EditAppointmentCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"appt-edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the appointment identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"by the index number used in the displayed appointment list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_APPOINTMENT_START_DATE_AND_TIME + \"APPOINTMENT_START_DATE_AND_TIME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_APPOINTMENT_END_DATE_AND_TIME + \"APPOINTMENT_END_DATE_AND_TIME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_PATIENT_INDEX + \"APPOINTMENT_END_DATE_AND_TIME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_RECUR_YEARS + \"YEARS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_RECUR_MONTHS + \"MONTHS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_RECUR_WEEKS + \"WEEKS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_RECUR_DAYS + \"DAYS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_RECUR_HOURS + \"HOURS] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_RECUR_MINUTES + \"MINUTES] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_APPOINTMENT_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_APPOINTMENT_START_DATE_AND_TIME + \"01-11-2019 1000 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_RECUR_MONTHS + \"4 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_APPOINTMENT_DESCRIPTION + \"Dental and health checkup\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                                                + \"appointment book.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final EditAppointmentDescriptor editAppointmentDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param index of the appointment in the filtered appointment list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param editAppointmentDescriptor details to edit the appointment with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public EditAppointmentCommand(Index index, EditAppointmentDescriptor editAppointmentDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(editAppointmentDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        List\u003cAppointment\u003e lastShownList \u003d model.getStagedAppointmentList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Appointment appointmentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Appointment editedAppointment \u003d createEditedAppointment(appointmentToEdit, editAppointmentDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!appointmentToEdit.isSameAppointment(editedAppointment) \u0026\u0026 model.hasAppointment(editedAppointment)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        model.setAppointment(appointmentToEdit, editedAppointment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.updateFilteredAppointmentList(Model.PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Creates and returns a {@code Appointment} with the details of {@code appointmentToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * edited with {@code editAppointmentDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * {@code appointmentToEdit} is supposed to be non-null (i.e. it exists in the appointment book already)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private static Appointment createEditedAppointment(Appointment appointmentToEdit,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                                       EditAppointmentDescriptor editAppointmentDescriptor) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assert appointmentToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        StartDateTime updatedStartDateTime \u003d editAppointmentDescriptor.getStartDateTime()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                                                      .orElse(appointmentToEdit.getStartDateTime());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        EndDateTime updatedEndDateTime \u003d editAppointmentDescriptor.getEndDateTime()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                                                  .orElse(appointmentToEdit.getEndDateTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long[] editedAppointmentFrequency \u003d updateFrequency(appointmentToEdit, editAppointmentDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        RecurringDateTime updatedFrequency \u003d new RecurringDateTime(editedAppointmentFrequency);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Index updatedPatientIndex \u003d editAppointmentDescriptor.getPatientIndex()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                                             .orElse(appointmentToEdit.getPatientIndex());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String updatedDescription \u003d editAppointmentDescriptor.getDescription()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                                             .orElse(appointmentToEdit.getDescription());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new Appointment(updatedStartDateTime, updatedEndDateTime, updatedFrequency, updatedPatientIndex,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                updatedDescription);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Creates and returns a {@code Long[]} with the details of {@code appointmentToEdit}\u0027s frequency"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * edited with {@code editAppointmentDescriptor}\u0027s frequency."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static Long[] updateFrequency(Appointment appointmentToEdit,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                  EditAppointmentDescriptor editAppointmentDescriptor) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long updatedYears \u003d editAppointmentDescriptor.getYears().orElse(appointmentToEdit.getFrequency().getYears());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long updatedMonths \u003d editAppointmentDescriptor.getMonths().orElse(appointmentToEdit.getFrequency().getMonths());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long updatedWeeks \u003d editAppointmentDescriptor.getWeeks().orElse(appointmentToEdit.getFrequency().getWeeks());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long updatedDays \u003d editAppointmentDescriptor.getDays().orElse(appointmentToEdit.getFrequency().getDays());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long updatedHours \u003d editAppointmentDescriptor.getHours().orElse(appointmentToEdit.getFrequency().getHours());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long updatedMinutes \u003d editAppointmentDescriptor.getMinutes().orElse(appointmentToEdit.getFrequency()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .getMinutes());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long[] editedAppointmentFrequency \u003d {updatedYears, updatedMonths, updatedWeeks, updatedDays, updatedHours,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                             updatedMinutes};"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return editedAppointmentFrequency;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        EditAppointmentCommand e \u003d (EditAppointmentCommand) other;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Stores the details to edit the patient with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * corresponding field value of the patient."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static class EditAppointmentDescriptor {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        private StartDateTime startDateTime;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        private EndDateTime endDateTime;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        private Long years;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        private Long months;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        private Long weeks;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        private Long days;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        private Long hours;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        private Long minutes;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        private Index patientIndex;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public EditAppointmentDescriptor() {}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sandydays"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sandydays"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            setStartDateTime(toCopy.startDateTime);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            setEndDateTime(toCopy.endDateTime);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            setYears(toCopy.years);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            setMonths(toCopy.months);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            setWeeks(toCopy.weeks);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            setDays(toCopy.days);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            setHours(toCopy.hours);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            setMinutes(toCopy.minutes);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            setPatientIndex(toCopy.patientIndex);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sandydays"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sandydays"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return CollectionUtil.isAnyNonNull(startDateTime, endDateTime, years, months, weeks, days, hours, minutes,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                                patientIndex, description);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setStartDateTime(StartDateTime startDateTime) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public Optional\u003cStartDateTime\u003e getStartDateTime() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Optional.ofNullable(startDateTime);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setEndDateTime(EndDateTime endDateTime) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public Optional\u003cEndDateTime\u003e getEndDateTime() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Optional.ofNullable(endDateTime);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setYears(Long years) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.years \u003d years;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public Optional\u003cLong\u003e getYears() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Optional.ofNullable(years);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setMonths(Long months) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.months \u003d months;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public Optional\u003cLong\u003e getMonths() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Optional.ofNullable(months);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setWeeks(Long weeks) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.weeks \u003d weeks;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public Optional\u003cLong\u003e getWeeks() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Optional.ofNullable(weeks);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setDays(Long days) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.days \u003d days;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public Optional\u003cLong\u003e getDays() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Optional.ofNullable(days);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setHours(Long hours) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.hours \u003d hours;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public Optional\u003cLong\u003e getHours() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Optional.ofNullable(hours);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setMinutes(Long minutes) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public Optional\u003cLong\u003e getMinutes() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Optional.ofNullable(minutes);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setPatientIndex(Index patientIndex) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public Optional\u003cIndex\u003e getPatientIndex() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Optional.ofNullable(patientIndex);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setDescription(String description) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (!(other instanceof EditAppointmentDescriptor)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return getStartDateTime().equals(e.getStartDateTime())"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    \u0026\u0026 getEndDateTime().equals(e.getEndDateTime())"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    \u0026\u0026 getYears().equals(e.getYears())"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    \u0026\u0026 getMonths().equals(e.getMonths())"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    \u0026\u0026 getWeeks().equals(e.getWeeks())"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    \u0026\u0026 getDays().equals(e.getDays())"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    \u0026\u0026 getHours().equals(e.getHours())"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    \u0026\u0026 getMinutes().equals(e.getMinutes())"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    \u0026\u0026 getPatientIndex().equals(e.getPatientIndex())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "sandydays": 271,
      "crazoter": 39
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/appointment/FindAppointmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_APPOINTMENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.AppointmentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Finds and lists all appointments in appointment book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class FindAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"appt-find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all appointments whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final AppointmentContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public FindAppointmentCommand(AppointmentContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        model.updateFilteredAppointmentList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                String.format(MESSAGE_APPOINTMENTS_LISTED_OVERVIEW, model.getFilteredAppointmentList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                || (other instanceof FindAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindAppointmentCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sandydays": 41,
      "crazoter": 5
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/visit/BeginVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.VisitTaskUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Begins a visit using a patient identified using his/her index in the patient list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class BeginVisitCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"visit-start\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \": Begins a visit for a patient. The patient is identified by the index number used in the patient \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"list displayed using the list or find patient commands.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_PATIENT_INDEX + \"PATIENT_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_PATIENT_INDEX + \" 1 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_START_VISIT_SUCCESS \u003d \"Started a new visit under patient: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_START_VISIT_FAILURE \u003d \"There is already an ongoing visit.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Index patientIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public BeginVisitCommand(Index patientIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patientIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (model.getOngoingVisit().isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_START_VISIT_FAILURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPatient\u003e fullPatientList \u003d model.getStagedPatientList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Verify Patient Index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (patientIndex.getZeroBased() \u003e\u003d fullPatientList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patient \u003d fullPatientList.get(patientIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Begin Visit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit visit \u003d new Visit("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new Remark(\"\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new StartDateTime(now),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                EndDateTime.UNFINISHED_VISIT_END_DATE_TIME,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VisitTaskUtil.listFromPatient(patient), patient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patient.addVisit(visit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.setNewOngoingVisit(visit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_START_VISIT_SUCCESS, patient));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof BeginVisitCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 patientIndex.equals(((BeginVisitCommand) other).patientIndex)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 81
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/visit/CancelOngoingVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.VisitUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Cancel the ongoing visit (if any) and erase data related to the visit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CancelOngoingVisitCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"visit-cancel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Cancelled the current visit!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_NO_ONGOING_VISIT \u003d \"There is no ongoing visit to cancel.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitUtil.getOngoingVisitIfExists(model, MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.cancelOngoingVisit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 27
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/visit/FinishOngoingVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.VisitUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Mark the current on-going visit as finished and put it aside."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class FinishOngoingVisitCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"visit-end\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Finished current visit!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_NO_ONGOING_VISIT \u003d \"There is no ongoing visit to finish.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit ongoingVisit \u003d VisitUtil.getOngoingVisitIfExists(model, MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Update the EndDateTime in the visit"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit finishedVisit \u003d new Visit(ongoingVisit.getRemark(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ongoingVisit.getStartDateTime(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new EndDateTime(new Date()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ongoingVisit.getVisitTasks(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ongoingVisit.getPatient());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.updateOngoingVisit(finishedVisit);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Remove the reference as ongoing visit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.unsetOngoingVisit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 39
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/visit/UpdateOngoingVisitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_VISIT_REMARKS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_VISIT_TASK_FINISH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_VISIT_TASK_INDEX_AND_DETAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_VISIT_TASK_UNFINISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.VisitUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Updates the details of the ongoing visit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class UpdateOngoingVisitCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"visit-now-update\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the details of the current visit.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"New Visit Tasks cannot be added or removed from an ongoing visit.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Visit Tasks can only be updated but their descriptions cannot be modified.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_VISIT_TASK_INDEX_AND_DETAIL + \"TASK_INDEX DETAIL]... \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_VISIT_TASK_FINISH + \"TASK_INDEX]... \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_VISIT_TASK_UNFINISH + \"TASK_INDEX]... \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"[\" + PREFIX_VISIT_REMARKS + \"REMARKS] \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_VISIT_TASK_UNFINISH + \"1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_VISIT_TASK_FINISH + \"2 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_VISIT_TASK_INDEX_AND_DETAIL + \"1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_VISIT_TASK_INDEX_AND_DETAIL + \"2 140/90mmHg \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_VISIT_REMARKS + \"Patient may be allergic to bacitracin\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_UPDATE_ONGOING_VISIT_SUCCESS \u003d \"Updated Visit: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_NO_ONGOING_VISIT \u003d \"There is no ongoing visit to update.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_ONGOING_VISIT_NOT_MODIFIED \u003d \"No fields updated.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_INVALID_VISIT_TASK_INDEX \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \"There are no visit tasks that have the index %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final UpdateOngoingVisitDescriptor updateOngoingVisitDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param updateOngoingVisitDescriptor details to edit the patient with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public UpdateOngoingVisitCommand(UpdateOngoingVisitDescriptor updateOngoingVisitDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(updateOngoingVisitDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.updateOngoingVisitDescriptor \u003d new UpdateOngoingVisitDescriptor(updateOngoingVisitDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!this.updateOngoingVisitDescriptor.isAnyFieldUpdated()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_ONGOING_VISIT_NOT_MODIFIED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit visitToUpdate \u003d VisitUtil.getOngoingVisitIfExists(model, MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit updatedVisit \u003d createUpdated(visitToUpdate, updateOngoingVisitDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitToUpdate.equals(updatedVisit)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CommandException(MESSAGE_ONGOING_VISIT_NOT_MODIFIED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.updateOngoingVisit(updatedVisit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_ONGOING_VISIT_SUCCESS, updatedVisit));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates and returns a {@code Visit} with the details of {@code visitToUpdate}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * edited with {@code updateVisitDescriptor}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Visit createUpdated(Visit visitToUpdate,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                       UpdateOngoingVisitDescriptor descriptor) throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(visitToUpdate, descriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assert visitToUpdate !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Update fields"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Remark updatedRemark \u003d descriptor.getRemark().orElse(visitToUpdate.getRemark());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cVisitTask\u003e visitTaskList \u003d visitToUpdate.getVisitTasks();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTaskUpdatesMultimap multimap \u003d new VisitTaskUpdatesMultimap();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        multimap.saveTasksFinishedByIndexes(visitTaskList,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                descriptor.getUnfinishedVisitTaskIndexes(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VisitTaskUpdatesMultimapKeys.UNFINISH);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        multimap.saveTasksFinishedByIndexes(visitTaskList,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                descriptor.getFinishedVisitTaskIndexes(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VisitTaskUpdatesMultimapKeys.FINISH);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        multimap.saveTaskDetailsByIndexes(visitTaskList,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                descriptor.getUpdatedVisitTaskDetails());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cVisitTask\u003e updatedVisitTaskList \u003d multimap.buildUpdatedVisitTasks(visitTaskList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Update, so some fields are not changeable"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        StartDateTime startDateTime \u003d visitToUpdate.getStartDateTime();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EndDateTime endDateTime \u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitToUpdate.getEndDateTime().isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            endDateTime \u003d visitToUpdate.getEndDateTime().get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patient \u003d visitToUpdate.getPatient();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new Visit(updatedRemark, startDateTime, endDateTime, updatedVisitTaskList, patient);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof UpdateOngoingVisitCommand)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UpdateOngoingVisitCommand e \u003d (UpdateOngoingVisitCommand) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return updateOngoingVisitDescriptor.equals(e.updateOngoingVisitDescriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 137
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/visit/UpdateOngoingVisitDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Stores the details to edit the patient with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * corresponding field value of the patient."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class UpdateOngoingVisitDescriptor {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cIndex\u003e finishedVisitTaskIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cIndex\u003e unfinishedVisitTaskIndexes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cPair\u003cIndex, String\u003e\u003e updatedVisitTaskDetails;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public UpdateOngoingVisitDescriptor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        finishedVisitTaskIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        unfinishedVisitTaskIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updatedVisitTaskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public UpdateOngoingVisitDescriptor(UpdateOngoingVisitDescriptor toCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(toCopy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setFinishedVisitTaskIndexes(toCopy.finishedVisitTaskIndexes);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setUnfinishedVisitTaskIndexes(toCopy.unfinishedVisitTaskIndexes);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setUpdatedVisitTaskDetails(toCopy.updatedVisitTaskDetails);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if at least one field is updated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isAnyFieldUpdated() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return remark !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || !finishedVisitTaskIndexes.isEmpty()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || !unfinishedVisitTaskIndexes.isEmpty()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || !updatedVisitTaskDetails.isEmpty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cIndex\u003e getFinishedVisitTaskIndexes() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return finishedVisitTaskIndexes;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setFinishedVisitTaskIndexes(List\u003cIndex\u003e finishedVisitTaskIndexes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.finishedVisitTaskIndexes.addAll(finishedVisitTaskIndexes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cIndex\u003e getUnfinishedVisitTaskIndexes() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return unfinishedVisitTaskIndexes;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setUnfinishedVisitTaskIndexes(List\u003cIndex\u003e unfinishedVisitTaskIndexes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.unfinishedVisitTaskIndexes.addAll(unfinishedVisitTaskIndexes);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cPair\u003cIndex, String\u003e\u003e getUpdatedVisitTaskDetails() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return updatedVisitTaskDetails;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setUpdatedVisitTaskDetails(List\u003cPair\u003cIndex, String\u003e\u003e updatedVisitTaskDetails) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.updatedVisitTaskDetails.addAll(updatedVisitTaskDetails);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof UpdateOngoingVisitDescriptor)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UpdateOngoingVisitDescriptor e \u003d (UpdateOngoingVisitDescriptor) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return getRemark().equals(e.getRemark())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 CollectionUtil.checkEqual(getFinishedVisitTaskIndexes(), e.getFinishedVisitTaskIndexes())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 CollectionUtil.checkEqual(getUnfinishedVisitTaskIndexes(), e.getUnfinishedVisitTaskIndexes())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 CollectionUtil.checkEqual(getUpdatedVisitTaskDetails(), e.getUpdatedVisitTaskDetails());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 105
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/visit/VisitTaskUpdatesMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.Detail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Package private class that"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * RecordsVisitTaskUpdatesMultimap the visit task updates into a multimap so that all changes can be made in one go."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "class VisitTaskUpdatesMultimap {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Map\u003cInteger, Set\u003cObject\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * If the map previously contained a mapping for the key,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * the new value is appended to the list of existing values unless it already exists."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param index Index key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param detail Argument value to be associated with the specified Index key"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void put(Index index, String detail) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Set\u003cObject\u003e values \u003d getAllValues(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        values.add(detail);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        map.put(indexToInt(index), values);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * If the map previously contained a mapping for the key,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * the new value is appended to the list of existing values unless it already exists."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * If a FINISH and UNFINISH exist, UNFINISH will take priority."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param index Index key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param key Argument value to be associated with the specified Index key"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void put(Index index, VisitTaskUpdatesMultimapKeys key) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Set\u003cObject\u003e values \u003d getAllValues(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!values.contains(VisitTaskUpdatesMultimapKeys.UNFINISH)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            values.add(key);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            map.put(indexToInt(index), values);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns all values of {@code index}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Set\u003cObject\u003e getAllValues(Index index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!map.containsKey(indexToInt(index))) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new HashSet\u003c\u003e(map.get(indexToInt(index)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Helper function to ensure index.getZeroBased() and not index.getOneBased() is used"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private int indexToInt(Index index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return index.getZeroBased();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Record in a multimap which Visit Tasks finished / unfinished using a list of indexes."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void saveTasksFinishedByIndexes("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            List\u003cVisitTask\u003e taskList,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            List\u003cIndex\u003e indexList,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            VisitTaskUpdatesMultimapKeys isMarkFinish) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(taskList, indexList, isMarkFinish);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Index targetIndex : indexList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (indexToInt(targetIndex) \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new CommandException(String.format("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        UpdateOngoingVisitCommand.MESSAGE_INVALID_VISIT_TASK_INDEX,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.put(targetIndex, isMarkFinish);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Record in a multimap the details of a VisitTask using a list of indexes."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void saveTaskDetailsByIndexes("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            List\u003cVisitTask\u003e taskList,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            List\u003cPair\u003cIndex, String\u003e\u003e indexDetailPairList) throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(taskList, indexDetailPairList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Pair\u003cIndex, String\u003e indexStringPair : indexDetailPairList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (indexToInt(indexStringPair.getKey()) \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new CommandException(String.format("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        UpdateOngoingVisitCommand.MESSAGE_INVALID_VISIT_TASK_INDEX,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        indexStringPair.getKey()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.put(indexStringPair.getKey(), indexStringPair.getValue());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Builds and returns an updated visit task list using changes recorded in the multimap."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cVisitTask\u003e buildUpdatedVisitTasks(final List\u003cVisitTask\u003e visitTaskList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visitTaskList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cVisitTask\u003e updatedVisitTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (int i \u003d 0; i \u003c visitTaskList.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            updatedVisitTaskList.add(updateVisitTask(visitTaskList.get(i), i));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return updatedVisitTaskList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an updated visit task using changes recorded in the multimap."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private VisitTask updateVisitTask(VisitTask visitTask, int index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visitTask);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTask result \u003d visitTask;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (map.containsKey(index)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Detail detail \u003d visitTask.getDetail();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            boolean isDone \u003d visitTask.isDone();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (Object change : map.get(index)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Detail"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (change instanceof String) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    detail \u003d new Detail((String) change);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else if (change \u003d\u003d VisitTaskUpdatesMultimapKeys.FINISH) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    isDone \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else if (change \u003d\u003d VisitTaskUpdatesMultimapKeys.UNFINISH) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    isDone \u003d false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            result \u003d new VisitTask(visitTask.getVisitTodo(), detail, isDone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 148
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/commands/visit/VisitTaskUpdatesMultimapKeys.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Enum of keys that VisitTaskUpdatesMultimap uses to differentiate \"Finish\" and \"Unfinish\" changes"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "enum VisitTaskUpdatesMultimapKeys {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    FINISH, UNFINISH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 8
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PATIENT_VISIT_TODO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_TAG, PREFIX_PATIENT_VISIT_TODO);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Collection\u003cVisitTodo\u003e visitTodos \u003d ParserUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .parseVisitTodos(argMultimap.getAllValues(PREFIX_PATIENT_VISIT_TODO));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patient \u003d new Patient(name, phone, email, address, tagList, visitTodos,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Patient.PLACEHOLDER_NO_VISITS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new AddCommand(patient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 26,
      "-": 42
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/AppParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ImportMergeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ImportReplaceCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.AddAppointmentCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.FindAppointmentCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.BeginVisitCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.CancelOngoingVisitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.FinishOngoingVisitCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.UpdateOngoingVisitCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.appointment.AddAppointmentCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.appointment.DeleteAppointmentCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.appointment.EditAppointmentCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.appointment.FindAppointmentCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.visit.BeginVisitCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.visit.UpdateOngoingVisitCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class AppParser {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new ClearCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new ListCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new HelpCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        case ImportReplaceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new ImportReplaceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        case ImportMergeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new ImportMergeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new HistoryCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new UndoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new RedoCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case BeginVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new BeginVisitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case FinishOngoingVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new FinishOngoingVisitCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case UpdateOngoingVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new UpdateOngoingVisitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case CancelOngoingVisitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new CancelOngoingVisitCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case AddAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new AddAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case DeleteAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new DeleteAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case EditAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new EditAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case FindAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d new FindAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        command.setCommandText(userInput);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 55,
      "cheongsiuhong": 7,
      "sandydays": 8,
      "crazoter": 44,
      "-": 51
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Note that prefix definitions can be duplicated so long as they are not used within the same command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_PATIENT_VISIT_TODO \u003d new Prefix(\"vt/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //Do not use with PREFIX_PHONE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_PATIENT_INDEX \u003d new Prefix (\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_VISIT_TASK_INDEX_AND_DETAIL \u003d new Prefix (\"d/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_VISIT_TASK_FINISH \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_VISIT_TASK_UNFINISH \u003d new Prefix(\"uf/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Prefix PREFIX_VISIT_REMARKS \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    //Do not use with PREFIX_NAME"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final Prefix PREFIX_FILENAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final Prefix PREFIX_INDEXES \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    // Appointment prefixes"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final Prefix PREFIX_APPOINTMENT_START_DATE_AND_TIME \u003d new Prefix(\"sdt/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final Prefix PREFIX_APPOINTMENT_END_DATE_AND_TIME \u003d new Prefix(\"edt/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final Prefix PREFIX_RECUR_YEARS \u003d new Prefix(\"ryr/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final Prefix PREFIX_RECUR_MONTHS \u003d new Prefix(\"rmon/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final Prefix PREFIX_RECUR_WEEKS \u003d new Prefix(\"rweek/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final Prefix PREFIX_RECUR_DAYS \u003d new Prefix(\"rday/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final Prefix PREFIX_RECUR_HOURS \u003d new Prefix(\"rhr/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final Prefix PREFIX_RECUR_MINUTES \u003d new Prefix(\"rmin/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final Prefix PREFIX_APPOINTMENT_DESCRIPTION \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 3,
      "sandydays": 10,
      "crazoter": 10,
      "-": 12
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PATIENT_VISIT_TODO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_PATIENT_VISIT_TODO);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor editPatientDescriptor \u003d new EditCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editPatientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editPatientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPatientDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        parseVisitTodosForEdit(argMultimap.getAllValues(PREFIX_PATIENT_VISIT_TODO))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .ifPresent(editPatientDescriptor::setVisitTodos);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!editPatientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new EditCommand(index, editPatientDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e VisitTodos} into a {@code Collection\u003cVisitTodos\u003e}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * if {@code VisitTodos} is non-empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * If {@code VisitTodos} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code Collection\u003cVisitTodo\u003e} containing zero VisitTodos."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Optional\u003cCollection\u003cVisitTodo\u003e\u003e parseVisitTodosForEdit(Collection\u003cString\u003e visitTodos)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assert visitTodos !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitTodos.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Collection\u003cString\u003e visitTodosSet \u003d visitTodos.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 visitTodos.contains(\"\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ? Collections.emptySet() : visitTodos;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Optional.of(ParserUtil.parseVisitTodos(visitTodosSet));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 45,
      "-": 60
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_INDEXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Parses input arguments and returns a new ExportCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILENAME,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                PREFIX_INDEXES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_FILENAME).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String fileName \u003d argMultimap.getValue(PREFIX_FILENAME).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (!ParserUtil.isValidFileName(fileName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    String.format(ParserUtil.MESSAGE_INVALID_FILENAME, fileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Optional\u003cSet\u003cIndex\u003e\u003e targetIndexes \u003d Optional.empty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INDEXES).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            targetIndexes \u003d Optional.of("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    ParserUtil.parseIndexes(argMultimap.getAllValues(PREFIX_INDEXES)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return new ExportCommand(fileName, targetIndexes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 35,
      "crazoter": 15
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/ImportMergeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ImportMergeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Parses input and returns a new ImportMergeCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ImportMergeCommandParser implements Parser\u003cImportMergeCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportMergeCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * and returns an ImportMergeCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public ImportMergeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILENAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_FILENAME).isPresent()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportMergeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String fileName \u003d argMultimap.getValue(PREFIX_FILENAME).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (!ParserUtil.isValidFileName(fileName)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    String.format(ParserUtil.MESSAGE_INVALID_FILENAME, fileName));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return new ImportMergeCommand(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 35
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/ImportReplaceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ImportReplaceCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Parses input and returns a new ImportReplaceCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ImportReplaceCommandParser implements Parser\u003cImportReplaceCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportReplaceCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * and returns an ImportReplaceCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public ImportReplaceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILENAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_FILENAME).isPresent()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportReplaceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String fileName \u003d argMultimap.getValue(PREFIX_FILENAME).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        if (!ParserUtil.isValidFileName(fileName)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    String.format(ParserUtil.MESSAGE_INVALID_FILENAME, fileName));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return new ImportReplaceCommand(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 36
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.RecurringDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_INVALID_FILENAME \u003d \"%s is not a valid file name.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"File names cannot be blank, and can only contain alphanumerics, hyphens and underscores.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Parses a {@code Collection\u003cString\u003e indexes} into a {@code Set\u003cIndex\u003e}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static Set\u003cIndex\u003e parseIndexes(Collection\u003cString\u003e indexes) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(indexes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        final Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        for (String index : indexes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            indexSet.add(parseIndex(index));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return indexSet;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses a {@code String visitTodo} into a {@code VisitTodo}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if the given {@code visitTodo} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static VisitTodo parseVisitTodo(String visitTodo) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visitTodo);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String trimmedVisitTodo \u003d visitTodo.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!VisitTodo.isValidVisitTodoDescription(trimmedVisitTodo)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(VisitTodo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new VisitTodo(trimmedVisitTodo);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses a {@code String remark} into a {@code Remark}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Remark parseRemark(String remark) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e visitTodos} into a {@code Collection\u003cVisitTodo\u003e}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Collection\u003cVisitTodo\u003e parseVisitTodos(Collection\u003cString\u003e visitTodos) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visitTodos);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final Collection\u003cVisitTodo\u003e visitTodoCollection \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (String visitTodoName : visitTodos) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visitTodoCollection.add(parseVisitTodo(visitTodoName));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visitTodoCollection;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Parses a {@code String startDateTime} into a {@code StartDateTime}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws ParseException if the given {@code startDateTime} is invalid."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static StartDateTime parseStartDateTime(String startDateTime) throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(startDateTime);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String trimmedStartDateTime \u003d startDateTime.trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!StartDateTime.isValidStartDateTime(trimmedStartDateTime)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new ParseException(StartDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new StartDateTime(trimmedStartDateTime);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Parses a {@code String endDateTime} into a {@code EndDateTime}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws ParseException if the given {@code endDateTime} is invalid."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static EndDateTime parseEndDateTime(String endDateTime, String startDateTime) throws ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(endDateTime, startDateTime);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String trimmedEndDateTime \u003d endDateTime.trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String trimmedStartDateTime \u003d startDateTime.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!EndDateTime.isValidEndDateTime(trimmedStartDateTime, trimmedEndDateTime)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new ParseException(EndDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new EndDateTime(trimmedEndDateTime);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Parses a {@code String frequency} into a {@code Long}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws ParseException if the given {@code frequency} is invalid."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static Long parseFrequency(Optional\u003cString\u003e frequency) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!frequency.isPresent()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Long.parseLong(\"0\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            String trimmedFrequency \u003d frequency.get().trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (!RecurringDateTime.isValidSingleFrequency(trimmedFrequency)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                throw new ParseException(RecurringDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return RecurringDateTime.getSingleFrequencyAsLong(trimmedFrequency);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Parses a {@code String description} into a {@code String}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static String parseDescription(Optional\u003cString\u003e description) throws ParseException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!description.isPresent()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            String trimmedDescription \u003d description.get().trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return trimmedDescription;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Returns true if the given file name is illegal."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * File names can only contain alphanumerics, hyphens and underscores."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static boolean isValidFileName(String fileName) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String validationRegex \u003d \"[-_a-zA-Z]+\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return fileName.matches(validationRegex);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 24,
      "sandydays": 66,
      "crazoter": 52,
      "-": 114
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/UndoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Parses input arguments and creates a new UndoCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class UndoCommandParser implements Parser\u003cUndoCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UndoCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * and returns an UndoCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public UndoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return new UndoCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    UndoCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 24,
      "crazoter": 8
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/appointment/AddAppointmentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_END_DATE_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_START_DATE_AND_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_DAYS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_MINUTES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_MONTHS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_WEEKS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_YEARS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.AddAppointmentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.Prefix;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.RecurringDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Parses input arguments and creates a new AddAppointmentCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * and returns an AddAppointmentCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AddAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PATIENT_INDEX,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_APPOINTMENT_START_DATE_AND_TIME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_APPOINTMENT_END_DATE_AND_TIME,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_RECUR_YEARS, PREFIX_RECUR_MONTHS, PREFIX_RECUR_WEEKS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_RECUR_DAYS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_RECUR_HOURS, PREFIX_RECUR_MINUTES,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_APPOINTMENT_DESCRIPTION);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PATIENT_INDEX,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                PREFIX_APPOINTMENT_START_DATE_AND_TIME,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                PREFIX_APPOINTMENT_END_DATE_AND_TIME)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    AddAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        StartDateTime startDateTime \u003d ParserUtil.parseStartDateTime(argMultimap"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .getValue(PREFIX_APPOINTMENT_START_DATE_AND_TIME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EndDateTime endDateTime \u003d ParserUtil.parseEndDateTime(argMultimap"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .getValue(PREFIX_APPOINTMENT_END_DATE_AND_TIME).get(), argMultimap"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .getValue(PREFIX_APPOINTMENT_START_DATE_AND_TIME).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long years \u003d ParserUtil.parseFrequency(argMultimap.getValue(PREFIX_RECUR_YEARS));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long months \u003d ParserUtil.parseFrequency(argMultimap.getValue(PREFIX_RECUR_MONTHS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long weeks \u003d ParserUtil.parseFrequency(argMultimap.getValue(PREFIX_RECUR_WEEKS));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long days \u003d ParserUtil.parseFrequency(argMultimap.getValue(PREFIX_RECUR_DAYS));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long hours \u003d ParserUtil.parseFrequency(argMultimap.getValue(PREFIX_RECUR_HOURS));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long minutes \u003d ParserUtil.parseFrequency(argMultimap.getValue(PREFIX_RECUR_MINUTES));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Long[] freqArray \u003d {years, months, weeks, days, hours, minutes};"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        RecurringDateTime frequency \u003d new RecurringDateTime(freqArray);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index indexPatient \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PATIENT_INDEX).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String description \u003d ParserUtil.parseDescription(argMultimap"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .getValue(PREFIX_APPOINTMENT_DESCRIPTION));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Appointment appointment \u003d new Appointment(startDateTime, endDateTime, frequency, indexPatient, description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new AddAppointmentCommand(appointment);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 8,
      "crazoter": 81
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/appointment/DeleteAppointmentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Parses input arguments and creates a new DeleteAppointmentCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * and returns a DeleteAppointmentCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DeleteAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return new DeleteAppointmentCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 22,
      "crazoter": 9
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/appointment/EditAppointmentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_END_DATE_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_APPOINTMENT_START_DATE_AND_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_DAYS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_MINUTES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_MONTHS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_WEEKS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_RECUR_YEARS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.EditAppointmentCommand.EditAppointmentDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Parses input arguments and creates a new EditAppointmentCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class EditAppointmentCommandParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAppointmentCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * and returns an EditAppointmentCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Does not yet allow to selectively change years, months, etc. of the frequency with which the appointment recurs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_APPOINTMENT_START_DATE_AND_TIME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_APPOINTMENT_END_DATE_AND_TIME, PREFIX_PATIENT_INDEX,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_RECUR_YEARS, PREFIX_RECUR_MONTHS, PREFIX_RECUR_WEEKS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_RECUR_DAYS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_RECUR_HOURS, PREFIX_RECUR_MINUTES,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_APPOINTMENT_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        boolean startChanged \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    EditAppointmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APPOINTMENT_START_DATE_AND_TIME).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editAppointmentDescriptor.setStartDateTime(ParserUtil.parseStartDateTime(argMultimap"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    .getValue(PREFIX_APPOINTMENT_START_DATE_AND_TIME).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            startChanged \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APPOINTMENT_END_DATE_AND_TIME).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (startChanged) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                editAppointmentDescriptor.setEndDateTime(ParserUtil.parseEndDateTime(argMultimap"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .getValue(PREFIX_APPOINTMENT_END_DATE_AND_TIME).get(), argMultimap"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .getValue(PREFIX_APPOINTMENT_START_DATE_AND_TIME).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                editAppointmentDescriptor.setEndDateTime(ParserUtil.parseEndDateTime(argMultimap"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .getValue(PREFIX_APPOINTMENT_END_DATE_AND_TIME).get(), editAppointmentDescriptor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .getStartDateTime().toString()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PATIENT_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editAppointmentDescriptor.setPatientIndex(ParserUtil.parseIndex(argMultimap"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    .getValue(PREFIX_PATIENT_INDEX).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECUR_YEARS).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editAppointmentDescriptor.setYears(ParserUtil.parseFrequency(argMultimap"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .getValue(PREFIX_RECUR_YEARS)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECUR_MONTHS).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editAppointmentDescriptor.setYears(ParserUtil.parseFrequency(argMultimap"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .getValue(PREFIX_RECUR_MONTHS)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECUR_WEEKS).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editAppointmentDescriptor.setYears(ParserUtil.parseFrequency(argMultimap"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .getValue(PREFIX_RECUR_WEEKS)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECUR_DAYS).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editAppointmentDescriptor.setYears(ParserUtil.parseFrequency(argMultimap"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .getValue(PREFIX_RECUR_DAYS)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECUR_HOURS).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editAppointmentDescriptor.setYears(ParserUtil.parseFrequency(argMultimap"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .getValue(PREFIX_RECUR_HOURS)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECUR_MINUTES).isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editAppointmentDescriptor.setYears(ParserUtil.parseFrequency(argMultimap"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .getValue(PREFIX_RECUR_MINUTES)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APPOINTMENT_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            editAppointmentDescriptor.setDescription(ParserUtil.parseDescription(argMultimap"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .getValue(PREFIX_APPOINTMENT_DESCRIPTION)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!editAppointmentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new EditAppointmentCommand(index, editAppointmentDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 7,
      "crazoter": 104
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/appointment/FindAppointmentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.appointment.FindAppointmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.AppointmentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Parses input arguments and creates a new FindAppointmentCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class FindAppointmentCommandParser implements Parser\u003cFindAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindAppointmentCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * and returns a FindAppointmentCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public FindAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new FindAppointmentCommand(new AppointmentContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sandydays": 27,
      "crazoter": 8
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/visit/BeginVisitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.BeginVisitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Parses input arguments and creates a new BeginVisitCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class BeginVisitCommandParser implements Parser\u003cBeginVisitCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BeginVisitCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * and returns a BeginVisitCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public BeginVisitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new BeginVisitCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BeginVisitCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 31
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/logic/parser/visit/UpdateOngoingVisitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_VISIT_REMARKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_VISIT_TASK_FINISH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_VISIT_TASK_INDEX_AND_DETAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_VISIT_TASK_UNFINISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.UpdateOngoingVisitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.UpdateOngoingVisitDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Parses input arguments and creates a new UpdateOngoingVisitCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class UpdateOngoingVisitCommandParser implements Parser\u003cUpdateOngoingVisitCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Must match Index, whitespace then String."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String INDEX_WHITESPACE_THEN_STRING_VALIDATION_REGEX \u003d \"^([0-9]+) (.*)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String INDEX_ONLY_VALIDATION_REGEX \u003d \"^([0-9]+)()\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final int REGEX_MATCHER_INDEX \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final int REGEX_MATCHER_STRING \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateOngoingVisitCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * and returns an UpdateOngoingVisitCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public UpdateOngoingVisitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_VISIT_REMARKS, PREFIX_VISIT_TASK_FINISH,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        PREFIX_VISIT_TASK_UNFINISH, PREFIX_VISIT_TASK_INDEX_AND_DETAIL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UpdateOngoingVisitDescriptor updateOngoingVisitDescriptor \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new UpdateOngoingVisitDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VISIT_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            updateOngoingVisitDescriptor.setRemark("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    ParserUtil.parseRemark(argMultimap.getValue(PREFIX_VISIT_REMARKS).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateOngoingVisitDescriptor.setFinishedVisitTaskIndexes("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                parseIndexes(argMultimap.getAllValues(PREFIX_VISIT_TASK_FINISH)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateOngoingVisitDescriptor.setUnfinishedVisitTaskIndexes("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                parseIndexes(argMultimap.getAllValues(PREFIX_VISIT_TASK_UNFINISH)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateOngoingVisitDescriptor.setUpdatedVisitTaskDetails("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                parseIndexAndDetailPairs(argMultimap.getAllValues(PREFIX_VISIT_TASK_INDEX_AND_DETAIL)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!updateOngoingVisitDescriptor.isAnyFieldUpdated()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    UpdateOngoingVisitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new UpdateOngoingVisitCommand(updateOngoingVisitDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parse a list of string (presumably obtained from argMultimap.getAllValues) into a list of Indexes."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The expected input of these string should be of indexes."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns said list of Indexes."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if an index is not of the right format."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cIndex\u003e parseIndexes(List\u003cString\u003e indexesToParse) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(indexesToParse);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cIndex\u003e collector \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (String value : indexesToParse) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                collector.add(ParserUtil.parseIndex(value));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return collector;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            UpdateOngoingVisitCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parse a list of string (presumably obtained from argMultimap.getAllValues) into a list of Indexes."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The expected input should be index, a whitespace, then the detail associated with the index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns said list of Pairs of Index and String."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws ParseException if an index is not of the right format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cPair\u003cIndex, String\u003e\u003e parseIndexAndDetailPairs(List\u003cString\u003e indexAndDetailPairs)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(indexAndDetailPairs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPair\u003cIndex, String\u003e\u003e collector \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Pattern regexIndexAndString \u003d Pattern.compile(INDEX_WHITESPACE_THEN_STRING_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Pattern regexIndexOnly \u003d Pattern.compile(INDEX_ONLY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (String value : indexAndDetailPairs) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Pair\u003cIndex, String\u003e pairResult \u003d regexMatch(regexIndexAndString, value);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //If failed to find match i.e. possibly index only"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (pairResult \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    pairResult \u003d regexMatch(regexIndexOnly, value);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //If still fail then is parse error"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (pairResult \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    //Throw ParseException this way because ParserUtil also throws its own ParseException"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    throw new ParseException(\"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collector.add(pairResult);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return collector;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            UpdateOngoingVisitCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Helper method to check if value matches regex string."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a Pair combining Index to String if matcher finds something, else returns null"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Pair\u003cIndex, String\u003e regexMatch(Pattern regex, String value) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Matcher matcher \u003d regex.matcher(value);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new Pair\u003c\u003e("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    ParserUtil.parseIndex(matcher.group(REGEX_MATCHER_INDEX)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    matcher.group(REGEX_MATCHER_STRING).trim()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 140
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/AppointmentBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.CopyError;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.UniqueAppointmentList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.JsonSerializableAppointmentBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Duplicates are not allowed (by .isSamePatient comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class AppointmentBook implements ReadOnlyAppointmentBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final UniqueAppointmentList appointments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        appointments \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public AppointmentBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates an PatientBook using the Patients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public AppointmentBook(ReadOnlyAppointmentBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Replaces the contents of the appointment list with {@code appointments}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * {@code appointments} must not contain duplicate appointments."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.appointments.setAppointments(appointments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Resets the existing data of this {@code AppointmentBook} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void resetData(ReadOnlyAppointmentBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        setAppointments(newData.getAppointmentList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    //// appointment-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns true if an appointment with the same identity as {@code appointment} exists in the appointment book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return appointments.contains(appointment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns index of appointment."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public int indexOfAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return appointments.indexOf(appointment);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Adds an appointment to the appointment book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The patient must not already exist in the appointment book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void addAppointment(Appointment a) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        appointments.add(a);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Replaces the given patient {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * {@code target} must exist in the appointment book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The patient identity of {@code editedAppointment} must not be the same as another existing patient in the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * appointment book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(editedAppointment);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        appointments.setAppointment(target, editedAppointment);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Removes {@code key} from this {@code AppointmentBook}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * {@code key} must exist in the appointment book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void removeAppointment(Appointment key) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        appointments.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public AppointmentBook deepCopy() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return new JsonSerializableAppointmentBook(this).toModelType();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new CopyError(\"Error copying AppointmentBook\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return appointments.asUnmodifiableObservableList().size() + \" appointments\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return appointments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                || (other instanceof AppointmentBook // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 appointments.equals(((AppointmentBook) other).appointments));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return appointments.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sandydays": 132,
      "crazoter": 11
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/HistoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Deque;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Represents the history of the application. Each data state change is stored as a record containing the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * {@link MutatorCommand} that caused the change and the {@link PatientBook} state before the command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * All recorded states are deep copies decoupled from their original references."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class HistoryManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private final int maxSize;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    // Records of command and state BEFORE its execution"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private ObservableList\u003cHistoryRecord\u003e history \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    // Records of command and state AFTER its execution"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Deque\u003cHistoryRecord\u003e redoStack \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Initialises a HistoryManager with the specified maximum size of history records to keep track of."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param maxSize the maximum number of records in the history"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public HistoryManager(int maxSize) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assert maxSize \u003e\u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.maxSize \u003d maxSize;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    //// Setter methods"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Records the specified command and state in the history. The {@code patientBook} represents the state before the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@code command} was executed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param command the command that caused the change in state"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param patientBook the state before the command was executed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void pushRecord(MutatorCommand command, PatientBook patientBook) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (command instanceof UndoCommand || command instanceof RedoCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        pushToHistory(command, patientBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        redoStack.clear(); // Invalidate redo stack to avoid branching"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Records the specified command and state in the history. This is different from"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@link #pushRecord(MutatorCommand, PatientBook)} in that the {@code redoStack} is not cleared to facilitate"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * pushing {@link #popRedo(PatientBook)}ed records back into the history while maintaining the redo stack."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void pushToHistory(MutatorCommand command, PatientBook patientBook) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (history.size() \u003d\u003d maxSize) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            history.remove(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        history.add(new HistoryRecord(command, patientBook));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Removes the most recent record from the history and returns it as an {@code Optional}, or an empty"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@code Optional} if there are no records in the history. Records the undo with the specified"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code} currentPatientBook so it can be undone."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param currentPatientBook the current state of the {@code PatientBook} model, stored for redo purposes"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return an {@code Optional} describing the most recent record in the history, or an empty {@code Optional} if"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *         the history is empty"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cHistoryRecord\u003e popRecord(PatientBook currentPatientBook) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (history.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            redoStack.push(new HistoryRecord(getLastRecord().get().getCommand(), currentPatientBook));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return Optional.of(history.remove(history.size() - 1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Reverts history to the state just before the specified record."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param record the record to revert to"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param currentPatientBook the current state of the {@code PatientBook} model, stored for redo purposes"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return list of records popped with the first popped record at index 0"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws NoSuchElementException if the specified record does not exist in the history"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cHistoryRecord\u003e popRecordsTo(HistoryRecord record, PatientBook currentPatientBook)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throws NoSuchElementException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int index \u003d history.indexOf(record);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (index \u003d\u003d -1) { // record not found in history"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new NoSuchElementException(\"Cannot pop to specified record: record not found in history\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cHistoryRecord\u003e poppedRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryRecord curRecord \u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook undonePatientBook \u003d currentPatientBook;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        while (curRecord !\u003d record) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            curRecord \u003d popRecord(undonePatientBook).get();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            poppedRecords.add(curRecord);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (!history.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                undonePatientBook \u003d (PatientBook) getLastRecord().get().getReadOnlyPatientBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return poppedRecords;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * If the previous command was an undo, reverts it and returns a {@code HistoryRecord} containing the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code PatientBook} state after the undone command was executed. Otherwise, returns an empty {@code Optional}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param currentPatientBook the current state of the {@code PatientBook} model, stored for undo purposes"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return an {@code Optional} describing the redone record, or an empty {@code Optional} if there are no undos to"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *         redo"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cHistoryRecord\u003e popRedo(PatientBook currentPatientBook) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (redoStack.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryRecord redoRecord \u003d redoStack.pop();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        pushToHistory(redoRecord.getCommand(), currentPatientBook); // Save state before redone command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return Optional.of(redoRecord);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    //// Accessor methods"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /** Returns an unmodifiable view of the history */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ObservableList\u003cHistoryRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return FXCollections.unmodifiableObservableList(history);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns the number of records in the history"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return history.size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Optional\u003cHistoryRecord\u003e getLastRecord() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return history.size() \u003e\u003d 1 ? Optional.of(history.get(history.size() - 1)) : Optional.empty();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return CollectionUtil.collectionToString(history);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 125,
      "crazoter": 28
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/HistoryRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Record of the command and data of one atomic commit in the command history. It consists of the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * {@link MutatorCommand} responsible for the commit and the state of the {@link PatientBook} before the commit."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class HistoryRecord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private final MutatorCommand command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final PatientBook patientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a HistoryRecord representing the specified command and state. The state is deeply copied and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * decoupled from the given reference."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param command the command that caused the change in state"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param patientBook the state before the execution of the command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public HistoryRecord(MutatorCommand command, PatientBook patientBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patientBook \u003d patientBook.deepCopy();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /** Returns the command stored in this record */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public MutatorCommand getCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a read-only reference to the state stored in this record. This method is preferred over"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@link #getCopyOfPatientBook()} if the state does not need to be modified as it avoids copying the entire state."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ReadOnlyPatientBook getReadOnlyPatientBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patientBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the state stored in this record. If the state does not need to be modified, it is"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * recommended to use {@link #getReadOnlyPatientBook()} instead."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBook getCopyOfPatientBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patientBook.deepCopy();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return command.getClass().getSimpleName() + \", \" + patientBook.toString()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \" \" + patientBook.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (!(obj instanceof HistoryRecord)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryRecord other \u003d (HistoryRecord) obj;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return command.equals(other.command)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \u0026\u0026 patientBook.equals(other.patientBook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 54,
      "crazoter": 15
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the user prefs\u0027 patient book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Path getPatientBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Sets the user prefs\u0027 patient book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void setPatientBookFilePath(Path patientBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Replaces patient book data with the data in {@code patientBook}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void setStagedPatientBook(ReadOnlyPatientBook patientBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Replaces all patients in patient book with new patients from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void replaceStagedPatientBook(List\u003cPatient\u003e patients);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /** Returns the current PatientBook */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ReadOnlyPatientBook getStagedPatientBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Record a new ongoing visit of patient in the model."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This will be saved until the visit is finished."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Ongoing visit must be from a Patient unmodified or an IllegalArgumentException will be thrown,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * so only use this to begin visits."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void setNewOngoingVisit(Visit visit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Update an ongoing visit in the model. This will update the ongoing visit"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * AND update the visit in the patient."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Use this to update an ongoing visit when there is already a visit."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void updateOngoingVisit(Visit updatedVisit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Cancel the ongoing visit if there is an ongoing visit."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void cancelOngoingVisit();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Set the ongoing visit of patient in the model to null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void unsetOngoingVisit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Get optional pair of current patient and visit if there is an ongoing visit."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Optional\u003cVisit\u003e getOngoingVisit();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Return true if the patient has an ongoing visit."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Note: The current implementation only checks if this patient is the one being tracked using the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * currentPatientAndVisit."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    boolean patientHasOngoingVisit(Patient patient);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the patient book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    boolean hasPatient(Patient patient);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Returns true if any patient in the provided list has the same identity as"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * any patient in the patient book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    boolean hasAnyPatientInGivenList(List\u003cPatient\u003e patients);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Deletes the given patient."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The patient must exist in the patient book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void deletePatient(Patient target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Adds the given patient."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code patient} must not already exist in the patient book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * Adds all patients in the given list of patients."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     * {@code patient} in the list must not exist in the patient book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    void addPatients(List\u003cPatient\u003e patients);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Replaces the given patient {@code target} with {@code editedPatient}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code target} must exist in the patient book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * existing patient in the patient book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void setPatient(Patient target, Patient editedPatient);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /** Returns the patient at the specified index */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Patient getPatientByIndex(Index index);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /** Returns a list of patients at the provided indexes */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ObservableList\u003cPatient\u003e getPatientsByIndexes(Set\u003cIndex\u003e indexes);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /** Returns an unmodifiable view of the entire patient list */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ObservableList\u003cPatient\u003e getStagedPatientList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /** Returns an unmodifiable view of the filtered patient list */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    FilteredList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an unmodifiable view of the list of ongoing visits."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The current constraint is only one ongoing visit at one time."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ObservableList\u003cVisit\u003e getObservableOngoingVisitList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if there are changes to the patient book that have not been {@code commit()}ed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return true if there are uncommitted changes"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    boolean hasStagedChanges();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Commits the changes made to the patient book since the last call to this method, making them permanent and"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * updating the UI data. The committing {@code MutatorCommand} is stored for history record purposes."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param command the {@code MutatorCommand} making this commit"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    void commit(MutatorCommand command);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /** Discards staged but uncommitted changes */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    void discardStagedChanges();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Reverts current model state to the {@link PatientBook} contained in the specified {@link HistoryRecord}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * (i.e. the state before the {@link MutatorCommand} was executed)."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param record record to revert to"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return list of reverted records with the first reversion at index 0"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    List\u003cHistoryRecord\u003e undoTo(HistoryRecord record);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Redoes the previous {@link MutatorCommand} if it was an undo."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return record describing the redone command and the state after its execution"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws IllegalStateException if the previous command was not an undo"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    HistoryRecord redo() throws IllegalStateException;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /** Returns an unmodifiable view of the history */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    ObservableList\u003cHistoryRecord\u003e getHistory();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    // Appointment related methods"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Replaces appointment book data with the data in {@code appointmentBook}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    void setStagedAppointmentBook(ReadOnlyAppointmentBook appointmentBook);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Replaces all appointments in appointment book with new appointments from the list."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    void replaceStagedAppointmentBook(List\u003cAppointment\u003e appointments);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /** Returns the current AppointmentBook */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    ReadOnlyAppointmentBook getStagedAppointmentBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if an appointment with the same identity as {@code patient} exists in the appointment list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    boolean hasAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Deletes the given appointment."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * The appointment must exist in the appointment list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    void deleteAppointment(Appointment target);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Adds the given appointment."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * {@code appointment} must not already exist in the appointment list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    void addAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Replaces the given appointment {@code target} with {@code editedAppointment}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * {@code target} must exist in the appointment list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * The appointment identity of {@code editedAppointment} must not be the same as another existing appointment"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * in the appointment list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    void setAppointment(Appointment target, Appointment editedAppointment);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /** Returns an unmodifiable view of the entire appointment list */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    ObservableList\u003cAppointment\u003e getStagedAppointmentList();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /** Returns an unmodifiable view of the filtered appointment list */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    FilteredList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 33,
      "cheongsiuhong": 18,
      "sandydays": 55,
      "crazoter": 93,
      "-": 58
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents the in-memory model of the patient book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static final int MAX_HISTORY_SIZE \u003d 20;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private PatientBook basePatientBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private PatientBook stagedPatientBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private final HistoryManager historyManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Modifiable list containing current stagedPatientBook patients"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final ObservableList\u003cPatient\u003e stagedPatients;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final FilteredList\u003cPatient\u003e filteredPatients; // Unmodifiable view for the UI linked to stagedPatients"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //Placing ongoingVisitList here so that any changes to the ongoing visit will be reflected"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //in the UI"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final ObservableList\u003cVisit\u003e ongoingVisitList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //Previous predicate variable to keep track of the predicate used by FindCommands"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Predicate\u003cPatient\u003e previousPredicatePatients \u003d PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    //Appointment list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final AppointmentBook baseAppointmentBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final AppointmentBook stagedAppointmentBook;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Modifiable list containing current stagedAppointmentBook patients"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e stagedAppointments;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    // Unmodifiable view for the UI linked to stagedAppointments"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final FilteredList\u003cAppointment\u003e filteredAppointments;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    //Previous predicate variable to keep track of the predicate used by FindCommands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Predicate\u003cAppointment\u003e previousPredicateAppointments \u003d PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Initializes a ModelManager with the given patientBook and userPrefs."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ModelManager(ReadOnlyPatientBook patientBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(patientBook, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        logger.fine(\"Initializing with patient book: \" + patientBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.basePatientBook \u003d new PatientBook(patientBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.stagedPatientBook \u003d this.basePatientBook.deepCopy();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.historyManager \u003d new HistoryManager(MAX_HISTORY_SIZE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stagedPatients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        filteredPatients \u003d new FilteredList\u003c\u003e(FXCollections.unmodifiableObservableList(stagedPatients));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Initializing ongoingVisitList here instead of in PatientBook as it is a wrapper of the data"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cVisit\u003e ongoingVisit \u003d this.stagedPatientBook.getOngoingVisit();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisit.ifPresent(ongoingVisitList::add);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        refreshStagedData();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        //Initializing appointment related book and appointments"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.baseAppointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.stagedAppointmentBook \u003d this.baseAppointmentBook.deepCopy();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stagedAppointments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        filteredAppointments \u003d new FilteredList\u003c\u003e(FXCollections.unmodifiableObservableList(stagedAppointments));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        refreshStagedAppointments();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this(new PatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return userPrefs.getPatientBookFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatientBookFilePath(Path patientBookFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patientBookFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userPrefs.setPatientBookFilePath(patientBookFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setStagedPatientBook(ReadOnlyPatientBook patientBook) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.stagedPatientBook.resetData(patientBook);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        refreshStagedData();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void replaceStagedPatientBook(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook newBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Patient patient : patients) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            newBook.addPatient(patient);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setStagedPatientBook(newBook);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        refreshStagedData();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ReadOnlyPatientBook getStagedPatientBook() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return stagedPatientBook;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Record ongoing visit of patient in the model."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This will be saved until the visit is finished."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setNewOngoingVisit(Visit visit) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stagedPatientBook.setOngoingVisit(visit);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateOngoingVisitList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void cancelOngoingVisit() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cVisit\u003e optionalVisit \u003d getOngoingVisit();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (optionalVisit.isPresent()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            unsetOngoingVisit();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Visit visit \u003d optionalVisit.get();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.getPatient().removeVisit(visit, this);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void unsetOngoingVisit() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stagedPatientBook.unsetOngoingVisit();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateOngoingVisitList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void updateOngoingVisit(Visit updatedVisit) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(updatedVisit);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cVisit\u003e optionalOngoingVisit \u003d getOngoingVisit();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (optionalOngoingVisit.isPresent()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Visit ongoingVisit \u003d optionalOngoingVisit.get();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ongoingVisit.getPatient().updateVisit(ongoingVisit, updatedVisit);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            setNewOngoingVisit(updatedVisit);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalStateException();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Helper method to update ongoing visit list which is linked to the UI"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void updateOngoingVisitList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitList.clear();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cVisit\u003e potentialOngoingVisit \u003d this.stagedPatientBook.getOngoingVisit();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (potentialOngoingVisit.isPresent()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ongoingVisitList.add(potentialOngoingVisit.get());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cVisit\u003e getOngoingVisit() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return stagedPatientBook.getOngoingVisit();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean patientHasOngoingVisit(Patient patient) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cVisit\u003e optionalVisit \u003d getOngoingVisit();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return optionalVisit.isPresent()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 patient.equals(optionalVisit.get().getPatient());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return stagedPatientBook.hasPatient(patient);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public boolean hasAnyPatientInGivenList(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(patients);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return patients.stream().anyMatch(this::hasPatient);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stagedPatientBook.removePatient(target);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        refreshStagedData();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        refreshFilteredPatientList();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stagedPatientBook.addPatient(patient);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        refreshStagedData();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void addPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(patients);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        assert !patients.isEmpty();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        for (Patient patient : patients) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            stagedPatientBook.addPatient(patient);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        refreshStagedData();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stagedPatientBook.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        refreshStagedData();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Patient getPatientByIndex(Index index) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assert index.getZeroBased() \u003c\u003d stagedPatients.size();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return stagedPatientBook.getPatientByIndex(index);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ObservableList\u003cPatient\u003e getPatientsByIndexes(Set\u003cIndex\u003e indexes) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        requireNonNull(indexes);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return stagedPatientBook.getPatientListByIndexes(indexes);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an unmodifiable view of the full list of {@code Patient} backed by {@code stagedPatients}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ObservableList\u003cPatient\u003e getStagedPatientList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new FilteredList\u003c\u003e(FXCollections.unmodifiableObservableList(stagedPatients));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean hasStagedChanges() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return !basePatientBook.equals(stagedPatientBook);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void commit(MutatorCommand command) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.pushRecord(command, basePatientBook);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        changeBaseTo(stagedPatientBook);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void discardStagedChanges() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stagedPatientBook \u003d basePatientBook.deepCopy();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        refreshStagedData();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public List\u003cHistoryRecord\u003e undoTo(HistoryRecord record) throws NoSuchElementException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cHistoryRecord\u003e poppedRecords \u003d historyManager.popRecordsTo(record, stagedPatientBook);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        changeBaseTo(record.getCopyOfPatientBook());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return poppedRecords;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public HistoryRecord redo() throws IllegalStateException {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cHistoryRecord\u003e redoneRecord \u003d historyManager.popRedo(stagedPatientBook);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (redoneRecord.isEmpty()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new IllegalStateException(\"Cannot redo: previous MutatorCommand was not an undo\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        changeBaseTo(redoneRecord.get().getCopyOfPatientBook());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return redoneRecord.get();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ObservableList\u003cHistoryRecord\u003e getHistory() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return historyManager.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void changeBaseTo(PatientBook patientBook) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        basePatientBook \u003d patientBook;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stagedPatientBook \u003d basePatientBook.deepCopy();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        refreshStagedData();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Refresh staged data on changing data or undo/redo. Affects stagedPatients and ongoingVisitList."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void refreshStagedData() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stagedPatients.setAll(stagedPatientBook.getPatientList());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        updateOngoingVisitList();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Patient} backed by {@code stagedPatients}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public FilteredList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return filteredPatients;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Refreshes the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This will update the indexes of patients if a patient outside of the filtered list has been removed."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void refreshFilteredPatientList() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //In order to refresh predicate, need to reset it to show all patients first."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Otherwise it will not change anything"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        filteredPatients.setPredicate(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        filteredPatients.setPredicate(previousPredicatePatients);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        previousPredicatePatients \u003d predicate;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        filteredPatients.setPredicate(predicate);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns true if the current state of this {@code ModelManager} is the same as {@code obj}."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * It does NOT take into account {@code basePatientBook} or {@code historyManager}."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ObservableList\u003cVisit\u003e getObservableOngoingVisitList() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return FXCollections.unmodifiableObservableList(ongoingVisitList);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    // Appointment related method implementations"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void setStagedAppointmentBook(ReadOnlyAppointmentBook appointmentBook) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.stagedAppointmentBook.resetData(appointmentBook);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        refreshStagedAppointments();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void replaceStagedAppointmentBook(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        AppointmentBook newBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        for (Appointment appointment : appointments) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            newBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        setStagedAppointmentBook(newBook);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        refreshStagedAppointments();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public ReadOnlyAppointmentBook getStagedAppointmentBook() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return stagedAppointmentBook;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return stagedAppointmentBook.hasAppointment(appointment);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void deleteAppointment(Appointment target) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stagedAppointmentBook.removeAppointment(target);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        refreshStagedAppointments();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        refreshFilteredAppointmentList();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stagedAppointmentBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        refreshStagedAppointments();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedAppointment);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stagedAppointmentBook.setAppointment(target, editedAppointment);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private void refreshStagedAppointments() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stagedAppointments.setAll(stagedAppointmentBook.getAppointmentList());"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns an unmodifiable view of the full list of {@code Appointment} backed by {@code stagedAppointments}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getStagedAppointmentList() {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new FilteredList\u003c\u003e(FXCollections.unmodifiableObservableList(stagedAppointments));"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Appointment} backed by {@code stagedAppointments}"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public FilteredList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return filteredAppointments;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Refreshes the filter of the filtered appointment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * This will update the indexes of appointments if an appointment outside of the filtered list has been removed."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private void refreshFilteredAppointmentList() {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        //In order to refresh predicate, need to reset it to show all appointments first."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        //Otherwise it will not change anything"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        filteredAppointments.setPredicate(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        filteredAppointments.setPredicate(previousPredicateAppointments);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        previousPredicateAppointments \u003d predicate;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        filteredAppointments.setPredicate(predicate);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return stagedPatientBook.equals(other.stagedPatientBook)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 filteredPatients.equals(other.filteredPatients);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 43,
      "cheongsiuhong": 32,
      "sandydays": 107,
      "crazoter": 197,
      "-": 106
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/PatientBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.CopyError;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.UniquePatientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.exceptions.PatientHasOngoingVisitException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.JsonSerializablePatientBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Duplicates are not allowed (by .isSamePatient comparison)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class PatientBook implements ReadOnlyPatientBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final Pair\u003cInteger, Integer\u003e NO_ONGOING_PATIENT_AND_VISIT_VAL \u003d new Pair\u003c\u003e(-1, -1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final UniquePatientList patients;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Pair\u003cInteger, Integer\u003e pairOfOngoingPatAndVisitIndexes \u003d NO_ONGOING_PATIENT_AND_VISIT_VAL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patients \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBook() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates an PatientBook using the Patients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBook(ReadOnlyPatientBook toBeCopied) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Replaces the contents of the patient list with {@code patients}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patients.setPatients(patients);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Resets the existing data of this {@code PatientBook} with {@code newData}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void resetData(ReadOnlyPatientBook newData) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setPatients(newData.getPatientList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setPairOfOngoingPatAndVisitIndexes(newData.getIndexPairOfOngoingPatientAndVisit());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //// patient-level operations"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the patient book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patients.contains(patient);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns index of patient."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int indexOfPatient(Patient patient) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patients.indexOf(patient);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Adds a patient to the patient book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The patient must not already exist in the patient book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patients.add(p);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Replaces the given patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code target} must exist in the patient book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * existing patient in the patient book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patients.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Removes {@code key} from this {@code PatientBook}. Also updates currentPatientAndVisit if needed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code key} must exist in the patient book and must not have an ongoing visit."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void removePatient(Patient key) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //If no ongoing visit, just remove"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (pairOfOngoingPatAndVisitIndexes.equals(NO_ONGOING_PATIENT_AND_VISIT_VAL)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            patients.remove(key);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Optional\u003cVisit\u003e optionalVisit \u003d getOngoingVisit();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            assert optionalVisit.isPresent();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Patient currentPatient \u003d optionalVisit.get().getPatient();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (currentPatient.equals(key)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Code should have prevented this from reaching this stage"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new PatientHasOngoingVisitException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Remove and update"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                patients.remove(key);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setPairOfOngoingPatAndVisitIndexes(new Pair\u003c\u003e(indexOfPatient(currentPatient),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        pairOfOngoingPatAndVisitIndexes.getValue()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Patient getPatientByIndex(Index index) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int integerIndex \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assert integerIndex \u003c\u003d patients.size();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patients.getByIndex(integerIndex).get();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBook deepCopy() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new JsonSerializablePatientBook(this).toModelType();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new CopyError(\"Error copying PatientBook\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patients.asUnmodifiableObservableList().size() + \" patients\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /** Returns an unmodifiable view of patients at the provided indexes */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ObservableList\u003cPatient\u003e getPatientListByIndexes(Set\u003cIndex\u003e indexes) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ObservableList\u003cPatient\u003e patientList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Index index : indexes) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            int integerIndex \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            assert integerIndex \u003c\u003d patients.size();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            patientList.add(getPatientByIndex(index));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return FXCollections.unmodifiableObservableList(patientList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof PatientBook // instanceof handles nulls"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 patients.equals(((PatientBook) other).patients));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patients.hashCode();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Get optional pair of current patient and visit if there is an ongoing visit."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cVisit\u003e getOngoingVisit() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (pairOfOngoingPatAndVisitIndexes.getKey() \u003d\u003d -1 || pairOfOngoingPatAndVisitIndexes.getValue() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cPatient\u003e patient \u003d patients.getByIndex(pairOfOngoingPatAndVisitIndexes.getKey());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (patient.isEmpty()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patient.get().getVisitByIndex(pairOfOngoingPatAndVisitIndexes.getValue());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Verifies that the patient and visit indexes can be obtained from the visit i.e."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if the visit can be found in the data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean visitIsInData(Visit visit) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patient \u003d visit.getPatient();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int patientIndex \u003d patients.indexOf(patient);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (patientIndex \u003c\u003d -1) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int visitIndex \u003d patient.indexOfVisit(visit);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visitIndex \u003e -1;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Record ongoing visit of patient."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This will be saved until the visit is finished."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setOngoingVisit(Visit visit) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!visitIsInData(visit)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setPairOfOngoingPatAndVisitIndexes(new Pair\u003c\u003e(patients.indexOf(visit.getPatient()),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visit.getPatient().indexOfVisit(visit)));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Unset current patient and visit"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void unsetOngoingVisit() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.pairOfOngoingPatAndVisitIndexes \u003d NO_ONGOING_PATIENT_AND_VISIT_VAL;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Pair\u003cInteger, Integer\u003e getIndexPairOfOngoingPatientAndVisit() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return pairOfOngoingPatAndVisitIndexes;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void setPairOfOngoingPatAndVisitIndexes(Pair\u003cInteger, Integer\u003e pairOfOngoingPatAndVisitIndexes) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.pairOfOngoingPatAndVisitIndexes \u003d pairOfOngoingPatAndVisitIndexes;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 246
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/ReadOnlyAppointmentBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Unmodifiable view of an appointment book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public interface ReadOnlyAppointmentBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns an unmodifiable view of the appointments list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * This list will not contain any duplicate appointments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    ObservableList\u003cAppointment\u003e getAppointmentList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns a deep copy of this {@code readOnlyAppointmentBook}. Changes made to the copy will not affect this object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * and vice versa."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    ReadOnlyAppointmentBook deepCopy();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sandydays": 21,
      "crazoter": 2
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/ReadOnlyPatientBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Unmodifiable view of an patient book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public interface ReadOnlyPatientBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an unmodifiable view of the patients list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This list will not contain any duplicate patients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ObservableList\u003cPatient\u003e getPatientList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a {@code Pair\u003cInteger, Integer\u003e} containing the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * PatientIndex and AppointmentIndex respectively to indicate the ongoing visit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * If there is no ongoing visit, returns {@code new Pair\u003c\u003e(-1,-1)}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Pair\u003cInteger, Integer\u003e getIndexPairOfOngoingPatientAndVisit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a deep copy of this {@code readOnlyPatientBook}. Changes made to the copy will not affect this object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * and vice versa."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    ReadOnlyPatientBook deepCopy();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 5,
      "crazoter": 15,
      "-": 10
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Path getPatientBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Path patientBookFilePath \u003d Paths.get(\"data\" , \"patientBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setPatientBookFilePath(newUserPrefs.getPatientBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patientBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatientBookFilePath(Path patientBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patientBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patientBookFilePath \u003d patientBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 patientBookFilePath.equals(o.patientBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Objects.hash(guiSettings, patientBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + patientBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/appointment/Appointment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.RecurringDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Represents an Appointment in the application"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final StartDateTime startDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final EndDateTime endDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final RecurringDateTime frequency;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final Index patientIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Appointment(StartDateTime startDateTime, EndDateTime endDateTime, RecurringDateTime frequency,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                       Index patientIndex, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(startDateTime, endDateTime, frequency, patientIndex, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public StartDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public EndDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public RecurringDateTime getFrequency() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Index getPatientIndex() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return patientIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Patient getPatient() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatient(Patient patient) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return patient.getAddress();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns true if both appointments of the same date and time have at least one other identity field that is the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * same."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * This defines a weaker notion of equality between two appointments."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean isSameAppointment(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (otherAppointment \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return otherAppointment !\u003d null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 (otherAppointment.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    || otherAppointment.getFrequency().equals(getFrequency()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns true if both appointments have the same identity and data fields."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * This defines a stronger notion of equality between two appointments."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!(other instanceof Appointment)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Appointment otherAppointment \u003d (Appointment) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return otherAppointment.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getFrequency().equals(getFrequency())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getPatient().equals(getPatient())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 otherAppointment.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return Objects.hash(startDateTime, endDateTime, frequency, patient, description);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        builder.append(\" Start Date and Time: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getStartDateTime())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(\" End Date and Time \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getEndDateTime())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(\" Frequency: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getFrequency())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(\" Patient: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getPatient())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 123,
      "crazoter": 12
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/appointment/AppointmentContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class AppointmentContainsKeywordsPredicate implements Predicate\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public AppointmentContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean test(Appointment appointment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(appointment.getPatient()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                                                                  .getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                || (other instanceof AppointmentContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 keywords.equals(((AppointmentContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 29,
      "crazoter": 3
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/appointment/UniqueAppointmentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * A list of appointments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * A appointment is considered unique by comparing using {@code Appointment#isSameAppointment(Appointment)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * As such, adding and updating of appointments uses Appointment#isSameAppointment(Appointment) for equality so as to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * ensure that the appointment being added or updated is unique in terms of identity in the UniqueAppointmentList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * However, the removal of a patient uses Appointment#equals(Object) so as to ensure that the appointment with exactly"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * @see Appointment#isSameAppointment(Appointment)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns true if the list contains an equivalent appointment as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean contains(Appointment toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAppointment);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Adds an appointment to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * The appointment must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void add(Appointment toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DuplicateAppointmentException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns the index of an appointment from the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public int indexOf(Appointment toFind) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(toFind);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return internalList.indexOf(toFind);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Replaces the appointment {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * The appointment identity of {@code editedAppointment} must not be the same as another existing appointment"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedAppointment);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!target.isSameAppointment(editedAppointment) \u0026\u0026 contains(editedAppointment)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DuplicateAppointmentException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        internalList.set(index, editedAppointment);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Removes the equivalent appointment from the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * The appointment must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void remove(Appointment toRemove) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void setAppointments(UniqueAppointmentList replacement) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Replaces the contents of this list with {@code appointments}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * {@code appointments} must not contain duplicate appointments."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(appointments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!appointmentsAreUnique(appointments)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DuplicateAppointmentException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        internalList.setAll(appointments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Iterator\u003cAppointment\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                || (other instanceof UniqueAppointmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAppointmentList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if {@code appointments} contains only unique patients."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                if (appointments.get(i).isSameAppointment(appointments.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Get an appointment by index (Optional object)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Optional\u003cAppointment\u003e getByIndex(int key) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (key \u003e\u003d 0 \u0026\u0026 key \u003c internalList.size()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return Optional.of(internalList.get(key));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 150,
      "crazoter": 8
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/appointment/exceptions/AppointmentNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Signals that the operation is unable to find the specified patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AppointmentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 6
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/appointment/exceptions/DuplicateAppointmentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Signals that the operation will result in duplicate Patients (Patients are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class DuplicateAppointmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DuplicateAppointmentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(\"Operation would result in duplicate appointments\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 8,
      "crazoter": 3
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/datetime/DateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.AppUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit\u0027s datetime in the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_BODY \u003d \"Date Time should be of the format dd-MM-yyyy HHmm \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"1. The values that substitute \u0027dd\u0027, \u0027MM\u0027, \u0027yyyy\u0027, \u0027HH\u0027 and \u0027mm\u0027 must all be numerical numbers.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final DateTimeFormatter DATE_DISPLAY_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final DateTimeFormatter DATE_PARSER_VALIDATOR \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param dateTime A valid dateTime string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        AppUtil.checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS_BODY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.dateTime \u003d parseDateTime(dateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param date A valid Date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DateTime(Date date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Instant current \u003d date.toInstant();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.ofInstant(current, ZoneId.systemDefault());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.dateTime \u003d now.truncatedTo(ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the parsed dateTimeTime if a given string is a valid dateTime; else calls checkArgument"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * which will throw an IllegalArgumentException."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return LocalDateTime"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static LocalDateTime parseDateTime(String value) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return LocalDateTime.parse(value, DATE_PARSER_VALIDATOR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            // This should not happen as we have already validated the value above"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            AppUtil.checkArgument(isValidDateTime(value), MESSAGE_CONSTRAINTS_BODY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns if a given string is a valid dateTime."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            DATE_PARSER_VALIDATOR.parse(test);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Convert date to a string for JSON storage."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return dateTime as a string"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toJacksonJsonString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return DATE_PARSER_VALIDATOR.format(dateTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return DATE_DISPLAY_FORMATTER.format(dateTime);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 dateTime.equals(((DateTime) other).dateTime)); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return dateTime.hashCode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 15,
      "crazoter": 89
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/datetime/EndDateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit\u0027s end time in the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class EndDateTime extends DateTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"End \" + DateTime.MESSAGE_CONSTRAINTS_BODY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final EndDateTime UNFINISHED_VISIT_END_DATE_TIME \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Constructs an {@code EndDateTime}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param dateTime A valid dateTime address."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EndDateTime(String dateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param date A valid Date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EndDateTime(Date date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns if a given string is a valid dateTime."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Valid end date times must be equal or before start date time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean isValidEndDateTime(String startDateTime, String endDateTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        boolean validStartDateTime \u003d isValidDateTime(startDateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        boolean validEndDateTime \u003d isValidDateTime(endDateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (validStartDateTime \u0026\u0026 validEndDateTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            StartDateTime start \u003d new StartDateTime(startDateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            EndDateTime end \u003d new EndDateTime(endDateTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return end.dateTime.isAfter(start.dateTime) || end.dateTime.isEqual(start.dateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 10,
      "crazoter": 38
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/datetime/RecurringDateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Represents the frequency of a recurring appointment"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class RecurringDateTime {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Recurring \" + DateTime.MESSAGE_CONSTRAINTS_BODY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final int EXPECTED_FREQUENCY_ARRAY_LENGTH \u003d 6;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long years;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long months;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long weeks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long days;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long hours;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final long minutes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final Long[] freqArray;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Constructs an {@code RecurringDateTime}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param freqArray"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public RecurringDateTime(Long[] freqArray) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(Arrays.asList(freqArray));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.years \u003d freqArray[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.months \u003d freqArray[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.weeks \u003d freqArray[2];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.days \u003d freqArray[3];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.hours \u003d freqArray[4];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.minutes \u003d freqArray[5];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.freqArray \u003d freqArray;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Long getYears() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return years;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Long getMonths() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return months;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Long getWeeks() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return weeks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Long getDays() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Long getHours() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return hours;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Long getMinutes() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return minutes;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Converts the JSON storage String to an array of type long"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return Long[] array"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static Long[] frequencyStringToLong(String freq) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long[] freqLongArray \u003d Arrays.asList(freq.split(\"\\n\"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .map(x -\u003e Long.parseLong(x))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                .toArray(Long[]::new);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return freqLongArray;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return boolean, which is true if frequency is valid"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static boolean isValidSingleFrequency(String freq) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long freqLong \u003d Long.parseLong(freq);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return freqLong \u003e\u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return boolean, which is true if frequency is valid"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static boolean isValidFrequency(String freq) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long[] freqLongArray \u003d frequencyStringToLong(freq);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return freqLongArray.length \u003d\u003d EXPECTED_FREQUENCY_ARRAY_LENGTH;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return boolean, which is true if frequency is non-zero"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean isRecurringFrequency() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int numZeros \u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        for (int i \u003d 0; i \u003c EXPECTED_FREQUENCY_ARRAY_LENGTH; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (freqArray[i] \u003d\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                numZeros++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return (numZeros \u003d\u003d EXPECTED_FREQUENCY_ARRAY_LENGTH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return Long, which is 0 if string passed in is null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static Long getSingleFrequencyAsLong(String freq) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return Long.parseLong(freq);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Convert recurring dateTime to a string for JSON storage."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return dateTime as a string"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toJacksonJsonString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        List\u003cLong\u003e freqList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Collections.addAll(freqList, years, months, weeks, days, hours, minutes);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return CollectionUtil.collectionToString(freqList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Gets recurring appointment\u0027s next date and time based on current one"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DateTime getNextAppointmentDateTime(StartDateTime currentAppointmentDateTime) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        LocalDateTime nextAppointmentDateTime \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            currentAppointmentDateTime.dateTime"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusYears(years)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusMonths(months)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusWeeks(weeks)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusDays(days)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusHours(hours)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .plusMinutes(minutes);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new DateTime(nextAppointmentDateTime.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 135,
      "crazoter": 6
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/datetime/StartDateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit\u0027s end time in the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class StartDateTime extends DateTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Start \" + DateTime.MESSAGE_CONSTRAINTS_BODY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs an {@code StartDateTime}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param dateTime A valid dateTime address."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public StartDateTime(String dateTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param date A valid Date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public StartDateTime(Date date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns if a given string is a valid dateTime."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean isValidStartDateTime(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return isValidDateTime(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 37
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/patient/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Patient\u0027s address in the patient book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        AppUtil.checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 5,
      "-": 53
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/patient/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Patient\u0027s email in the patient book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        AppUtil.checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 5,
      "-": 63
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/patient/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Patient\u0027s name in the patient book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns true if a given name is the same as this one, case insensitive. This defines a weaker notion of"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * equality between two names than {@link #equals(Object)}, which is case sensitive."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean isSameName(Name name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return fullName.equalsIgnoreCase(name.fullName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 8,
      "crazoter": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/patient/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/patient/Patient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.exceptions.VisitNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Patient in the patient book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final List\u003cVisit\u003e PLACEHOLDER_NO_VISITS \u003d Collections.unmodifiableList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Collection\u003cVisitTodo\u003e visitTodos \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cVisit\u003e visits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Patient(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                  Collection\u003cVisitTodo\u003e visitTodos, List\u003cVisit\u003e visits) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(name, phone, email, address, tags, visitTodos);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visitTodos.addAll(visitTodos);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visits.addAll(visits);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an immutable visitTodo collection, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Collection\u003cVisitTodo\u003e getVisitTodos() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Collections.unmodifiableCollection(visitTodos);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an immutable visit list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cVisit\u003e getVisits() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Collections.unmodifiableList(visits);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if both patients of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This defines a weaker notion of equality between two patients."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isSamePatient(Patient otherPatient) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return otherPatient !\u003d null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \u0026\u0026 otherPatient.getName().isSameName(getName()) // case insensitive check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 (otherPatient.getPhone().equals(getPhone()) || otherPatient.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if both patients have the same identity and data fields."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherPatient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherPatient.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherPatient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherPatient.getTags().equals(getTags())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 CollectionUtil.checkEqual(getVisitTodos(), otherPatient.getVisitTodos())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 CollectionUtil.checkEqual(getVisits(), otherPatient.getVisits());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, visitTodos, visits);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(\" Visit Todos: \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        getVisitTodos().forEach(builder::append);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(\" Visits: \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        getVisits().forEach(builder::append);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Return index of visit from the visit list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int indexOfVisit(Visit visit) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visits.indexOf(visit);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add visit to patient\u0027s visit list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void addVisit(Visit visit) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visit);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visits.add(visit);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add a list of visits to patient\u0027s visit list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void addVisits(List\u003cVisit\u003e visits) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(visits);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visits.addAll(visits);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Update a visit in the patient\u0027s list of visits."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void updateVisit(Visit target, Visit updatedVisit) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, updatedVisit);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int indexOf \u003d this.visits.indexOf(target);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (indexOf \u003e -1) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.visits.set(indexOf, updatedVisit);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //This should not happen under normal circumstances (code error)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new VisitNotFoundException();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Remove a visit object. Model is passed in to ensure visit is not ongoing."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Throws IllegalArgumentException if index is not within visit range."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Throws IllegalStateException if visit is ongoing."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void removeVisit(Visit visitToRemove, Model model) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(visitToRemove, model);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!visits.contains(visitToRemove)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //If visit is ongoing"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        boolean updateOngoingVisitAfterRemoval \u003d false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cVisit\u003e optionalVisit \u003d model.getOngoingVisit();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (optionalVisit.isPresent()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Visit ongoingVisit \u003d optionalVisit.get();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //Unset before removal"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            model.unsetOngoingVisit();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //If it\u0027s another visit being deleted, ensure indexes are the same"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (!ongoingVisit.equals(visitToRemove)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                updateOngoingVisitAfterRemoval \u003d true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visits.remove(visitToRemove);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Update ongoing visit (if there is) if not removing ongoing visit"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (optionalVisit.isPresent() \u0026\u0026 updateOngoingVisitAfterRemoval) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            model.setNewOngoingVisit(optionalVisit.get());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Get visit by index from the visit list (Optional object)."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cVisit\u003e getVisitByIndex(int value) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (value \u003e\u003d 0 \u0026\u0026 value \u003c visits.size()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.of(visits.get(value));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "crazoter": 141,
      "-": 96
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/patient/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Patient\u0027s phone number in the patient book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 and at most 8 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,8}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        AppUtil.checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 2,
      "crazoter": 5,
      "-": 47
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/patient/UniquePatientList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A list of patients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A patient is considered unique by comparing using {@code Patient#isSamePatient(Patient)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * updating of patients uses Patient#isSamePatient(Patient) for equality so as to ensure that the patient being added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * or updated is unique in terms of identity in the UniquePatientList. However, the removal of a patient uses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Patient#equals(Object) so as to ensure that the patient with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * @see Patient#isSamePatient(Patient)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class UniquePatientList implements Iterable\u003cPatient\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if the list contains an equivalent patient as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean contains(Patient toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePatient);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Adds a patient to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The patient must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void add(Patient toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the index of a patient from the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int indexOf(Patient toFind) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(toFind);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return internalList.indexOf(toFind);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Replaces the patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        internalList.set(index, editedPatient);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Removes the equivalent patient from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The patient must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void remove(Patient toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatients(UniquePatientList replacement) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Replaces the contents of this list with {@code patients}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(patients);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!patientsAreUnique(patients)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        internalList.setAll(patients);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Iterator\u003cPatient\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof UniquePatientList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePatientList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if {@code patients} contains only unique patients."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (int j \u003d i + 1; j \u003c patients.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (patients.get(i).isSamePatient(patients.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Get a patient by index (Optional object)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cPatient\u003e getByIndex(int key) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (key \u003e\u003d 0 \u0026\u0026 key \u003c internalList.size()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.of(internalList.get(key));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns size of the list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 163
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/patient/exceptions/DuplicatePatientException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Signals that the operation will result in duplicate Patients (Patients are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DuplicatePatientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DuplicatePatientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(\"Operation would result in duplicate patients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 11
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/patient/exceptions/PatientHasOngoingVisitException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Signals that the operation is unable to find the specified patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class PatientHasOngoingVisitException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 7
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/patient/exceptions/PatientNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Signals that the operation is unable to find the specified patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class PatientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 6
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Tag in the patient book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            \"Tags should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 3,
      "crazoter": 5,
      "-": 48
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.Detail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains utility methods for populating {@code PatientBook} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Patient[] getSamplePatients() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient[] resultPatientArr \u003d new Patient[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            new Patient(new Name(\"Tan Chin Tuan\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Phone(\"87414307\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Email(\"tanchintuan@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    getTagSet(\"Diabetes\"), getVisitTodos(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            new Patient(new Name(\"Chua Thian Poh\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Phone(\"99126758\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Email(\"ctph@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    getTagSet(\"Stroke\", \"High Blood Pressure\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getVisitTodos(\"Blood Pressure\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            new Patient(new Name(\"Alice Tan\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Phone(\"93027383\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Email(\"alice@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    getTagSet(\"Fever\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getVisitTodos(\"Body Temperature\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            new Patient(new Name(\"Peter Tan\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Phone(\"92636382\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Email(\"capt@example.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    getTagSet(\"Lower Back Pain\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getVisitTodos(\"Pain Level\", \"Check if patient has been exercising\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            new Patient(new Name(\"Kang Hway Chuan\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Phone(\"96910118\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Email(\"kang@usp.com\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    getTagSet(\"Healthy\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getVisitTodos(\"Check cognitive abilities\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            new Patient(new Name(\"Yong Loo Lin\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Phone(\"92612117\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    new Email(\"yll@example.com\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                    getTagSet(\"Abrasions\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    getVisitTodos(\"Check wounds\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    collateVisits())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // Add Visits, as they need a reference to the patient they are attached to"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        resultPatientArr[0].addVisit(makeVisit(\"Alex is in good health.\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"10-11-2019 1500\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"10-11-2019 1700\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                collateVisitTasks("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Apply Eyedrops\", \"\", true),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Top-up medicine\", \"\", true),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Check his diet\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \"Stopped eating donuts\", true),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Check his sleep cycle\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \"Could not sleep on Monday and Thursday\", true)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                resultPatientArr[0]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        resultPatientArr[1].addVisit(makeVisit(\"Charlotte was very quiet.\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"12-11-2018 1500\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"12-11-2018 1700\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                collateVisitTasks("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Check bed for bugs\", \"\", true),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Top-up medicine\", \"\", true)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                resultPatientArr[1]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        resultPatientArr[2].addVisit(makeVisit(\"\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"12-12-2018 1500\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"12-12-2018 1700\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                collateVisitTasks("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Blood pressure\", \"140/90mmHg\", true),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Check bed for bugs\", \"\", true),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Top-up medicine\", \"\", false),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        makeVisitTask(\"Ask spouse about David\u0027s condition\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \"\", false)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                resultPatientArr[2]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return resultPatientArr;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static ReadOnlyPatientBook getSamplePatientBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook sampleAb \u003d new PatientBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Patient samplePatient : getSamplePatients()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            sampleAb.addPatient(samplePatient);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a visitTodo collection containing the list of strings given."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Collection\u003cVisitTodo\u003e getVisitTodos(String... strings) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(VisitTodo::new)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a visit task list containing the list of visit tasks given."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static List\u003cVisitTask\u003e collateVisitTasks(VisitTask... visitTasks) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Arrays.stream(visitTasks).collect(Collectors.toList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Helper function to return a visit task."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static VisitTask makeVisitTask(String description, String detail, boolean isDone) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new VisitTask(new VisitTodo(description), new Detail(detail), isDone);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Helper function to return a visit."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Visit makeVisit(String remark, String start, String end, List\u003cVisitTask\u003e visitTasks,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                  Patient patient) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (end \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new Visit(new Remark(remark), new StartDateTime(start),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    EndDateTime.UNFINISHED_VISIT_END_DATE_TIME, visitTasks, patient);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new Visit(new Remark(remark), new StartDateTime(start),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new EndDateTime(end), visitTasks, patient);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a visit list containing the list of visits given."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static List\u003cVisit\u003e collateVisits(Visit... visits) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Arrays.stream(visits).collect(Collectors.toList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 24,
      "crazoter": 116,
      "-": 32
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/visit/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit\u0027s remark in the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //Commented but kept it here for developer understanding"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //public static final String MESSAGE_CONSTRAINTS \u003d \"Remarks can take any values.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public final String remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.remark \u003d remark \u003d\u003d null ? \"\" : remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 remark.equals(((Remark) other).remark) // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 toString().equals(other.toString())); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return remark.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 40
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/visit/Visit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit in the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Visit {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Pointer fields (not actually stored as a variable in JSON or CSV files)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Patient patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final StartDateTime startDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final EndDateTime endDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cVisitTask\u003e visitTasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Every field must be present and not null, with the exception of endDateTime"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * to accommodate for visits that have not finished."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Visit(Remark remark, StartDateTime startDateTime,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                 EndDateTime endDateTime, List\u003cVisitTask\u003e visitTasks, Patient patient) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(remark, startDateTime, visitTasks, patient);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visitTasks \u003d visitTasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public StartDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cEndDateTime\u003e getEndDateTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return endDateTime \u003d\u003d null ? Optional.empty() : Optional.of(endDateTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an immutable visit task list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public List\u003cVisitTask\u003e getVisitTasks() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Collections.unmodifiableList(visitTasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Patient getPatient() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if both visits have the same data fields and visit tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This defines a stronger notion of equality between two visits."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof Visit)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit otherVisit \u003d (Visit) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return otherVisit.getRemark().equals(getRemark())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherVisit.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherVisit.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 CollectionUtil.checkEqual(otherVisit.getVisitTasks(), getVisitTasks());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Objects.hash(remark, startDateTime, endDateTime, visitTasks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(\" Start Time: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(getStartDateTime())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(\" End Time: \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cEndDateTime\u003e endDateTime \u003d getEndDateTime();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(endDateTime.equals(Optional.empty()) ? \"Ongoing\" : endDateTime)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        getVisitTasks().forEach(builder::append);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(\" Remarks: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(getRemark());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 108
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/visit/exceptions/VisitNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.visit.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Signals that the operation could not find a visit (e.g. index out of bounds)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(\"Visit could not be found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 10
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/visittask/Detail.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.visittask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a Visit\u0027s detail in the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDetail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Detail {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Details can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The first character of the detail must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public final String detail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code Detail}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param detail A valid detail."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Detail(String detail) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(detail);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        AppUtil.checkArgument(isValidDetail(detail), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if a given string is a valid detail."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean isValidDetail(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return detail;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof Detail // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 detail.equals(((Detail) other).detail) // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 toString().equals(((Detail) other).toString())); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return detail.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 60
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/visittask/VisitTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.visittask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a task of a Visit in the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * As the name suggests, Visit \"Tasks\" are \"Tasks\" that the community nurse has to do during a visit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * i.e. VisitTasks are tasks to be done during a visit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * This is in contast to Visit \"Todos\" which are \"Todos\" for the community nurse when he/she goes on a visit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * i.e. VisitTodos are template VisitTasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitTask {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final VisitTodo visitTodo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Detail detail;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitTask(VisitTodo visitTodo, Detail detail, boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(visitTodo, detail);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visitTodo \u003d visitTodo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitTodo getVisitTodo() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visitTodo;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Get isDone formatted as a string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getIsDoneAsString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return \"✔\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return \"✘\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Detail getDetail() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return detail;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if both patients have the same identity and data fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof VisitTask)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTask otherVisitTask \u003d (VisitTask) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return otherVisitTask.getDetail().equals(getDetail())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherVisitTask.getVisitTodo().equals(getVisitTodo())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 otherVisitTask.isDone() \u003d\u003d isDone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Objects.hash(visitTodo, detail, isDone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        builder.append(\" Visit Todo: \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(getVisitTodo())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(\" Details: \")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(getDetail());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (isDone()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            builder.append(\"Status: (done)\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            builder.append(\"Status: (unfinished)\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 100
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/model/visittodo/VisitTodo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.visittodo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a VisitTodo in the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * As the name suggests, Visit \"Todos\" are \"Todos\" for the community nurse when he/she goes on a visit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * i.e. VisitTodos are template VisitTasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * This is in contrast to Visit \"Tasks\" which are \"Tasks\" that the community nurse has to do during a visit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * i.e. VisitTasks are tasks to be done during a visit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Guarantees: immutable; description is valid as declared in {@link #isValidVisitTodoDescription(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitTodo {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Visit Todo descriptions can \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code VisitTodo}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param description A valid visitTodo description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitTodo(String description) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        AppUtil.checkArgument(isValidVisitTodoDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns true if a given string is a valid visitTodo description."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean isValidVisitTodoDescription(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                || (other instanceof VisitTodo // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 getDescription().equals(((VisitTodo) other).getDescription())); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \u0027[\u0027 + description + \u0027]\u0027;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 71
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/JsonAdaptedAppointment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonPropertyOrder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.RecurringDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Jackson-friendly version of {@link Appointment}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "@JsonPropertyOrder({\"startDateTime\", \"endDateTime\", \"frequency\", \"patient\", \"description\"})"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class JsonAdaptedAppointment {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String END_DATE_EARLIER_THAN_START_DATE \u003d \"Appointment\u0027s start date is earlier \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            + \"than its end date\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @JsonProperty(\"startDateTime\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final String startDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @JsonProperty(\"endDateTime\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final String endDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @JsonProperty(\"frequency\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final String frequency;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @JsonProperty(\"patient\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final Index patientIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @JsonProperty(\"description\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Constructs a {@code JsonAdaptedAppointment} with the given {@code appointment}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public JsonAdaptedAppointment(@JsonProperty(\"startDateTime\") String startDateTime,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                  @JsonProperty(\"endDateTime\") String endDateTime,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                  @JsonProperty(\"frequency\") String frequency,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                  @JsonProperty(\"patient\") Index patientIndex,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                  @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.patientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public JsonAdaptedAppointment(Appointment source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        startDateTime \u003d source.getStartDateTime().toJacksonJsonString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        endDateTime \u003d source.getEndDateTime().toJacksonJsonString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        frequency \u003d source.getFrequency().toJacksonJsonString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        patientIndex \u003d source.getPatientIndex();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Appointment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    StartDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!StartDateTime.isValidDateTime(startDateTime)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new IllegalValueException(StartDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        final StartDateTime modelStartDateTime \u003d new StartDateTime(startDateTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    EndDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!EndDateTime.isValidDateTime(endDateTime)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new IllegalValueException(EndDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!EndDateTime.isValidEndDateTime(startDateTime, endDateTime)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new IllegalValueException(END_DATE_EARLIER_THAN_START_DATE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        final EndDateTime modelEndDateTime \u003d new EndDateTime(endDateTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (frequency \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    RecurringDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!RecurringDateTime.isValidFrequency(frequency)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new IllegalValueException(RecurringDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Long[] freqArray \u003d RecurringDateTime.frequencyStringToLong(frequency);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        final RecurringDateTime modelFrequency \u003d new RecurringDateTime(freqArray);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (patientIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    Index.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        final Index modelPatientIndex \u003d patientIndex;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        final String modelDescription \u003d description;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new Appointment(modelStartDateTime, modelEndDateTime, modelFrequency, modelPatientIndex,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                modelDescription);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sandydays": 104,
      "crazoter": 8
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/JsonAdaptedPatient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonPropertyOrder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "@JsonPropertyOrder({\"name\", \"phone\", \"email\", \"address\", \"tagged\", \"visitTodos\", \"visits\"})"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class JsonAdaptedPatient {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"name\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"phone\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"email\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"address\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"tagged\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"visitTodos\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cJsonAdaptedVisitTodo\u003e visitTodos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @JsonProperty(\"visits\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cJsonAdaptedVisit\u003e visits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code JsonAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedPatient(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"visitTodos\") List\u003cJsonAdaptedVisitTodo\u003e visitTodos,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                             @JsonProperty(\"visits\") List\u003cJsonAdaptedVisit\u003e visits) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitTodos !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.visitTodos.addAll(visitTodos);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visits !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.visits.addAll(visits);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a given {@code Patient} into this class for Jackson use."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTodos.addAll(source.getVisitTodos().stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(JsonAdaptedVisitTodo::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visits.addAll(source.getVisits().stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(JsonAdaptedVisit::new)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Patient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final List\u003cTag\u003e patientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            patientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(patientTags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final List\u003cVisitTodo\u003e visitTodoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (JsonAdaptedVisitTodo visitTodo : visitTodos) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visitTodoList.add(visitTodo.toModelType());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final Collection\u003cVisitTodo\u003e modelVisitTodos \u003d new LinkedHashSet\u003cVisitTodo\u003e(visitTodoList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final List\u003cVisit\u003e modelVisits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient result \u003d new Patient(modelName, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                modelTags, modelVisitTodos, modelVisits);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (JsonAdaptedVisit visit : visits) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            result.addVisit(visit.toModelType(result));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 9,
      "crazoter": 62,
      "-": 82
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 1,
      "crazoter": 3,
      "-": 44
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/JsonAdaptedVisit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Jackson-friendly version of {@link Visit}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class JsonAdaptedVisit {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Visit\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String END_DATE_EARLIER_THAN_START_DATE \u003d \"Visit\u0027s start date is earlier \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"than its end date\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final String startDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final String endDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code JsonAdaptedVisit} with the given visit details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisit(@JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            @JsonProperty(\"startDateTime\") String startDateTime,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            @JsonProperty(\"endDateTime\") String endDateTime,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            @JsonProperty(\"visitTasks\") List\u003cJsonAdaptedVisitTask\u003e visitTasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitTasks !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.visitTasks.addAll(visitTasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a given {@code Visit} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisit(Visit source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        remark \u003d source.getRemark().remark;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        startDateTime \u003d source.getStartDateTime().toJacksonJsonString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cEndDateTime\u003e endDateTime \u003d source.getEndDateTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (endDateTime.isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.endDateTime \u003d endDateTime.get().toJacksonJsonString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.endDateTime \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTasks.addAll(source.getVisitTasks().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(JsonAdaptedVisitTask::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts this Jackson-friendly adapted visit object into the model\u0027s {@code Visit} object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * with a reference to its patient object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Because this patient object is not saved together with the Visit, it is only passed in when the visit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * object needs to be converted to its model type."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted visit."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Visit toModelType(Patient patient) throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final List\u003cVisitTask\u003e modelVisitTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (JsonAdaptedVisitTask visitTask : visitTasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            modelVisitTasks.add(visitTask.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    StartDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!StartDateTime.isValidStartDateTime(startDateTime)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(StartDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final StartDateTime modelStartDateTime \u003d new StartDateTime(startDateTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final EndDateTime modelEndDateTime;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            modelEndDateTime \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (!EndDateTime.isValidDateTime(endDateTime)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new IllegalValueException(EndDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //Other constraints e.g. EndDateTime cannot be earlier than startDateTime"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (!EndDateTime.isValidEndDateTime(startDateTime, endDateTime)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new IllegalValueException(END_DATE_EARLIER_THAN_START_DATE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            modelEndDateTime \u003d new EndDateTime(endDateTime);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new Visit(modelRemark, modelStartDateTime, modelEndDateTime, modelVisitTasks, patient);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 1,
      "sandydays": 2,
      "crazoter": 108
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/JsonAdaptedVisitTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.Detail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Jackson-friendly version of {@link VisitTask}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class JsonAdaptedVisitTask {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"VisitTask\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final JsonAdaptedVisitTodo visitTodo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final String detail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code JsonAdaptedVisitTask} with the given visit detail."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisitTask(@JsonProperty(\"visitTodo\") JsonAdaptedVisitTodo visitTodo,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    @JsonProperty(\"detail\") String detail,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    @JsonProperty(\"isDone\") Boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visitTodo \u003d visitTodo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a given {@code VisitTask} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisitTask(VisitTask source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTodo \u003d new JsonAdaptedVisitTodo(source.getVisitTodo());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        detail \u003d source.getDetail().detail;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        isDone \u003d source.isDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts this Jackson-friendly adapted visit object into the model\u0027s {@code VisitTask} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted visit."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitTask toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visitTodo \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    VisitTodo.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final VisitTodo modelVisitTodo \u003d visitTodo.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (detail \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    Detail.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!Detail.isValidDetail(detail)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(Detail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final Detail modelDetail \u003d new Detail(detail);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (isDone \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"IsDone\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new VisitTask(modelVisitTodo, modelDetail, isDone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 1,
      "crazoter": 70
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/JsonAdaptedVisitTodo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Jackson-friendly version of {@link VisitTodo}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class JsonAdaptedVisitTodo {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code JsonAdaptedVisitTodo} with the given {@code description}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisitTodo(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a given {@code VisitTodo} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonAdaptedVisitTodo(VisitTodo source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        description \u003d source.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getVisitTodoDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code VisitTodo} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitTodo toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!VisitTodo.isValidVisitTodoDescription(description)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new IllegalValueException(VisitTodo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new VisitTodo(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 1,
      "crazoter": 47
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/JsonPatientBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A class to access PatientBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class JsonPatientBookStorage implements PatientBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPatientBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonPatientBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cReadOnlyPatientBook\u003e readPatientBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return readPatientBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Similar to {@link #readPatientBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cReadOnlyPatientBook\u003e readPatientBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Optional\u003cJsonSerializablePatientBook\u003e jsonPatientBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                filePath, JsonSerializablePatientBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!jsonPatientBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return Optional.of(jsonPatientBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void savePatientBook(ReadOnlyPatientBook patientBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        savePatientBook(patientBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Similar to {@link #savePatientBook(ReadOnlyPatientBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void savePatientBook(ReadOnlyPatientBook patientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(patientBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePatientBook(patientBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 80
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/JsonSerializableAppointmentBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.AppointmentBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * An Immutable AppointmentBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "@JsonRootName(value \u003d \"appointmentbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class JsonSerializableAppointmentBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"Appointments list contains duplicate appointment(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code JsonSerializablePatientBook} with the given patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public JsonSerializableAppointmentBook("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.appointments.addAll(appointments);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Converts a given {@code ReadOnlyAppointmentBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAppointmentBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public JsonSerializableAppointmentBook(ReadOnlyAppointmentBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        appointments.addAll(source.getAppointmentList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .map(JsonAdaptedAppointment::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Converts this appointment book into the model\u0027s {@code AppointmentBook} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public AppointmentBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        AppointmentBook appointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        for (int i \u003d 0; i \u003c appointments.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            JsonAdaptedAppointment jsonAdaptedAppointment \u003d appointments.get(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (appointmentBook.hasAppointment(appointment)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            appointmentBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return appointmentBook;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 58,
      "crazoter": 6
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/JsonSerializablePatientBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * An Immutable PatientBook that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@JsonRootName(value \u003d \"patientBook\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class JsonSerializablePatientBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final int ongoingVisitPatientIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final int ongoingVisitIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Constructs a {@code JsonSerializablePatientBook} with the given patients."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonSerializablePatientBook("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            @JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            @JsonProperty(\"ongoingVisitPatientIndex\") Integer ongoingVisitPatientIndex,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            @JsonProperty(\"ongoingVisitIndex\") Integer ongoingVisitIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patients.addAll(patients);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Integer resultingPatientIndex \u003d ongoingVisitPatientIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Integer resultingVisitIndex \u003d ongoingVisitIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (ongoingVisitPatientIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            resultingPatientIndex \u003d -1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (ongoingVisitIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            resultingVisitIndex \u003d -1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.ongoingVisitPatientIndex \u003d resultingPatientIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.ongoingVisitIndex \u003d resultingVisitIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts a given {@code ReadOnlyPatientBook} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePatientBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public JsonSerializablePatientBook(ReadOnlyPatientBook source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Pair\u003cInteger, Integer\u003e indexPairOfCurrentPatientAndVisit \u003d source.getIndexPairOfOngoingPatientAndVisit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.ongoingVisitPatientIndex \u003d indexPairOfCurrentPatientAndVisit.getKey();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.ongoingVisitIndex \u003d indexPairOfCurrentPatientAndVisit.getValue();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Converts this patient book into the model\u0027s {@code PatientBook} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook patientBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            JsonAdaptedPatient jsonAdaptedPatient \u003d patients.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (patientBook.hasPatient(patient)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            patientBook.addPatient(patient);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (ongoingVisitPatientIndex \u003d\u003d i) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Optional\u003cVisit\u003e optionalVisit \u003d patient.getVisitByIndex(ongoingVisitIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                optionalVisit.ifPresent(patientBook::setOngoingVisit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patientBook;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 85
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/PatientBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a storage for {@link PatientBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public interface PatientBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Path getPatientBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns PatientBook data as a {@link ReadOnlyPatientBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Optional\u003cReadOnlyPatientBook\u003e readPatientBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @see #getPatientBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Optional\u003cReadOnlyPatientBook\u003e readPatientBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Saves the given {@link ReadOnlyPatientBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param patientBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void savePatientBook(ReadOnlyPatientBook patientBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @see #savePatientBook(ReadOnlyPatientBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void savePatientBook(ReadOnlyPatientBook patientBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 46
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public interface Storage extends PatientBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Path getPatientBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    Optional\u003cReadOnlyPatientBook\u003e readPatientBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    void savePatientBook(ReadOnlyPatientBook patientBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 32
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Manages storage of PatientBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private PatientBookStorage patientBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public StorageManager(PatientBookStorage patientBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patientBookStorage \u003d patientBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patientBookStorage.getPatientBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cReadOnlyPatientBook\u003e readPatientBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return readPatientBook(patientBookStorage.getPatientBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Optional\u003cReadOnlyPatientBook\u003e readPatientBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patientBookStorage.readPatientBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void savePatientBook(ReadOnlyPatientBook patientBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        savePatientBook(patientBook, patientBookStorage.getPatientBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void savePatientBook(ReadOnlyPatientBook patientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientBookStorage.savePatientBook(patientBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/AppointmentCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * A UI component that displays information of an {@code Appointment}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class AppointmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private static final String FXML \u003d \"AppointmentListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/patientBook-level4/issues/336\"\u003eThe issue on PatientBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public final Appointment appointment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Label startDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Label endDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Label patientName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Label patientPhone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Label patientEmail;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Label patientAddress;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private FlowPane recurDateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Label frequency;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Display UI for an appointment, taking into account its displayed index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public AppointmentCard(Appointment appointment, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        startDateTime.setText(appointment.getStartDateTime().toJacksonJsonString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        endDateTime.setText(appointment.getEndDateTime().toJacksonJsonString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        patientName.setText(appointment.getPatient().getName().fullName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        patientPhone.setText(appointment.getPatient().getPhone().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        patientAddress.setText(appointment.getPatient().getAddress().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        patientEmail.setText(appointment.getPatient().getEmail().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (appointment.getFrequency().isRecurringFrequency()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            recurDateTime.getChildren().add(new Label(\"recurring\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            frequency.setText(appointment.getFrequency().toJacksonJsonString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (!(other instanceof AppointmentCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        AppointmentCard card \u003d (AppointmentCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u0026\u0026 appointment.equals(card.appointment);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 83,
      "crazoter": 3
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/AppointmentListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Panel containing the list of appointments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class AppointmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private static final String FXML \u003d \"AppointmentListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private ListView\u003cAppointment\u003e appointmentListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public AppointmentListPanel(FilteredList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        appointmentListView.setItems(appointmentList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        appointmentListView.setPlaceholder(new Label(\"No appointments found.\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Appointment} using a {@code AppointmentCard}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        protected void updateItem(Appointment appointment, boolean empty) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            super.updateItem(appointment, empty);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (empty || appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                //Modify index such that the displayed index is the source index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                FilteredList\u003cAppointment\u003e appointmentList \u003d (FilteredList\u003cAppointment\u003e) appointmentListView.getItems();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                int index \u003d appointmentList.getSourceIndex(appointmentList.indexOf(appointment));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                setGraphic(new AppointmentCard(appointment, index + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 45,
      "crazoter": 2
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/AutoCompleteCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": " * An UI component that displays information of a {@code AutoCompleteWord}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class AutoCompleteCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private static final String FXML \u003d \"AutoCompleteListCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/patientBook-level4/issues/336\"\u003eThe issue on PatientBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public final String wordShown;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private Label suggestedWord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public AutoCompleteCard(String wordShown) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.wordShown \u003d wordShown;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "        suggestedWord.setText(wordShown);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (!(other instanceof AutoCompleteCard)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "francislow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "francislow"
        },
        "content": "        AutoCompleteCard card \u003d (AutoCompleteCard) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return wordShown.equals(card.wordShown);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "francislow": 47
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/AutoCompletePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.autocomplete.AutoCompleteListHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.autocomplete.AutoCompleteWord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.autocomplete.AutoCompleteWordStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.autocomplete.MatchedWordUpdater;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.autocomplete.UserinputParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": " * Panel containing the list of suggested words cards."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "public class AutoCompletePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private static final String FXML \u003d \"AutoCompletePanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private int selectedIndex \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private AutoCompleteListHandler autoCompleteListHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private MatchedWordUpdater matchedWordUpdater;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private ListView\u003cAutoCompleteWord\u003e autoCompleteWordListView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public AutoCompletePanel(FilteredList\u003cPatient\u003e patList, FilteredList\u003cAppointment\u003e apptList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": "        AutoCompleteWordStorage autoCompleteWordStorage \u003d new AutoCompleteWordStorage(patList, apptList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompleteListHandler \u003d new AutoCompleteListHandler(autoCompleteWordStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "        matchedWordUpdater \u003d new MatchedWordUpdater(autoCompleteWordStorage, autoCompleteListHandler);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Initialise list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": "        updateListView(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code AutoCompleteWord} using a {@code AutoCompleteCard}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "francislow"
        },
        "content": "    class AutoCompleteListViewCell extends ListCell\u003cAutoCompleteWord\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "francislow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "francislow"
        },
        "content": "        protected void updateItem(AutoCompleteWord autoCompleteWord, boolean empty) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "francislow"
        },
        "content": "            super.updateItem(autoCompleteWord, empty);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "francislow"
        },
        "content": "            if (empty || autoCompleteWord \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "francislow"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "francislow"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "francislow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "francislow"
        },
        "content": "                setGraphic(new AutoCompleteCard(autoCompleteWord.getSuggestedWord()).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public AutoCompleteWord getSelected() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return autoCompleteWordListView.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void setSelected(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "francislow"
        },
        "content": "        if (index \u003e getTotalItems() - 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "francislow"
        },
        "content": "            index \u003d getTotalItems() - 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "francislow"
        },
        "content": "        } else if (index \u003c 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "francislow"
        },
        "content": "            index \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "francislow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.selectedIndex \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompleteWordListView.getSelectionModel().select(selectedIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompleteWordListView.scrollTo(selectedIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public int getSelectedIndex() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return selectedIndex;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public int getTotalItems() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return autoCompleteWordListView.getItems().size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Change current list if needed and update suggested words in current list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @param currentPhraseInCommandBox current String in command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void updateListView(String currentPhraseInCommandBox) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "francislow"
        },
        "content": "        String[] segments \u003d UserinputParserUtil.splitIntoSegments(currentPhraseInCommandBox);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "francislow"
        },
        "content": "        LinkedList\u003cString\u003e firstSegmentParts \u003d UserinputParserUtil.parseFirstSegment(segments[0]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Check and update matched words"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "francislow"
        },
        "content": "        matchedWordUpdater.updateMatchedWords(segments, firstSegmentParts);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Choose initial list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "francislow"
        },
        "content": "        ObservableList\u003cAutoCompleteWord\u003e chosenList \u003d autoCompleteListHandler"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .chooseInitialList(matchedWordUpdater.getMatchedAutoCompleteWords());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Filter list based on previous matched words"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "francislow"
        },
        "content": "        ObservableList\u003cAutoCompleteWord\u003e filteredList \u003d autoCompleteListHandler"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .filterList(matchedWordUpdater.getMatchedAutoCompleteWords(), chosenList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "francislow"
        },
        "content": "        // Update list based on userinput"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "francislow"
        },
        "content": "        ObservableList\u003cAutoCompleteWord\u003e updatedList \u003d autoCompleteListHandler"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "francislow"
        },
        "content": "                .updateList(matchedWordUpdater.getMatchedAutoCompleteWords(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        filteredList, segments, firstSegmentParts);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompleteWordListView.setItems(updatedList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompleteWordListView.setCellFactory(listView -\u003e new AutoCompleteListViewCell());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * @return string representation of all the matched words plus current selected word"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public String getStringAfterSelection() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "francislow"
        },
        "content": "        return matchedWordUpdater.getCombinedMatchedWords() + getSelected().getSuggestedWord();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 4,
      "francislow": 111
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private final AutoCompletePanel autoCompletePanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, AutoCompletePanel autoCompletePanel) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "        this.autoCompletePanel \u003d autoCompletePanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void setOnButtonPressedListener() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "francislow"
        },
        "content": "        commandTextField.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "francislow"
        },
        "content": "            switch (event.getCode()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "francislow"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "francislow"
        },
        "content": "                autoCompletePanel.setSelected(autoCompletePanel.getSelectedIndex() - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "francislow"
        },
        "content": "                commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "francislow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "francislow"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "francislow"
        },
        "content": "                autoCompletePanel.setSelected(autoCompletePanel.getSelectedIndex() + 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "francislow"
        },
        "content": "                commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "francislow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "francislow"
        },
        "content": "            case RIGHT:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "francislow"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    commandTextField.setText(autoCompletePanel.getStringAfterSelection());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    autoCompletePanel.updateListView(autoCompletePanel.getStringAfterSelection());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "francislow"
        },
        "content": "                } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "francislow"
        },
        "content": "                    logger.info(\"Nothing is selected thus right key does not work\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "francislow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "francislow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "francislow"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "francislow"
        },
        "content": "                autoCompletePanel.updateListView(commandTextField.getText() + event.getText());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "francislow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "francislow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 6,
      "francislow": 34,
      "-": 69
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/DataPanelsTabPaneManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Manages the TabPane and adds programmatic controls to it"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DataPanelsTabPaneManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final TabPane tabPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Tab patientTabPage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final Tab ongoingVisitTabPage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private final Tab appointmentTabPage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DataPanelsTabPaneManager(TabPane pane, Tab patientTabPage, Tab ongoingVisitTabPage, Tab appointmentTabPage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(pane, patientTabPage, ongoingVisitTabPage, appointmentTabPage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        tabPane \u003d pane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patientTabPage \u003d patientTabPage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.ongoingVisitTabPage \u003d ongoingVisitTabPage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.appointmentTabPage \u003d appointmentTabPage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Change the current tab to patient tab."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void changeToPatientTab() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        selectionModel.select(patientTabPage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Change the current tab to ongoing visit tab."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void changeToOngoingVisitTab() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        selectionModel.select(ongoingVisitTabPage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Change the current tab to ongoing visit tab."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void changeToAppointmentTab() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        selectionModel.select(appointmentTabPage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 11,
      "crazoter": 37
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/FinishedVisitCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * An UI component that displays information of a {@code Visit}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class FinishedVisitCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String FXML \u003d \"FinishedVisitCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/patientBook-level4/issues/336\"\u003eThe issue on PatientBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public final Visit visit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label startDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label endDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private StackPane visitTasksPlaceholder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public FinishedVisitCard(Visit visit, int visitIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visit \u003d visit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //There\u0027s substantial overlap with this code here and OngoingVisitCard"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //But it is not combined as I do not want the designs to be intertwined"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //e.g. inclusion of index for example"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        index.setText(Integer.toString(visitIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        startDateTime.setText(visit.getStartDateTime().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visit.getEndDateTime().isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            endDateTime.setText(visit.getEndDateTime().get().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            endDateTime.setText(\"Unfinished (Ongoing Visit)\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String remarks \u003d this.visit.getRemark().remark;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (remarks.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            remarks \u003d \"This visit has no remarks.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        remark.setText(remarks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTaskTableView visitTaskTableView \u003d new VisitTaskTableView(this.visit.getVisitTasks());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTasksPlaceholder.getChildren().add(visitTaskTableView.getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof FinishedVisitCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        FinishedVisitCard card \u003d (FinishedVisitCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visit.equals(card.visit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 81
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103-f10-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/HistoryPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.model.HistoryRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Panel showing the application command history list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class HistoryPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static final String FXML \u003d \"HistoryPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private ListView\u003cHistoryRecord\u003e historyView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public HistoryPanel(ObservableList\u003cHistoryRecord\u003e historyRecordList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyView.setItems(historyRecordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyView.setCellFactory(listView -\u003e new HistoryRecordViewCell());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyView.setPlaceholder(new Label(\"No commands in the history.\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code HistoryRecord} using a {@code HistoryRecordCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    class HistoryRecordViewCell extends ListCell\u003cHistoryRecord\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        protected void updateItem(HistoryRecord record, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            super.updateItem(record, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (empty || record \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                Index index \u003d Index.fromZeroBased(historyView.getItems().indexOf(record));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                setGraphic(new HistoryRecordCard(record, index).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 46
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/HistoryRecordCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.model.HistoryRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * An UI component that displays information of a {@code HistoryRecord}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class HistoryRecordCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static final String FXML \u003d \"HistoryRecordCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public final HistoryRecord historyRecord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Label commandText;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public HistoryRecordCard(HistoryRecord record, Index index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.historyRecord \u003d record;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Optional\u003cString\u003e commandTextOptional \u003d record.getCommand().getCommandText();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (commandTextOptional.isPresent()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            commandText.setText(String.format(\"%d. %s\", index.getOneBased(), commandTextOptional.get()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            // This should not happen, but defensively display the debug string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            commandText.setText(String.format(\"%d. %s\", index.getOneBased(), record.toString()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (!(other instanceof HistoryRecordCard)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryRecordCard card \u003d (HistoryRecordCard) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return historyRecord.equals(card.historyRecord);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 52
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private PatientListPanel patientListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private AppointmentListPanel appointmentListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private OngoingVisitListPanel ongoingVisitListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private AutoCompletePanel autoCompletePanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private DataPanelsTabPaneManager dataPanelsTabPaneManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private HistoryPanel historyPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private StackPane patientListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private StackPane autoCompletePanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TabPane dataPanelsTabPane;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Tab patientTabPage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Tab ongoingVisitTabPage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Tab appointmentTabPage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private StackPane appointmentListPanelPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private StackPane ongoingVisitPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private StackPane historyPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "francislow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitListPanel \u003d new OngoingVisitListPanel(logic.getObservableOngoingVisitList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitPanelPlaceholder.getChildren().add(ongoingVisitListPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPatientBookFilePath());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompletePanel \u003d new AutoCompletePanel(logic.getFilteredPatientList(), logic.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "francislow"
        },
        "content": "        autoCompletePanelPlaceholder.getChildren().add(autoCompletePanel.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "francislow"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, autoCompletePanel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        dataPanelsTabPaneManager \u003d new DataPanelsTabPaneManager(dataPanelsTabPane,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                patientTabPage,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                ongoingVisitTabPage,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                appointmentTabPage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyPanel \u003d new HistoryPanel(logic.getObservableHistoryList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyPanelPlaceholder.getChildren().add(historyPanel.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientListPanel getPatientListPanel() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patientListPanel;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public OngoingVisitListPanel getOngoingVisitListPanel() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ongoingVisitListPanel;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public AppointmentListPanel getAppointmentListPanel() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return appointmentListPanel;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AutoCompletePanel getAutoCompletePanel() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return autoCompletePanel;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DataPanelsTabPaneManager getDataPanelsTabPaneManager() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return dataPanelsTabPaneManager;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public HistoryPanel getHistoryPanel() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return historyPanel;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "francislow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "francislow"
        },
        "content": "     * Set listeners for all individual components in main window"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "francislow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void setAllListeners() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "francislow"
        },
        "content": "        commandBox.setOnButtonPressedListener();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 8,
      "sandydays": 13,
      "crazoter": 45,
      "francislow": 16,
      "-": 175
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/OngoingVisitCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * An UI component that displays information of a {@code Visit}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class OngoingVisitCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String FXML \u003d \"OngoingVisitListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/patientBook-level4/issues/336\"\u003eThe issue on PatientBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public final Visit visit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label startDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label endDateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private StackPane visitTasksPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public OngoingVisitCard(Visit visit) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visit \u003d visit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patient \u003d this.visit.getPatient();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        name.setText(patient.getName().fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        phone.setText(patient.getPhone().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        address.setText(patient.getAddress().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        email.setText(patient.getEmail().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patient.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        startDateTime.setText(visit.getStartDateTime().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (visit.getEndDateTime().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            endDateTime.setText(visit.getEndDateTime().get().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            endDateTime.setText(\"Unfinished (Ongoing Visit)\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String remarks \u003d this.visit.getRemark().remark;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (remarks.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            remarks \u003d \"This visit has no remarks.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        remark.setText(remarks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTaskTableView visitTaskTableView \u003d new VisitTaskTableView(this.visit.getVisitTasks());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTasksPlaceholder.getChildren().add(visitTaskTableView.getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof OngoingVisitCard)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        OngoingVisitCard card \u003d (OngoingVisitCard) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visit.equals(card.visit);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 100
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/OngoingVisitListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Panel containing the list of ongoing visits (current maximum is 1)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class OngoingVisitListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String FXML \u003d \"OngoingVisitListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private ListView\u003cVisit\u003e ongoingVisitListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public OngoingVisitListPanel(ObservableList\u003cVisit\u003e visitList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitListView.setItems(visitList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitListView.setCellFactory(listView -\u003e new VisitListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitListView.setPlaceholder(new Label(\"There is no ongoing visit.\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Prevent user from selecting any rows which can mess up the CSS"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ongoingVisitListView.setSelectionModel(null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Visit} using a {@code VisitCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    class VisitListViewCell extends ListCell\u003cVisit\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        protected void updateItem(Visit visit, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            super.updateItem(visit, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (empty || visit \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setGraphic(new OngoingVisitCard(visit).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 46
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/PatientCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.TitledPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * An UI component that displays information of a {@code Patient}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class PatientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String FXML \u003d \"PatientListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/patientBook-level4/issues/336\"\u003eThe issue on PatientBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label noVisitTodosLabel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label noVisitsLabel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private VBox visitTodos;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private VBox visits;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TitledPane visitTodosTitledPane;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TitledPane visitsTitledPane;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Display UI for a patient, taking into account their displayed index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientCard(Patient patient, int displayedIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        name.setText(patient.getName().fullName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        phone.setText(patient.getPhone().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        address.setText(patient.getAddress().value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        email.setText(patient.getEmail().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patient.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // TODO: Make this more beautiful or extend list/find with a prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // that optionally shows these fields"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int visitTodoIndex \u003d 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!patient.getVisitTodos().isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            noVisitTodosLabel.setVisible(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (VisitTodo visitTodo : patient.getVisitTodos()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTodos.getChildren().add("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        new Label(visitTodoIndex + \". \" + visitTodo.getDescription()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTodoIndex++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Keep panes closed by default"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTodosTitledPane.setExpanded(false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitsTitledPane.setExpanded(false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        int visitIndex \u003d 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!patient.getVisits().isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            noVisitsLabel.setVisible(false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (Visit visit : patient.getVisits()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                FinishedVisitCard finishedVisitCard \u003d new FinishedVisitCard(visit, visitIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visits.getChildren().add(finishedVisitCard.getRoot());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitIndex++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof PatientCard)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientCard card \u003d (PatientCard) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 60,
      "-": 57
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/PatientListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Panel containing the list of patients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class PatientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String FXML \u003d \"PatientListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private ListView\u003cPatient\u003e patientListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientListPanel(FilteredList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientListView.setItems(patientList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientListView.setPlaceholder(new Label(\"No patients found.\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Prevent user from selecting any rows which can mess up the CSS"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientListView.setSelectionModel(null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    class PatientListViewCell extends ListCell\u003cPatient\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        protected void updateItem(Patient patient, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            super.updateItem(patient, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (empty || patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Modify index such that the displayed index is the source index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                FilteredList\u003cPatient\u003e patientList \u003d (FilteredList\u003cPatient\u003e) patientListView.getItems();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                int index \u003d patientList.getSourceIndex(patientList.indexOf(patient));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                setGraphic(new PatientCard(patient, index + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 49
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/nurse_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": "            // Main window listener"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "francislow"
        },
        "content": "            mainWindow.setAllListeners();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/CommNurseTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 7,
      "francislow": 2,
      "-": 79
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/cs/f10/t1/nursetraverse/ui/VisitTaskTableView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Control;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * An UI component that displays information of a table of {@code VisitTasks}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitTaskTableView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String FXML \u003d \"VisitTaskTableView.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final List\u003cVisitTask\u003e visitTaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TableView\u003cVisitTask\u003e visitTasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TableColumn\u003cVisitTask, String\u003e indexColumn;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TableColumn\u003cVisitTask, String\u003e descriptionColumn;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TableColumn\u003cVisitTask, String\u003e detailColumn;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TableColumn\u003cVisitTask, String\u003e finishedColumn;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Display UI for a patient, taking into account their displayed index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public VisitTaskTableView(List\u003cVisitTask\u003e visitTaskList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visitTaskList \u003d visitTaskList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Setup visit task display columns and rows"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Setup the auto-incrementing index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        indexColumn.setCellFactory(col -\u003e new TableCell\u003c\u003e() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            public void updateIndex(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                super.updateIndex(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (isEmpty() || index \u003c 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    setText(Integer.toString(index + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Setup the other columns"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setupWordWrappedTableColumnCellFactory(descriptionColumn);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptionColumn.setCellValueFactory(cellData -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new SimpleStringProperty(cellData.getValue().getVisitTodo().getDescription()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setupWordWrappedTableColumnCellFactory(detailColumn);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        detailColumn.setCellValueFactory(cellData -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new SimpleStringProperty(cellData.getValue().getDetail().toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        finishedColumn.setCellValueFactory(cellData -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new SimpleStringProperty(cellData.getValue().getIsDoneAsString()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Setup placeholder \u0026 data"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTasks.setPlaceholder((new Label(\"This visit has no assigned tasks.\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTaskList.forEach(visitTask -\u003e visitTasks.getItems().add(visitTask));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Helper class to setup a word wrapped table column cell factory."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void setupWordWrappedTableColumnCellFactory(final TableColumn\u003cVisitTask, String\u003e column) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        column.setCellFactory(tableCell -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            TableCell\u003cVisitTask, String\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Text text \u003d new Text();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            cell.setGraphic(text);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            cell.setPrefHeight(Control.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            text.wrappingWidthProperty().bind(column.widthProperty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            text.textProperty().bind(cell.itemProperty());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return cell;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (!(other instanceof VisitTaskTableView)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTaskTableView card \u003d (VisitTaskTableView) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return CollectionUtil.checkEqual(visitTaskList, card.visitTaskList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 105
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u003cLabel fx:id\u003d\"patientName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"recurDateTime\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003cLabel fx:id\u003d\"startDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDateTime\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003cLabel fx:id\u003d\"endDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDateTime\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003cLabel fx:id\u003d\"frequency\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$frequency\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003cLabel fx:id\u003d\"patientPhone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003cLabel fx:id\u003d\"patientEmail\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003cLabel fx:id\u003d\"patientAddress\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sandydays": 39
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sandydays": 9
    }
  },
  {
    "path": "src/main/resources/view/AutoCompleteListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"15\" maxHeight\u003d\"15\" prefHeight\u003d\"15\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "        \u003cLabel fx:id\u003d\"suggestedWord\" text\u003d\"\\$first\" styleClass\u003d\"cell_smallest_label\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "francislow": 24
    }
  },
  {
    "path": "src/main/resources/view/AutoCompletePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "  \u003cListView fx:id\u003d\"autoCompleteWordListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "francislow": 8
    }
  },
  {
    "path": "src/main/resources/view/CommNurseTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": ".cell_smallest_label {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".list-cell:filled:even, .tab-cell:filled:even {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-color: #DEF2F1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".list-cell:filled:odd, .tab-cell:filled:odd {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-color: #FEFEFE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".table-row-cell:filled:selected {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-color: #75a2c7;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-color: #75a2c7;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".visit-card {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-border-style: solid none solid none;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-border-color: lightgrey;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-padding: 0 0 5px 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".hint {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-text-fill: grey;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ".bold {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-color: #61bfba;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 58,
      "francislow": 5
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-background: #FFFFFF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    -fx-text-fill: darkGray;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/resources/view/FinishedVisitCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" styleClass\u003d\"visit-card\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10\" prefWidth\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cVBox GridPane.hgrow\u003d\"ALWAYS\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel styleClass\u003d\"bold\"\u003eVisit Index: \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"index\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$index\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel styleClass\u003d\"bold\"\u003eVisit Start Date and Time: \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"startDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDateTime\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel styleClass\u003d\"bold\"\u003eVisit End Date and Time: \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"endDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDateTime\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel styleClass\u003d\"bold\"\u003eVisit Remarks: \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remarks\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cVBox GridPane.hgrow\u003d\"ALWAYS\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel styleClass\u003d\"bold\"\u003eVisit Tasks: \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cStackPane fx:id\u003d\"visitTasksPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 44
    }
  },
  {
    "path": "src/main/resources/view/HistoryPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    \u003cListView fx:id\u003d\"historyView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/HistoryRecordCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"15\" maxHeight\u003d\"15\" prefHeight\u003d\"15\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \u003cLabel fx:id\u003d\"commandText\" text\u003d\"\\$first\" styleClass\u003d\"cell_smallest_label\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         title\u003d\"NurseTraverse\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cImage url\u003d\"@/images/nurse_32.png\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cURL value\u003d\"@CommNurseTheme.css\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "            \u003c!--Menu bar--\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        \u003cHBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": "                            \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                \u003c!--Command Box--\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                \u003cStackPane HBox.hgrow\u003d\"ALWAYS\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                           minHeight\u003d\"40\" prefHeight\u003d\"40\" maxHeight\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                        \u003cInsets top\u003d\"10\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                \u003c!--Result Displayer--\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                           minHeight\u003d\"80\" prefHeight\u003d\"80\" maxHeight\u003d\"80\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "francislow"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "francislow"
        },
        "content": "                            \u003c!--Auto Complete Panel--\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "francislow"
        },
        "content": "                            \u003cVBox fx:id\u003d\"autoCompletePanel\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"200\" prefWidth\u003d\"200\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                  minHeight\u003d\"125\" prefHeight\u003d\"125\" maxHeight\u003d\"125\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"autoCompletePanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "francislow"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "francislow"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        \u003cTabPane fx:id\u003d\"dataPanelsTabPane\" styleClass\u003d\"pane-with-border\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            \u003ctabs\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \u003cTab fx:id\u003d\"patientTabPage\" text\u003d\"Patients\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    \u003c!--List Of Patient Cards--\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    \u003cVBox fx:id\u003d\"patientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "francislow"
        },
        "content": "                                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                        \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \u003cTab fx:id\u003d\"ongoingVisitTabPage\" text\u003d\"Current Visit\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    \u003c!--Current Visit--\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    \u003cVBox fx:id\u003d\"ongoingVisitList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                        \u003cStackPane fx:id\u003d\"ongoingVisitPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                \u003cTab fx:id\u003d\"appointmentTabPage\" text\u003d\"Appointments\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    \u003c!--List Of Patient Cards--\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                    \u003cVBox fx:id\u003d\"appointmentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                        \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            \u003c/tabs\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    \u003c!--History Panel--\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    \u003cVBox fx:id\u003d\"historyPanel\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"200\" prefWidth\u003d\"200\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                          minHeight\u003d\"125\" prefHeight\u003d\"125\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"historyPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003c!--Status Bar--\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 12,
      "sandydays": 9,
      "crazoter": 28,
      "francislow": 22,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/OngoingVisitListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10\" prefWidth\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cVBox GridPane.hgrow\u003d\"ALWAYS\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel styleClass\u003d\"bold\"\u003ePatient Details: \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel styleClass\u003d\"bold\"\u003eVisit Start Date and Time: \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"startDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDateTime\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel styleClass\u003d\"bold\"\u003eVisit End Date and Time: \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"endDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDateTime\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel styleClass\u003d\"bold\"\u003eVisit Remarks: \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remarks\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cVBox GridPane.hgrow\u003d\"ALWAYS\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel styleClass\u003d\"bold\"\u003eVisit Tasks: \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cStackPane fx:id\u003d\"visitTasksPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_small_label, hint\" prefWidth\u003d\"300\" wrapText\u003d\"true\"\u003eNote: Updating the patient\u0027s Visit Todos will not modify this list of Visit Tasks. If you want to modify this list, cancel the visit with \"visit-cancel\" first.\u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 49
    }
  },
  {
    "path": "src/main/resources/view/OngoingVisitListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cListView fx:id\u003d\"ongoingVisitListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 8
    }
  },
  {
    "path": "src/main/resources/view/PatientListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "      \u003cTitledPane fx:id\u003d\"visitTodosTitledPane\" text\u003d\"Visit Todos\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "          \u003cVBox fx:id\u003d\"visitTodos\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "          \u003cLabel fx:id\u003d\"noVisitTodosLabel\" styleClass\u003d\"cell_small_label\" text\u003d\"This patient has no visit todos.\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "      \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "      \u003cTitledPane fx:id\u003d\"visitsTitledPane\" text\u003d\"Visits\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "          \u003cVBox fx:id\u003d\"visits\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "          \u003cLabel fx:id\u003d\"noVisitsLabel\" styleClass\u003d\"cell_small_label\" text\u003d\"This patient has no visits.\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "      \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 13,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/PatientListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "  \u003cListView fx:id\u003d\"patientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/VisitTaskTableView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cTableView styleClass\u003d\"hide_scrollbar\" fx:id\u003d\"visitTasks\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003ccolumnResizePolicy\u003e\u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\"/\u003e\u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003ccolumns\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cTableColumn fx:id\u003d\"indexColumn\" text\u003d\"Index\" sortable\u003d\"false\" minWidth\u003d\"50\" maxWidth\u003d\"50\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cTableColumn fx:id\u003d\"descriptionColumn\" text\u003d\"Description\" sortable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cTableColumn fx:id\u003d\"detailColumn\" text\u003d\"Details\" sortable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cTableColumn fx:id\u003d\"finishedColumn\" text\u003d\"Finished\" sortable\u003d\"false\" minWidth\u003d\"75\" maxWidth\u003d\"75\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003c/columns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c/TableView\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 11
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/autocomplete/CommandWordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": "class CommandWordTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private CommandWord testCommandWord \u003d new CommandWord(\"test1\", \"test2\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "            true, true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void getSuggestedWord() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(\"test2\", testCommandWord.getSuggestedWord());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void getAssociatedWordList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(1, testCommandWord.getAssociatedWordList().size());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(\"test1\", testCommandWord.getAssociatedWordList().get(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void hasIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertTrue(testCommandWord.hasIndex());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void hasPrefix() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertTrue(testCommandWord.hasPrefix());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "francislow": 32
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/autocomplete/PrefixWordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "class PrefixWordTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "    private PrefixWord testPrefixWord \u003d new PrefixWord("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": "            \"test1\", \"test2\", \"test3\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void getSuggestedWord() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(\"test3\", testPrefixWord.getSuggestedWord());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void getAssociatedWordList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(2, testPrefixWord.getAssociatedWordList().size());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(\"test1\", testPrefixWord.getAssociatedWordList().get(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(\"test2\", testPrefixWord.getAssociatedWordList().get(1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "francislow": 23
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/autocomplete/UserinputParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "francislow"
        },
        "content": "package cs.f10.t1.nursetraverse.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "francislow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "francislow"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "francislow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "francislow"
        },
        "content": "class UserinputParserUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void splitIntoSegments() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "francislow"
        },
        "content": "        String testString \u003d \"pat-delete 1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "francislow"
        },
        "content": "        String[] segments \u003d UserinputParserUtil.splitIntoSegments(testString);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(\"pat-delete\", segments[0]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(\"1\", segments[1]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void splitIntoSegments_emptyString_emptyArray() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "francislow"
        },
        "content": "        String testString \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "francislow"
        },
        "content": "        String[] segments \u003d UserinputParserUtil.splitIntoSegments(testString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(1, segments.length);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(\"\", segments[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void parseFirstSegment() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "francislow"
        },
        "content": "        String testFirstSegment \u003d \"pat-delete\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "francislow"
        },
        "content": "        LinkedList\u003cString\u003e segments \u003d UserinputParserUtil.parseFirstSegment(testFirstSegment);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(\"pat\", segments.get(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(\"delete\", segments.get(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "francislow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "francislow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "francislow"
        },
        "content": "    public void parseFirstSegment_emptyString_listSizeOne() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "francislow"
        },
        "content": "        String testFirstSegment \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "francislow"
        },
        "content": "        LinkedList\u003cString\u003e segments \u003d UserinputParserUtil.parseFirstSegment(testFirstSegment);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(1, segments.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "francislow"
        },
        "content": "        assertEquals(\"\", segments.get(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "francislow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "francislow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "francislow": 42
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 4,
      "-": 132
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final Index fifthPatientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(fifthPatientIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 12,
      "-": 49
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/nurse_32.png\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 8,
      "-": 30
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void collectionToString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cInteger\u003e list \u003d List.of(1, 2, 3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(CollectionUtil.collectionToString(list), \"1\\n2\\n3\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cInteger\u003e emptyList \u003d List.of();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(CollectionUtil.collectionToString(emptyList), \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void collectionToStringShowingIndexes() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cInteger\u003e list \u003d List.of(1, 2, 3);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(CollectionUtil.collectionToStringShowingIndexes(list),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"1. 1\\n2. 2\\n3. 3\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cInteger\u003e emptyList \u003d List.of();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(CollectionUtil.collectionToStringShowingIndexes(emptyList), \"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(objects));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(collection));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(objects);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CollectionUtil.requireAllNonNull(collection);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 20,
      "crazoter": 7,
      "-": 101
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 8,
      "-": 108
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/commons/util/CopyUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.CopyError;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CopyUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void deepCopy_noExceptionThrown() throws CopyError {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        SerializableTestClass copy \u003d CopyUtil.deepCopy(serializableTestClass);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(serializableTestClass, copy);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertNotSame(serializableTestClass, copy);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void deepCopyOfObservableList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Test with immutable elements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cInteger\u003e originalInts \u003d FXCollections.observableArrayList(1, 2, 3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cInteger\u003e copiedInts \u003d CopyUtil.deepCopyOfObservableList(originalInts);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(originalInts, copiedInts);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertNotSame(originalInts, copiedInts);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        originalInts.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(copiedInts.get(0), 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        copiedInts.add(4);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(originalInts.isEmpty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Test with mutable elements"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cMutable\u003e originalMutables \u003d FXCollections.observableArrayList(new Mutable());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cMutable\u003e copiedMutables \u003d CopyUtil.deepCopyOfObservableList(originalMutables);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(originalMutables, copiedMutables);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertNotSame(originalMutables, copiedMutables);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        copiedMutables.get(0).setData(100);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(originalMutables.get(0).getData() \u003d\u003d 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        originalMutables.get(0).setData(50);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(copiedMutables.get(0).getData() \u003d\u003d 100);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(originalMutables.get(0).getData() \u003d\u003d 50);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static class Mutable {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        private int data \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public int getData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return data;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public void setData(int data) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.data \u003d data;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (other instanceof Mutable) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                Mutable o \u003d (Mutable) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                return this.getData() \u003d\u003d o.getData();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 76,
      "crazoter": 3
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"Word parameter should be a single word\", () -\u003e StringUtil"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(StringUtil"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(StringUtil"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); //Query word bigger than sentence word"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(StringUtil"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(StringUtil"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(StringUtil"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(StringUtil"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(StringUtil"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 26,
      "-": 128
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/importexport/CsvUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.importexport;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.FileUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.exceptions.ExportingException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.importexport.exceptions.ImportingException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalCsv;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class CsvUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String testFileName \u003d \"test.csv\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String sampleFileName \u003d \"sample.csv\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String testComparisonCsv \u003d TypicalCsv.TYPICAL_CSV_STRING;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String testInvalidCsv \u003d TypicalCsv.INVALID_CSV_STRING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final List\u003cPatient\u003e samplePatients \u003d TypicalPatients.getTypicalPatients();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final List\u003cPatient\u003e samplePatientsWithoutVisit \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            TypicalPatients.getTypicalPatientsWithoutVisit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public Path tempFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    // Writing/Export function tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void writePatientsToCsv_nullArgs_throwsException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // null patients, valid filename"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                CsvUtil.writePatientsToCsv(null, sampleFileName));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // valid patients, null filename"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                CsvUtil.writePatientsToCsv(samplePatients, null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // null patients, null filename"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                CsvUtil.writePatientsToCsv(null, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void writePatientsToCsv_validInput_correctFileWritten() throws ExportingException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // ./tmp/junit.../test.csv"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String tempTestPathString \u003d tempFolder.toString() + \"/\" + testFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // ./tmp/junit.../sample.csv"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String tempSamplePathString \u003d tempFolder.toString() + \"/\" + sampleFileName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Path tempTestPath \u003d Paths.get(tempTestPathString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Path tempSamplePath \u003d Paths.get(tempSamplePathString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Write sample patients with CsvUtil to test.csv"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CsvUtil.writePatientsToCsv(samplePatients, tempTestPathString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Write correct output with FileUtil to test.csv"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        FileUtil.writeToFile(tempSamplePath, testComparisonCsv);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Check that CsvUtil\u0027s output matches the intended output"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        assertEquals(FileUtil.readFromFile(tempTestPath),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                FileUtil.readFromFile(tempSamplePath));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void writePatientsToCsv_ifFileExists_throwsException() throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // ./tmp/junit.../test.csv"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String tempTestPathString \u003d tempFolder.toString() + \"/\" + testFileName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Path tempTestPath \u003d Paths.get(tempTestPathString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Write some correct output with FileUtil to test.csv"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        FileUtil.writeToFile(tempTestPath, testComparisonCsv);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Try writing again with CsvUtil to the same file, Exception should be thrown."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Assert.assertThrows(ExportingException.class, () -\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                CsvUtil.writePatientsToCsv(samplePatients, tempTestPathString));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void getCsvStringFromPatients_validInput_success() throws JsonProcessingException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String testCsvString \u003d CsvUtil.getCsvStringFromPatients(samplePatients);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        assertEquals(testCsvString, testComparisonCsv);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    // Reading/Import function tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void readPatientsFromCsv_nullArgs_throwsException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                CsvUtil.readPatientsFromCsv(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void readPatientsFromCsv_missingFile_throwsException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String nonExistentPathString \u003d \"/not/a/valid/path.csv\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Assert.assertThrows(ImportingException.class, () -\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                CsvUtil.readPatientsFromCsv(nonExistentPathString));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void readPatientsFromCsv_invalidFile_throwsException() throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // ./tmp/junit.../test.csv"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String tempTestPathString \u003d tempFolder.toString() + \"/\" + testFileName;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Path tempTestPath \u003d Paths.get(tempTestPathString);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Write an invalid file to test.csv"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        FileUtil.writeToFile(tempTestPath, testInvalidCsv);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Try and read the invalid file"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                CsvUtil.readPatientsFromCsv(tempTestPathString));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void readPatientsFromCsv_validInput_success() throws IOException, IllegalValueException, ImportingException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // ./tmp/junit.../test.csv"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        String tempTestPathString \u003d tempFolder.toString() + \"/\" + testFileName;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Path tempTestPath \u003d Paths.get(tempTestPathString);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Write an valid file to test.csv"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        FileUtil.writeToFile(tempTestPath, testComparisonCsv);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        List\u003cPatient\u003e readPatientList \u003d CsvUtil.readPatientsFromCsv(tempTestPathString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        assertEquals(readPatientList, samplePatientsWithoutVisit);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void importContainDupes_varArgs() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        List\u003cPatient\u003e samplePatientsWithDupes \u003d TypicalPatients.getTypicalPatients();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        samplePatientsWithDupes.addAll(samplePatientsWithDupes);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        assertTrue(() -\u003e CsvUtil.importsContainDupes(samplePatientsWithDupes));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        assertFalse(() -\u003e CsvUtil.importsContainDupes(samplePatients));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                CsvUtil.importsContainDupes(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 151
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/LogicManagerIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package cs.f10.t1.nursetraverse.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.JsonPatientBookStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Contains integration tests (interaction with parsers, commands) for {@code LogicManager}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class LogicManagerIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        JsonPatientBookStorage patientBookStorage \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                new JsonPatientBookStorage(temporaryFolder.resolve(\"patientBook.json\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        StorageManager storage \u003d new StorageManager(patientBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        logic \u003d new LogicManager(new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs()), storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute_undoRedoWithoutVisitCommands_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Undo redo without calling visit commands"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"pat-list\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"pat-clear\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"app-undo\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"pat-delete 1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"app-undo\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"app-redo\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"pat-list\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute_undoRedoWithVisitCommands_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "         * Test for bug in https://github.com/AY1920S1-CS2103-F10-1/main/issues/162 which was an interaction between"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "         * visit-end and undo/redo/history."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Undo redo after calling visit commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"visit-start 1\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"visit-end\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"pat-list\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"app-undo\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertCommandSuccess(\"app-redo\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void assertCommandSuccess(String inputCommand) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 67
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.JsonPatientBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonPatientBookStorage patientBookStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonPatientBookStorage(temporaryFolder.resolve(\"patientBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        StorageManager storage \u003d new StorageManager(patientBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String deleteCommand \u003d DeleteCommand.COMMAND_WORD + \" 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // Setup LogicManager with JsonPatientBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonPatientBookStorage patientBookStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonPatientBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionPatientBook.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        StorageManager storage \u003d new StorageManager(patientBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + CommandTestUtil.NAME_DESC_AMY + CommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(TypicalPatients.AMY).withTags().withVisitTodos().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedModel.addPatient(expectedPatient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStagedPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static class JsonPatientBookIoExceptionThrowingStub extends JsonPatientBookStorage {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        private JsonPatientBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void savePatientBook(ReadOnlyPatientBook patientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 42,
      "-": 119
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_newPatient_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStagedPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedModel.addPatient(validPatient);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPatient), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPatient), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patientInList \u003d model.getStagedPatientBook().getPatientList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(new AddCommand(patientInList), model, AddCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 45
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.HistoryRecord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.appointment.Appointment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructor_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPatient).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPatient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            AddCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void setPatientBookFilePath(Path patientBookFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        public void addPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void setStagedPatientBook(ReadOnlyPatientBook newData) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void replaceStagedPatientBook(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public ReadOnlyPatientBook getStagedPatientBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        public boolean hasAnyPatientInGivenList(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public Patient getPatientByIndex(Index index) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public ObservableList\u003cPatient\u003e getPatientsByIndexes(Set\u003cIndex\u003e indexes) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public FilteredList\u003cPatient\u003e getStagedPatientList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public FilteredList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public ObservableList\u003cVisit\u003e getObservableOngoingVisitList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void setNewOngoingVisit(Visit visit) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void updateOngoingVisit(Visit updatedVisit) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void cancelOngoingVisit() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void unsetOngoingVisit() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public Optional\u003cVisit\u003e getOngoingVisit() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public boolean patientHasOngoingVisit(Patient patient) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public boolean hasStagedChanges() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public void commit(MutatorCommand command) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public void discardStagedChanges() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public List\u003cHistoryRecord\u003e undoTo(HistoryRecord record) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public HistoryRecord redo() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        public ObservableList\u003cHistoryRecord\u003e getHistory() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setStagedAppointmentBook(ReadOnlyAppointmentBook appointmentBook) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void replaceStagedAppointmentBook(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public ReadOnlyAppointmentBook getStagedAppointmentBook() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void deleteAppointment(Appointment target) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getStagedAppointmentList() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public FilteredList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * A Model stub that contains a single patient."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private class ModelStubWithPatient extends ModelStub {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        private final Patient patient;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ModelStubWithPatient(Patient patient) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return this.patient.isSamePatient(patient);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * A Model stub that always accept the patient being added."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private class ModelStubAcceptingPatientAdded extends ModelStub {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return patientsAdded.stream().anyMatch(patient::isSamePatient);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            patientsAdded.add(patient);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public ReadOnlyPatientBook getStagedPatientBook() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new PatientBook();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 29,
      "cheongsiuhong": 24,
      "sandydays": 50,
      "crazoter": 111,
      "-": 136
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_emptyPatientBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_nonEmptyPatientBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model model \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedModel.setStagedPatientBook(new PatientBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 32
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PATIENT_VISIT_TODO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VALID_VISIT_TODO \u003d \"Record Blood Pressure\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VALID_VISIT_TODO2 \u003d \"Another Valid Visit Todo\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VISIT_TODO \u003d \" \" + PREFIX_PATIENT_VISIT_TODO + VALID_VISIT_TODO;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VISIT_TODO2 \u003d \" \" + PREFIX_PATIENT_VISIT_TODO + VALID_VISIT_TODO2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final Index OUT_OF_BOUNDS_INDEX \u003d Index.fromOneBased(Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            CommandResult result \u003d executeAndCommitCommand(command, actualModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * - the patient book, filtered patient list and selected patient in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook expectedPatientBook \u003d new PatientBook(actualModel.getStagedPatientBook());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                expectedMessage, () -\u003e executeAndCommitCommand(command, actualModel));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(expectedPatientBook, actualModel.getStagedPatientBook());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * {@code model}\u0027s patient book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static void showPatientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(1, model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Executes the {@code command} with the given {@code model} and commits it if it is a {@link MutatorCommand}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static CommandResult executeAndCommitCommand(Command command, Model model) throws CommandException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandResult result \u003d command.execute(model);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (command instanceof MutatorCommand) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            model.commit((MutatorCommand) command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 10,
      "cheongsiuhong": 2,
      "crazoter": 42,
      "-": 94
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.BeginVisitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.exceptions.PatientHasOngoingVisitException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(TypicalIndexes.INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getStagedPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(deleteCommand, model, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        showPatientAtIndex(model, TypicalIndexes.INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(TypicalIndexes.INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStagedPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        showNoPatient(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_SECOND_PATIENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_patientHasOngoingVisit_exception() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand beginVisitCommand \u003d new BeginVisitCommand(TypicalIndexes.INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e beginVisitCommand.execute(model));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(deleteCommand, model, DeleteCommand.MESSAGE_INVALID_PATIENT_HAS_ONGOING_VISIT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //There is also a check within the patient book"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(TypicalIndexes.INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(PatientHasOngoingVisitException.class, () -\u003e model.deletePatient(patientToDelete));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void showNoPatient(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model.updateFilteredPatientList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(model.getFilteredPatientList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 110
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_VISIT_TODO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Ensure that this test case uses a Patient that doesn\u0027t have visits, because you cannot edit visits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //and this testcase will fail if it uses a Patient with a visit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //In this case we\u0027ll use the 4th patient, Daniel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Index.fromOneBased(4), descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getStagedPatientBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(3), editedPatient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getStagedPatientBook()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new EditCommand(TypicalIndexes.INDEX_FIRST_PATIENT, new EditCommand.EditPatientDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient editedPatient \u003d model.getFilteredPatientList().get(TypicalIndexes.INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getStagedPatientBook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        showPatientAtIndex(model, TypicalIndexes.INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patientInFilteredList \u003d model.getFilteredPatientList()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getStagedPatientBook()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_duplicatePatientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(TypicalIndexes.INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_SECOND_PATIENT, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_duplicatePatientFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        showPatientAtIndex(model, TypicalIndexes.INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // edit patient in filtered list into a duplicate in patient book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patientInList \u003d model.getStagedPatientBook()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .getPatientList().get(TypicalIndexes.INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new EditPatientDescriptorBuilder(patientInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_invalidPatientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PATIENT, DESC_AMY);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor copyDescriptor \u003d new EditCommand.EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_PATIENT, copyDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(TypicalIndexes.INDEX_SECOND_PATIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(TypicalIndexes.INDEX_FIRST_PATIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 163
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/EditPatientDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class EditPatientDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptorWithSameValues \u003d new EditCommand.EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 58
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/ExportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Tests for the ExportCommand Class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Success cases will not be tested here as they rely on"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * static methods from {@Link CsvUtil}, which"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * are tested in {@Link CsvUtilTest}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String testFilename \u003d \"test\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final Optional\u003cSet\u003cIndex\u003e\u003e emptyIndexSet \u003d Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private Model emptyModel \u003d new ModelManager(new PatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void execute_emptyPatientBook_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandTestUtil.assertCommandFailure("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ExportCommand(testFilename, emptyIndexSet), emptyModel, ExportCommand.MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void execute_outOfBoundsIndex_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Set\u003cIndex\u003e indexSetOutOfBounds \u003d TypicalIndexes.getTypicalIndexSet();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        indexSetOutOfBounds.add(CommandTestUtil.OUT_OF_BOUNDS_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandTestUtil.assertCommandFailure("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ExportCommand(testFilename, Optional.of(indexSetOutOfBounds)),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 48
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_zeroKeywords_noPatientFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_multipleKeywords_multiplePatientsFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(Arrays.asList(TypicalPatients.CARL, TypicalPatients.ELLE, TypicalPatients.FIONA),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                model.getFilteredPatientList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 20,
      "-": 61
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 17
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/ImportMergeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.FileUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalCsv;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ImportMergeCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String testFileName \u003d \"testFileName\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String mergeFileName \u003d \"mergeFileName\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String emptyFileName \u003d \"emptyFileName\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String nonExistentFileName \u003d \"nonExistentFileNameAvoidClash\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static File mergeFile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static File tempFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static File emptyFile;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static void setUp() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        tempFile \u003d File.createTempFile(testFileName, \".csv\", new File(\"imports\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        FileUtil.writeToFile(tempFile.toPath(), TypicalCsv.TYPICAL_CSV_STRING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        tempFile.deleteOnExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        mergeFile \u003d File.createTempFile(mergeFileName, \".csv\", new File(\"imports\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        FileUtil.writeToFile(mergeFile.toPath(), TypicalCsv.CSV_STRING_TO_MERGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        mergeFile.deleteOnExit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        emptyFile \u003d File.createTempFile(emptyFileName, \".csv\", new File(\"imports\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        emptyFile.deleteOnExit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void execute_nonExistentFile_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandTestUtil.assertCommandFailure("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ImportMergeCommand(nonExistentFileName), model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                String.format(ImportMergeCommand.MESSAGE_FILE_DOES_NOT_EXIST, nonExistentFileName)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void execute_emptyFile_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandTestUtil.assertCommandFailure("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ImportMergeCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                        emptyFile.getName().replace(\".csv\", \"\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                model, ImportMergeCommand.MESSAGE_FILE_EMPTY"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void execute_duplicatePatients_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandTestUtil.assertCommandFailure("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ImportMergeCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                        tempFile.getName().replace(\".csv\", \"\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                model, ImportMergeCommand.MESSAGE_DUPLICATE_CSV_PATIENTS"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void execute_validCsv_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        PatientBook testPatientBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        testPatientBook.setPatients(TypicalPatients.getTypicalPatientsWithoutVisit());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Model testModel \u003d new ModelManager(testPatientBook, new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        PatientBook expectedPatientBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        expectedPatientBook.setPatients(TypicalPatients.getTypicalPatientsWithoutVisit());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        expectedPatientBook.addPatient(TypicalPatients.HOON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(expectedPatientBook, new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandTestUtil.assertCommandSuccess("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ImportMergeCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                        mergeFile.getName().replace(\".csv\", \"\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                testModel, ImportMergeCommand.MESSAGE_SUCCESS, expectedModel"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 86
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/ImportReplaceCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.FileUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalCsv;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ImportReplaceCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String testFileName \u003d \"testFileName\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String emptyFileName \u003d \"emptyFileName\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static final String nonExistentFileName \u003d \"nonExistentFileNameAvoidClash\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static File tempFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private static File emptyFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static void setUp() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        tempFile \u003d File.createTempFile(testFileName, \".csv\", new File(\"imports\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        FileUtil.writeToFile(tempFile.toPath(), TypicalCsv.TYPICAL_CSV_STRING);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        tempFile.deleteOnExit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        emptyFile \u003d File.createTempFile(emptyFileName, \".csv\", new File(\"imports\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        emptyFile.deleteOnExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void execute_nonExistentFile_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandTestUtil.assertCommandFailure("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ImportReplaceCommand(nonExistentFileName), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                String.format(ImportReplaceCommand.MESSAGE_FILE_DOES_NOT_EXIST, nonExistentFileName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void execute_emptyFile_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandTestUtil.assertCommandFailure("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ImportReplaceCommand("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                        emptyFile.getName().replace(\".csv\", \"\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                model, ImportReplaceCommand.MESSAGE_FILE_EMPTY"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void execute_validCsv_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Model testModel \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        PatientBook expectedPatientBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        expectedPatientBook.setPatients(TypicalPatients.getTypicalPatientsWithoutVisit());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(expectedPatientBook, new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandTestUtil.assertCommandSuccess("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ImportReplaceCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                        tempFile.getName().replace(\".csv\", \"\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                testModel, ImportReplaceCommand.MESSAGE_SUCCESS, expectedModel"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 66
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        model \u003d new ModelManager(TypicalPatients.getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getStagedPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        showPatientAtIndex(model, TypicalIndexes.INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 39
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.model.HistoryRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.DummyMutatorCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute_redoSingleUndo_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        MutatorCommand commandToUndo \u003d new DummyMutatorCommand(\"1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String expectedUndoMessage \u003d UndoCommand.makeResultString(List.of("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                new HistoryRecord(commandToUndo, new PatientBook())));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String expectedRedoMessage \u003d String.format(RedoCommand.MESSAGE_REDO_SUCCESS,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                new HistoryRecord(commandToUndo, new PatientBook()).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(commandToUndo, model,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                String.format(DummyMutatorCommand.RESULT_PREAMBLE, \"1\"), expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new UndoCommand(), model, expectedUndoMessage, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new RedoCommand(), model, expectedRedoMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute_redoMultipleUndo_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        MutatorCommand dummyCommand1 \u003d new DummyMutatorCommand(\"1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        MutatorCommand dummyCommand2 \u003d new DummyMutatorCommand(\"2\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        MutatorCommand dummyCommand3 \u003d new DummyMutatorCommand(\"3\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String expectedUndoMessage \u003d UndoCommand.makeResultString(List.of("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                new HistoryRecord(dummyCommand3, new PatientBook()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                new HistoryRecord(dummyCommand2, new PatientBook())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String firstExpectedRedoMessage \u003d String.format(RedoCommand.MESSAGE_REDO_SUCCESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                new HistoryRecord(dummyCommand2, new PatientBook()).toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String secondExpectedRedoMessage \u003d String.format(RedoCommand.MESSAGE_REDO_SUCCESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                new HistoryRecord(dummyCommand3, new PatientBook()).toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(dummyCommand1, model,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                String.format(DummyMutatorCommand.RESULT_PREAMBLE, \"1\"), expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(dummyCommand2, model,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                String.format(DummyMutatorCommand.RESULT_PREAMBLE, \"2\"), expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(dummyCommand3, model,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                String.format(DummyMutatorCommand.RESULT_PREAMBLE, \"3\"), expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new UndoCommand(Index.fromOneBased(2)),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                model, expectedUndoMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new RedoCommand(), model, firstExpectedRedoMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new RedoCommand(), model, secondExpectedRedoMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute_noHistory_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Test on fresh no history model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_NO_MORE_HISTORY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Test on no history model with commands undone before"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        MutatorCommand commandToUndo \u003d new DummyMutatorCommand(\"1\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String expectedUndoMessage \u003d UndoCommand.makeResultString(List.of("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                new HistoryRecord(commandToUndo, new PatientBook())));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String expectedRedoMessage \u003d String.format(RedoCommand.MESSAGE_REDO_SUCCESS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                new HistoryRecord(commandToUndo, new PatientBook()).toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(commandToUndo, model,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                String.format(DummyMutatorCommand.RESULT_PREAMBLE, \"1\"), expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new UndoCommand(), model, expectedUndoMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new RedoCommand(), model, expectedRedoMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_NO_MORE_HISTORY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 87
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.HistoryRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.DummyMutatorCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_noArgsNoHistory_throwsCommandException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // Test on fresh no history model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_NO_MORE_HISTORY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // Test on no history model with commands undone before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        MutatorCommand commandToUndo \u003d new DummyMutatorCommand(\"1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String expectedMessage \u003d UndoCommand.makeResultString(List.of("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                        new HistoryRecord(commandToUndo, new PatientBook())));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(commandToUndo, model,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                String.format(DummyMutatorCommand.RESULT_PREAMBLE, \"1\"), expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new UndoCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_NO_MORE_HISTORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 3,
      "crazoter": 31
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/visit/BeginVisitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.VisitTaskUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains integration tests (interaction with the Model, Begin, Cancel, Finish command, Parser) and unit tests for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * {@code BeginVisitCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class BeginVisitCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand command \u003d new BeginVisitCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_valid_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand command \u003d new BeginVisitCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStagedPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient expectedPatient \u003d expectedModel.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            CommandResult result \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //Need to test it this way because it uses the new Date(). The time must be exactly the same."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            StartDateTime now \u003d model.getOngoingVisit().get().getStartDateTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Visit visit \u003d new Visit("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    new Remark(\"\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    now,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    EndDateTime.UNFINISHED_VISIT_END_DATE_TIME,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    VisitTaskUtil.listFromPatient(expectedPatient), expectedPatient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            expectedPatient.addVisit(visit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            expectedModel.setNewOngoingVisit(visit);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            String expectedMessage \u003d String.format(BeginVisitCommand.MESSAGE_START_VISIT_SUCCESS, expectedPatient);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_ongoingVisitExists_fail() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Ensure repeats fail"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand command \u003d new BeginVisitCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e command.execute(model));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(command, model, BeginVisitCommand.MESSAGE_START_VISIT_FAILURE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand commandOnAnother \u003d new BeginVisitCommand(INDEX_SECOND_PATIENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(commandOnAnother, model, BeginVisitCommand.MESSAGE_START_VISIT_FAILURE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_ongoingVisitConstraints_succeedAndFailAccordingly() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Verify that repeat after cancelling / finishing succeed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand beginCommand \u003d new BeginVisitCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CancelOngoingVisitCommand cancelCommand \u003d new CancelOngoingVisitCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        FinishOngoingVisitCommand finishCommand \u003d new FinishOngoingVisitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(cancelCommand, model, CancelOngoingVisitCommand.MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(finishCommand, model, FinishOngoingVisitCommand.MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e beginCommand.execute(model));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e cancelCommand.execute(model));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(cancelCommand, model, CancelOngoingVisitCommand.MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(finishCommand, model, FinishOngoingVisitCommand.MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e beginCommand.execute(model));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e finishCommand.execute(model));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(cancelCommand, model, CancelOngoingVisitCommand.MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandFailure(finishCommand, model, FinishOngoingVisitCommand.MESSAGE_NO_ONGOING_VISIT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e beginCommand.execute(model));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand firstCommand \u003d new BeginVisitCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand secondCommand \u003d new BeginVisitCommand(INDEX_SECOND_PATIENT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(firstCommand, firstCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand firstCommandCopy \u003d new BeginVisitCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(firstCommand, firstCommandCopy);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(firstCommand, 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(firstCommand, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(firstCommand, secondCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 122
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/visit/CancelOngoingVisitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains integration tests (interaction with the Model, Begin, Cancel, Finish command, Parser) and unit tests for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * {@code CancelOngoingVisitCommand}. There is some overlap with BeginVisitCommandTest, so some of the tests are"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * not here."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class CancelOngoingVisitCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_valid_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getStagedPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand beginCommand \u003d new BeginVisitCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CancelOngoingVisitCommand cancelCommand \u003d new CancelOngoingVisitCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e beginCommand.execute(model));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertCommandSuccess(cancelCommand, model, CancelOngoingVisitCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(model.getOngoingVisit(), Optional.empty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 37
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/visit/FinishOngoingVisitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains integration tests (interaction with the Model, Begin, Cancel, Finish command, Parser) and unit tests for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * {@code CancelOngoingVisitCommand}. There is some overlap with BeginVisitCommandTest, so some of the tests are not"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * here."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class FinishOngoingVisitCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute_valid_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model initialModel \u003d new ModelManager(model.getStagedPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand beginCommand \u003d new BeginVisitCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        FinishOngoingVisitCommand finishCommand \u003d new FinishOngoingVisitCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e beginCommand.execute(model));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e finishCommand.execute(model));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(model.getOngoingVisit(), Optional.empty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Verify that the visit has been stored"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertNotEquals(initialModel.getStagedPatientList().get(0), model.getStagedPatientList().get(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 38
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/commands/visit/UpdateOngoingVisitCommandsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.commands.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Contains integration tests (interaction with the Model, Begin, Cancel, Finish command, Parser) and unit tests for"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * {@code UpdateOngoingVisitCommand}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class UpdateOngoingVisitCommandsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //private Model model \u003d new ModelManager(getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructor_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UpdateOngoingVisitCommand(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 19
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(TypicalPatients.BOB).withTags(CommandTestUtil.VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withVisitTodos(CommandTestUtil.VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.VISIT_TODO, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_AMY"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.VISIT_TODO, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.VISIT_TODO, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.VISIT_TODO, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.VISIT_TODO, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient expectedPatientMultipleTags \u003d new PatientBuilder(TypicalPatients.BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_FRIEND, CommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.VISIT_TODO, new AddCommand(expectedPatientMultipleTags));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // multiple todos - all accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient expectedPatientMultipleTodos \u003d new PatientBuilder(TypicalPatients.BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withVisitTodos(CommandTestUtil.VALID_VISIT_TODO, CommandTestUtil.VALID_VISIT_TODO2).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.VISIT_TODO"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.VISIT_TODO2, new AddCommand(expectedPatientMultipleTodos));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // zero tags or visit todos"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(TypicalPatients.AMY).withTags().withVisitTodos().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_AMY"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_NAME_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.VALID_PHONE_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_NAME_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.VALID_PHONE_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.INVALID_NAME_DESC"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_TAG_DESC"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.INVALID_NAME_DESC"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.NAME_DESC_BOB"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 219
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/AppParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.BeginVisitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.CancelOngoingVisitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.FinishOngoingVisitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class AppParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private final AppParser parser \u003d new AppParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(new AddCommand(patient), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + TypicalIndexes.INDEX_FIRST_PATIENT.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(new DeleteCommand(TypicalIndexes.INDEX_FIRST_PATIENT), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + TypicalIndexes.INDEX_FIRST_PATIENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(new EditCommand(TypicalIndexes.INDEX_FIRST_PATIENT, descriptor), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parseCommand_beginVisit() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand command \u003d (BeginVisitCommand) parser.parseCommand("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                BeginVisitCommand.COMMAND_WORD + \" \" + TypicalIndexes.INDEX_FIRST_PATIENT.getOneBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(new BeginVisitCommand(TypicalIndexes.INDEX_FIRST_PATIENT), command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parseCommand_cancelOngoingVisit() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(parser.parseCommand(CancelOngoingVisitCommand.COMMAND_WORD) instanceof CancelOngoingVisitCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(parser.parseCommand(CancelOngoingVisitCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                instanceof CancelOngoingVisitCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parseCommand_finishOngoingVisit() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(parser.parseCommand(FinishOngoingVisitCommand.COMMAND_WORD) instanceof FinishOngoingVisitCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(parser.parseCommand(FinishOngoingVisitCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                instanceof FinishOngoingVisitCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(ParseException.class, String"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 2,
      "crazoter": 62,
      "-": 64
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Assertions.assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 6,
      "-": 34
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", new DeleteCommand(TypicalIndexes.INDEX_FIRST_PATIENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"a\", String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 7,
      "-": 24
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-5\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"0\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Patient} being edited,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND + TAG_EMPTY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + TAG_EMPTY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.INVALID_NAME_DESC"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        + CommandTestUtil.VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.NAME_DESC_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withEmail(CommandTestUtil.VALID_EMAIL_AMY).withAddress(CommandTestUtil.VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_HUSBAND, CommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withEmail(CommandTestUtil.VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(CommandTestUtil.VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withEmail(CommandTestUtil.VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withAddress(CommandTestUtil.VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withTags(CommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_AMY"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withEmail(CommandTestUtil.VALID_EMAIL_BOB).withAddress(CommandTestUtil.VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_FRIEND, CommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withPhone(CommandTestUtil.VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withEmail(CommandTestUtil.VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withAddress(CommandTestUtil.VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 247
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/ExportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void parse_validArgs_returnsExportCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        ExportCommand expectedCommandNoIndex \u003d new ExportCommand(\"filename\", Optional.empty());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // only filename, no indexes"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" n/filename\", expectedCommandNoIndex);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        ExportCommand expectedCommandWithIndex \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ExportCommand(\"filename\", Optional.of(TypicalIndexes.getTypicalIndexSet()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // filename and indexes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                \" n/filename i/1 i/2 i/3\", expectedCommandWithIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // No filename"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", String"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                .format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Invalid index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" n/filename i/a\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // Invalid filename"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" n/`/\\\\:;.@# i/1\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                String.format(ParserUtil.MESSAGE_INVALID_FILENAME, \"`/\\\\:;.@#\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 43
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"     \", String"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 33
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/ImportMergeCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ImportMergeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ImportMergeCommandParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private ImportMergeCommandParser parser \u003d new ImportMergeCommandParser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void parse_validArgs_returnsImportReplaceCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // valid file name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" n/filename\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ImportMergeCommand(\"filename\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // invalid file name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" n/`/\\\\:;.@#\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                String.format(ParserUtil.MESSAGE_INVALID_FILENAME, \"`/\\\\:;.@#\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 24
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/ImportReplaceCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.ImportReplaceCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class ImportReplaceCommandParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    private ImportReplaceCommandParser parser \u003d new ImportReplaceCommandParser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void parse_validArgs_returnsImportReplaceCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // valid file name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" n/filename\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                new ImportReplaceCommand(\"filename\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        // invalid file name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" n/`/\\\\:;.@#\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                String.format(ParserUtil.MESSAGE_INVALID_FILENAME, \"`/\\\\:;.@#\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 24
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(ParseException.class, ParserUtil.MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(TypicalIndexes.INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(TypicalIndexes.INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 36,
      "-": 160
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/logic/parser/visit/BeginVisitCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.logic.parser.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.BeginVisitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * outside of the BeginCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * same path through the BeginCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class BeginVisitCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private BeginVisitCommandParser parser \u003d new BeginVisitCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertParseSuccess(parser, \"1\", new BeginVisitCommand(INDEX_FIRST_PATIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                BeginVisitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 33
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/HistoryManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.DummyMutatorCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class HistoryManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void pushRecord() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"1\"), new PatientBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.asUnmodifiableObservableList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void pushRecord_overMaxSize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        DummyMutatorCommand targetCommand \u003d new DummyMutatorCommand(\"2\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook targetPatientBook \u003d getTypicalPatientBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"1\"), new PatientBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.pushRecord(targetCommand, targetPatientBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cHistoryRecord\u003e historyList \u003d historyManager.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(historyList.get(0).getCommand(), targetCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(historyList.get(0).getCopyOfPatientBook(), targetPatientBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void popRecord_hasRecords() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        DummyMutatorCommand targetCommand \u003d new DummyMutatorCommand(\"2\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook targetPatientBook \u003d getTypicalPatientBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"1\"), new PatientBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.pushRecord(targetCommand, targetPatientBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        HistoryRecord record \u003d historyManager.popRecord(new PatientBook()).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(record.getCommand(), targetCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(record.getCopyOfPatientBook(), targetPatientBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void popRecord_noRecords_emptyOptional() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(historyManager.popRecord(new PatientBook()), Optional.empty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"1\"), new PatientBook());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.popRecord(new PatientBook());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(historyManager.popRecord(new PatientBook()), Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void popRecordsTo_hasRecord() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cHistoryRecord\u003e historyList \u003d historyManager.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        DummyMutatorCommand targetCommand \u003d new DummyMutatorCommand(\"1\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.pushRecord(targetCommand, new PatientBook());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"2\"), new PatientBook());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"3\"), new PatientBook());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.popRecordsTo(historyList.get(1), new PatientBook());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(historyList.get(0).getCommand(), targetCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Pop to end of history"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.popRecordsTo(historyList.get(0), new PatientBook());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void popRecordsTo_noSuchRecord() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        HistoryRecord outsideRecord \u003d new HistoryRecord(new DummyMutatorCommand(\"!!!\"), new PatientBook());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e historyManager.popRecordsTo(outsideRecord, new PatientBook()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        historyManager.pushRecord(new DummyMutatorCommand(\"1\"), new PatientBook());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e historyManager.popRecordsTo(outsideRecord, new PatientBook()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertTrue(historyManager.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void popRedo() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        HistoryManager historyManager \u003d new HistoryManager(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(historyManager.popRedo(new PatientBook()), Optional.empty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        MutatorCommand commandToRedo \u003d new DummyMutatorCommand(\"1\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.pushRecord(commandToRedo, new PatientBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        historyManager.popRecord(new PatientBook());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(historyManager.popRedo(new PatientBook()).get(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                new HistoryRecord(commandToRedo, new PatientBook()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 87,
      "crazoter": 27
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.DummyMutatorCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientBookBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(new PatientBook(), new PatientBook(modelManager.getStagedPatientBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userPrefs.setPatientBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userPrefs.setPatientBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assertions.assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatientBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setPatientBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatientBookFilePath_validPath_setsPatientBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        modelManager.setPatientBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(path, modelManager.getPatientBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void hasPatient_patientNotInPatientBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(modelManager.hasPatient(TypicalPatients.ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void hasPatient_patientInPatientBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        modelManager.addPatient(TypicalPatients.ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(modelManager.hasPatient(TypicalPatients.ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model actualModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        actualModelManager.addPatient(TypicalPatients.ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(actualModelManager.hasPatient(TypicalPatients.ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        actualModelManager.commit(new DummyMutatorCommand(\"add Alice\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(actualModelManager.hasPatient(TypicalPatients.ALICE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        actualModelManager.deletePatient(TypicalPatients.ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(actualModelManager.hasPatient(TypicalPatients.ALICE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        actualModelManager.commit(new DummyMutatorCommand(\"delete Alice\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(actualModelManager.hasPatient(TypicalPatients.ALICE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook patientBook \u003d new PatientBookBuilder().withPatient(TypicalPatients.ALICE)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withPatient(TypicalPatients.BENSON).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook differentPatientBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        modelManager \u003d new ModelManager(patientBook, userPrefs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(patientBook, userPrefs);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different patientBook -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPatientBook, userPrefs)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String[] keywords \u003d TypicalPatients.ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(patientBook, userPrefs)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        modelManager.updateFilteredPatientList(Model.PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        differentUserPrefs.setPatientBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(patientBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 149
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/PatientBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.CopyUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class PatientBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final PatientBook patientBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(Collections.emptyList(), patientBook.getPatientList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e patientBook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void resetData_withValidReadOnlyPatientBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook newData \u003d TypicalPatients.getTypicalPatientBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(newData, patientBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // Two patients with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(TypicalPatients.ALICE).withAddress(CommandTestUtil.VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPatient\u003e newPatients \u003d Arrays.asList(TypicalPatients.ALICE, editedAlice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBookStub newData \u003d new PatientBookStub(newPatients);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(DuplicatePatientException.class, () -\u003e patientBook.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e patientBook.hasPatient(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void hasPatient_patientNotInPatientBook_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(patientBook.hasPatient(TypicalPatients.ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void hasPatient_patientInPatientBook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientBook.addPatient(TypicalPatients.ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(patientBook.hasPatient(TypicalPatients.ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void hasPatient_patientWithSameIdentityFieldsInPatientBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientBook.addPatient(TypicalPatients.ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(TypicalPatients.ALICE).withAddress(CommandTestUtil.VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(patientBook.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void getPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e patientBook.getPatientList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void deepCopy() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook copy \u003d patientBook.deepCopy();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotSame(copy, patientBook);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(copy, patientBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void deepCopy_changes_areIndependent() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook copy \u003d patientBook.deepCopy();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        copy.addPatient(TypicalPatients.ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(copy, patientBook);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(copy.hasPatient(TypicalPatients.ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(patientBook.hasPatient(TypicalPatients.ALICE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void hashCode_noError() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(patientBook::hashCode);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook typicalPatientBook \u003d TypicalPatients.getTypicalPatientBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(typicalPatientBook::hashCode);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * A stub ReadOnlyPatientBook whose patients list can violate interface constraints."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static class PatientBookStub implements ReadOnlyPatientBook {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBookStub(Collection\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.patients.setAll(patients);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return patients;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public Pair\u003cInteger, Integer\u003e getIndexPairOfOngoingPatientAndVisit() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new Pair\u003c\u003e(-1, -1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        public PatientBookStub deepCopy() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new PatientBookStub(CopyUtil.deepCopyOfObservableList(patients));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 143
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatientBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setPatientBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 21
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/datetime/DateTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String INVALID_INPUT \u003d \"10-30-2017 1200\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VALID_INPUT_1200 \u003d \"10-01-2017 1200\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String VALID_INPUT_1300 \u003d \"10-01-2017 1300\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final DateTime DATE_TIME_1200 \u003d new DateTime(VALID_INPUT_1200);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final DateTime DATE_TIME_1300 \u003d new DateTime(VALID_INPUT_1300);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final DateTime NOW_DATE_TIME \u003d new DateTime(new Date());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String DATE_1200_EXPECTED_JACKSON_OUTPUT \u003d \"10-01-2017 1200\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String DATE_1200_EXPECTED_STRING_OUTPUT \u003d \"10-01-2017 1200\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructorString_null_nullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String nullString \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(nullString));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructorDate_null_nullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Date nullDate \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(nullDate));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructor_valid_noException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e new DateTime(VALID_INPUT_1300));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e new DateTime(new Date()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parseDateTime_null_nullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTime.parseDateTime(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parseDateTime_invalid_illegalArgumentException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e DateTime.parseDateTime(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e DateTime.parseDateTime(\"string\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e DateTime.parseDateTime(\"1/1/1 12:00\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e DateTime.parseDateTime(\"1-1-1000 1200\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e DateTime.parseDateTime(\"10-1-0001 12:00\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e DateTime.parseDateTime(\"10-20-0001 0000\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void parseDateTime_valid_noException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e DateTime.parseDateTime(\"10-01-2017 1200\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e DateTime.parseDateTime(\"30-12-2900 0100\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Create a local date time and pass it in as a date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.parse(\"10-01-2017 1300\", DateTime.DATE_PARSER_VALIDATOR);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ZonedDateTime zdt \u003d localDateTime.atZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Date output \u003d Date.from(zdt.toInstant());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DateTime dateTime1300 \u003d new DateTime(output);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(DATE_TIME_1200, DATE_TIME_1300);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(DATE_TIME_1200, dateTime1300);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(DATE_TIME_1300, dateTime1300);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(DATE_TIME_1300, DATE_TIME_1300);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(NOW_DATE_TIME, NOW_DATE_TIME);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void testToJacksonJsonString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(DATE_TIME_1200.toJacksonJsonString(), DATE_1200_EXPECTED_JACKSON_OUTPUT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(DATE_TIME_1200.toString(), DATE_1200_EXPECTED_STRING_OUTPUT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 93
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/datetime/EndDateTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.model.datetime.DateTimeTest.INVALID_INPUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.model.datetime.DateTimeTest.VALID_INPUT_1200;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.model.datetime.DateTimeTest.VALID_INPUT_1300;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class EndDateTimeTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final EndDateTime VALID_END_DATE_TIME \u003d new EndDateTime(new Date());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructorString_null_nullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String nullString \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(nullString));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructorDate_null_nullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Date nullDate \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(nullDate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructor_valid_noException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e new EndDateTime(VALID_INPUT_1300));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e new EndDateTime(new Date()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void isValidEndDateTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(() -\u003e EndDateTime.isValidEndDateTime(VALID_INPUT_1200, VALID_INPUT_1300));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(() -\u003e EndDateTime.isValidEndDateTime(VALID_INPUT_1300, VALID_INPUT_1300));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(() -\u003e EndDateTime.isValidEndDateTime(VALID_INPUT_1300, VALID_INPUT_1200));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(() -\u003e EndDateTime.isValidEndDateTime(INVALID_INPUT, VALID_INPUT_1200));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(() -\u003e EndDateTime.isValidEndDateTime(INVALID_INPUT, INVALID_INPUT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(() -\u003e EndDateTime.isValidEndDateTime(VALID_INPUT_1200, INVALID_INPUT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 46
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/datetime/StartDateTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.model.datetime.DateTimeTest.INVALID_INPUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.model.datetime.DateTimeTest.VALID_INPUT_1300;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class StartDateTimeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final StartDateTime VALID_START_DATE_TIME \u003d new StartDateTime(new Date());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructorString_null_nullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String nullString \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(nullString));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructorDate_null_nullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Date nullDate \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(nullDate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructor_valid_noException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e new StartDateTime(VALID_INPUT_1300));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e new StartDateTime(new Date()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void isValidStartDateTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(() -\u003e StartDateTime.isValidStartDateTime(VALID_INPUT_1300));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(() -\u003e StartDateTime.isValidStartDateTime(VALID_INPUT_1300));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(() -\u003e StartDateTime.isValidStartDateTime(INVALID_INPUT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 42
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/patient/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/patient/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 59
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/patient/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 10,
      "-": 65
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/patient/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/patient/PatientTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.model.datetime.EndDateTimeTest.VALID_END_DATE_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.visit.BeginVisitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.exceptions.VisitNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patient.getTags().remove(0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void isSamePatient() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(ALICE.isSamePatient(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(ALICE.isSamePatient(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void visitIntegration() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPatientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient visitedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(Optional.empty(), visitedPatient.getVisitByIndex(-1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(Optional.empty(), visitedPatient.getVisitByIndex(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(Optional.empty(), visitedPatient.getVisitByIndex(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BeginVisitCommand beginVisitCommand \u003d new BeginVisitCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e beginVisitCommand.execute(model));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e visitedPatient.removeVisit(visitedPatient.getVisitByIndex(0).get(), model));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit visit \u003d visitedPatient.getVisitByIndex(1).get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit visitNotInData \u003d new Visit(visit.getRemark(), visit.getStartDateTime(), VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visit.getVisitTasks(), visit.getPatient());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e visitedPatient.removeVisit(visit, model));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e visitedPatient.removeVisit(visitNotInData, model));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(VisitNotFoundException.class, () -\u003e visitedPatient.updateVisit(visitNotInData, visit));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 127
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/patient/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"420420\")); // in between 3 and 8 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\")); //exactly 8 numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 3,
      "crazoter": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/patient/UniquePatientListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class UniquePatientListTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void contains_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void contains_patientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void contains_patientInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void contains_patientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).withPreviousVisits()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(uniquePatientList.contains(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void add_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void add_duplicatePatient_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatient_nullTargetPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatient_nullEditedPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALICE, null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatient_editedPatientIsSamePatient_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.setPatient(ALICE, ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedUniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatient_editedPatientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.setPatient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedUniquePatientList.add(editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatient_editedPatientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.setPatient(ALICE, BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatient_editedPatientHasNonUniqueIdentity_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatient(ALICE, BOB));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void remove_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void remove_existingPatient_removesPatient() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.remove(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatients_nullUniquePatientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatients_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.setPatients(expectedUniquePatientList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.setPatients(patientList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void indexOf() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(CARL);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.indexOf(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(-1, uniquePatientList.indexOf(DANIEL));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(0, uniquePatientList.indexOf(ALICE));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(2, uniquePatientList.indexOf(CARL));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void getByIndex() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(Optional.empty(), uniquePatientList.getByIndex(-1));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(Optional.empty(), uniquePatientList.getByIndex(0));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(Optional.empty(), uniquePatientList.getByIndex(-1));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(ALICE, uniquePatientList.getByIndex(0).get());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(Optional.empty(), uniquePatientList.getByIndex(1));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(ALICE, uniquePatientList.getByIndex(0).get());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(BOB, uniquePatientList.getByIndex(1).get());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(CARL);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(ALICE, uniquePatientList.getByIndex(0).get());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(BOB, uniquePatientList.getByIndex(1).get());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(CARL, uniquePatientList.getByIndex(2).get());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(DANIEL);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.remove(ALICE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(BOB, uniquePatientList.getByIndex(0).get());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(CARL, uniquePatientList.getByIndex(1).get());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(DANIEL, uniquePatientList.getByIndex(2).get());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.remove(CARL);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(BOB, uniquePatientList.getByIndex(0).get());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(DANIEL, uniquePatientList.getByIndex(1).get());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void iterator() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(CARL);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(DANIEL);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Iterator\u003cPatient\u003e it \u003d uniquePatientList.iterator();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(it.hasNext());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(it.next(), ALICE);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(it.next(), CARL);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(it.next(), DANIEL);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(it.next(), BOB);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(it.hasNext());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void patientNotFoundException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        uniquePatientList.add(CARL);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e uniquePatientList.setPatient(ALICE, BOB));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e uniquePatientList.remove(CARL));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, BOB));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 237
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 6,
      "-": 20
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/visit/RemarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructor_null_noException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e new Remark(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructor_emptyRemark_noException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e new Remark(\"\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructor_normalRemark_noException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e new Remark(\"Anything legitimate !@#$%^\u0026*()_+{}:\\\"\u003c\u003e?1234567890-\u003d`~,./;\u0027[]\\\\|/\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 23
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/visit/VisitTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.visit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTimeTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTimeTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit visit \u003d ALICE.getVisits().get(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(visit, visit);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(visit, ALICE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(visit, BENSON.getVisits().get(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void getPatient() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit visit \u003d ALICE.getVisits().get(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(visit.getPatient(), ALICE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(visit.getPatient(), BENSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit visit \u003d ALICE.getVisits().get(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Visit temp \u003d new Visit(visit.getRemark(), visit.getStartDateTime(), visit.getEndDateTime().get(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visit.getVisitTasks(), visit.getPatient());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(visit.toString(), temp.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        temp \u003d new Visit(new Remark(\"something completely random lmao\"), visit.getStartDateTime(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visit.getEndDateTime().get(), visit.getVisitTasks(), visit.getPatient());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(visit.toString(), temp.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        temp \u003d new Visit(visit.getRemark(), StartDateTimeTest.VALID_START_DATE_TIME, visit.getEndDateTime().get(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visit.getVisitTasks(), visit.getPatient());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(visit.toString(), temp.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        temp \u003d new Visit(visit.getRemark(), visit.getStartDateTime(), EndDateTimeTest.VALID_END_DATE_TIME,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visit.getVisitTasks(), visit.getPatient());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(visit.toString(), temp.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        temp \u003d new Visit(visit.getRemark(), visit.getStartDateTime(), visit.getEndDateTime().get(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                BENSON.getVisits().get(0).getVisitTasks(), visit.getPatient());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(visit.toString(), temp.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Patient is not printed out in toString, so this change won\u0027t affect"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        temp \u003d new Visit(visit.getRemark(), visit.getStartDateTime(), visit.getEndDateTime().get(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visit.getVisitTasks(), BENSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(visit.toString(), temp.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 53
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/visittask/VisitTaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.visittask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodoTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitTaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Detail VALID_DETAIL \u003d new Detail(\"\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final VisitTask VALID_TASK \u003d new VisitTask(VisitTodoTest.VALID_VISIT_TODO, VALID_DETAIL,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final VisitTask VALID_TASK_UNDONE \u003d new VisitTask(VisitTodoTest.VALID_VISIT_TODO, VALID_DETAIL,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Detail VALID_DETAIL_FILLED \u003d new Detail(\"\\\"Anything legitimate !@#$%^\u0026*()_+{}:\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"\\\\\\\"\u003c\u003e?1234567890-\u003d`~,./;\u0027[]\\\\\\\\|/\\\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertTrue(() -\u003e VALID_TASK.equals(VALID_TASK));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(() -\u003e VALID_TASK.equals(VALID_DETAIL));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(() -\u003e VALID_TASK.equals(VALID_TASK_UNDONE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTask task2 \u003d new VisitTask(VisitTodoTest.VALID_VISIT_TODO, VALID_DETAIL, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTask task3 \u003d new VisitTask(VisitTodoTest.VALID_VISIT_TODO, VALID_DETAIL, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTask task4 \u003d new VisitTask(VisitTodoTest.VALID_VISIT_TODO, VALID_DETAIL_FILLED, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        VisitTask task5 \u003d new VisitTask(VisitTodoTest.VALID_VISIT_TODO_SHORT, VALID_DETAIL_FILLED, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(VALID_TASK.toString(), task2.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(VALID_TASK.toString(), task3.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(VALID_TASK.toString(), task4.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(VALID_TASK.toString(), task5.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotEquals(VALID_TASK.toString(), task5.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 38
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/model/visittodo/VisitTodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.model.visittodo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class VisitTodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final VisitTodo VALID_VISIT_TODO \u003d new VisitTodo(\"\\\"Anything legitimate !@#$%^\u0026*()_+{}:\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            + \"\\\\\\\"\u003c\u003e?1234567890-\u003d`~,./;\u0027[]\\\\\\\\|/\\\"\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final VisitTodo VALID_VISIT_TODO_SHORT \u003d new VisitTodo(\"Bloop\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new VisitTodo(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new VisitTodo(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e new VisitTodo(\"\\\"Anything legitimate !@#$%^\u0026*()_+{}:\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"\\\\\\\"\u003c\u003e?1234567890-\u003d`~,./;\u0027[]\\\\\\\\|/\\\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 22
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/storage/JsonAdaptedPatientTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class JsonAdaptedPatientTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String INVALID_VISIT_TODO \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final List\u003cJsonAdaptedVisitTodo\u003e VALID_VISIT_TODOS \u003d BENSON.getVisitTodos().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .map(JsonAdaptedVisitTodo::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final List\u003cJsonAdaptedVisit\u003e VALID_VISITS \u003d BENSON.getVisits().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .map(JsonAdaptedVisit::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(BENSON, patient.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPatient(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null, VALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Email.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        INVALID_ADDRESS, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null, VALID_TAGS, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Address.class.getSimpleName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        VALID_ADDRESS, invalidTags, VALID_VISIT_TODOS, VALID_VISITS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_invalidVisitTodo_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTodo\u003e invalidTodo \u003d new ArrayList\u003c\u003e(VALID_VISIT_TODOS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        invalidTodo.add(new JsonAdaptedVisitTodo(INVALID_VISIT_TODO));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        VALID_ADDRESS, VALID_TAGS, invalidTodo, VALID_VISITS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 68,
      "-": 69
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/storage/JsonAdaptedVisitTaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalVisitTasks.SAMPLE_VISIT_TASK_NO_DETAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalVisitTasks.SAMPLE_VISIT_TASK_SPECIAL_CHARS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalVisitTasks.SAMPLE_VISIT_TASK_WITH_DETAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.Detail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class JsonAdaptedVisitTaskTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String INVALID_VISIT_TODO \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final List\u003cJsonAdaptedVisitTodo\u003e VALID_VISIT_TODOS \u003d BENSON.getVisitTodos().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .map(JsonAdaptedVisitTodo::new)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_validVisitTaskDetails_returnsVisitTask() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask visitTask \u003d new JsonAdaptedVisitTask(SAMPLE_VISIT_TASK_NO_DETAIL);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(SAMPLE_VISIT_TASK_NO_DETAIL, visitTask.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask visitTask2 \u003d new JsonAdaptedVisitTask(SAMPLE_VISIT_TASK_WITH_DETAIL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(SAMPLE_VISIT_TASK_WITH_DETAIL, visitTask2.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask visitTask3 \u003d new JsonAdaptedVisitTask(SAMPLE_VISIT_TASK_SPECIAL_CHARS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(SAMPLE_VISIT_TASK_SPECIAL_CHARS, visitTask3.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullVisitTodo_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask patient \u003d new JsonAdaptedVisitTask(null, \"\", true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedVisitTask.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VisitTodo.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullDetail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask patient \u003d new JsonAdaptedVisitTask(new JsonAdaptedVisitTodo(\"Work\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedVisitTask.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Detail.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullDone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisitTask patient \u003d new JsonAdaptedVisitTask(new JsonAdaptedVisitTodo(\"Work\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"\", null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedVisitTask.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \"IsDone\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 63
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/storage/JsonAdaptedVisitTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.EndDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.datetime.StartDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class JsonAdaptedVisitTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String INVALID_DATE_1 \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String INVALID_DATE_2 \u003d \"12/12/12 1400\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String VALID_REMARK \u003d \"Remark\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String VALID_START \u003d \"10-12-2019 2100\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String VALID_END \u003d \"11-12-2019 2100\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final String VALID_VISIT_TASK \u003d \"10-12-2019 2100\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final Visit VALID_VISIT \u003d BENSON.getVisits().get(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private static final Visit VALID_COMPLETED_VISIT \u003d CARL.getVisits().get(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final JsonAdaptedVisit VALID_JSON_VISIT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            new JsonAdaptedVisit(BENSON.getVisits().get(0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void toModelType_validVisitDetailsAndNullEnd_returnsVisitTask() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Visit visit : BENSON.getVisits()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            JsonAdaptedVisit visitTask \u003d new JsonAdaptedVisit(visit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            assertEquals(visit, visitTask.toModelType(BENSON));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void toModelType_validVisitDetailsAndNonNullEnd_returnsVisitTask() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        for (Visit visit : CARL.getVisits()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            JsonAdaptedVisit visitTask \u003d new JsonAdaptedVisit(visit);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            assertEquals(visit, visitTask.toModelType(CARL));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns a list of valid JsonAdaptedVisitTasks for testing purposes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cJsonAdaptedVisitTask\u003e generateValidJsonAdaptedVisitTasks() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTasks.addAll(VALID_VISIT.getVisitTasks().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(JsonAdaptedVisitTask::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return visitTasks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullRemark_doNotThrowIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(null,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullVisitStart_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedVisit.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                StartDateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullEndDateTime_doNotThrowIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_nullVisitTasks_doNotThrowIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_startDateNotDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                INVALID_DATE_1,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, StartDateTime.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_startDateInvalidFormat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                INVALID_DATE_2,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, StartDateTime.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_endDateNotDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                INVALID_DATE_1,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, EndDateTime.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_endDateInvalidFormat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                INVALID_DATE_2,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, EndDateTime.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_endDateEarlierThanStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        List\u003cJsonAdaptedVisitTask\u003e visitTasks \u003d generateValidJsonAdaptedVisitTasks();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        final JsonAdaptedVisit visit \u003d new JsonAdaptedVisit(VALID_REMARK,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_END,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                VALID_START,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                visitTasks);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedVisit.END_DATE_EARLIER_THAN_START_DATE, () -\u003e {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            visit.toModelType(BENSON);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 9,
      "crazoter": 167
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/storage/JsonPatientBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class JsonPatientBookStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonPatientBookStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void readPatientBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readPatientBook(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPatientBook\u003e readPatientBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new JsonPatientBookStorage(Paths.get(filePath)).readPatientBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertFalse(readPatientBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                DataConversionException.class, () -\u003e readPatientBook(\"notJsonFormatPatientBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void readPatientBook_invalidPatientPatientBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                DataConversionException.class, () -\u003e readPatientBook(\"invalidPatientPatientBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void readPatientBook_invalidAndValidPatientPatientBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                DataConversionException.class, () -\u003e readPatientBook(\"invalidAndValidPatientPatientBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void readAndSavePatientBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPatientBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook original \u003d TypicalPatients.getTypicalPatientBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonPatientBookStorage jsonPatientBookStorage \u003d new JsonPatientBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        jsonPatientBookStorage.savePatientBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ReadOnlyPatientBook readBack \u003d jsonPatientBookStorage.readPatientBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(original, new PatientBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        original.addPatient(TypicalPatients.HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        original.removePatient(TypicalPatients.ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        jsonPatientBookStorage.savePatientBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        readBack \u003d jsonPatientBookStorage.readPatientBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(original, new PatientBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        original.addPatient(TypicalPatients.IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        jsonPatientBookStorage.savePatientBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        readBack \u003d jsonPatientBookStorage.readPatientBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(original, new PatientBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void savePatientBook_nullPatientBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                NullPointerException.class, () -\u003e savePatientBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Saves {@code patientBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void savePatientBook(ReadOnlyPatientBook patientBook, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            new JsonPatientBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    .savePatientBook(patientBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void savePatientBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e savePatientBook(new PatientBook(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 112
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/storage/JsonSerializablePatientBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class JsonSerializablePatientBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePatientBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientsPatientBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientPatientBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientPatientBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonSerializablePatientBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                JsonSerializablePatientBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook patientBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook typicalPatientsPatientBook \u003d TypicalPatients.getTypicalPatientBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(patientBookFromFile, typicalPatientsPatientBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonSerializablePatientBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                JsonSerializablePatientBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonSerializablePatientBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                JsonSerializablePatientBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, JsonSerializablePatientBook.MESSAGE_DUPLICATE_PATIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 47
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //userPrefs.setPatientBookFilePath(Paths.get(\"patientBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 10,
      "-": 113
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        JsonPatientBookStorage patientBookStorage \u003d new JsonPatientBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        storageManager \u003d new StorageManager(patientBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void patientBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * {@link JsonPatientBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPatientBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook original \u003d TypicalPatients.getTypicalPatientBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        storageManager.savePatientBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ReadOnlyPatientBook retrieved \u003d storageManager.readPatientBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(original, new PatientBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void getPatientBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertNotNull(storageManager.getPatientBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 18,
      "-": 51
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/DummyMutatorCommand.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.MutatorCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Dummy {@link MutatorCommand} for testing history functionality"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DummyMutatorCommand extends MutatorCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String RESULT_PREAMBLE \u003d \"This is a dummy command with data %s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private String dummyData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DummyMutatorCommand(String dummyData) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.dummyData \u003d dummyData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return new CommandResult(String.format(RESULT_PREAMBLE, dummyData));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 18,
      "crazoter": 4
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/EditPatientDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A utility class to help with building EditPatientDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class EditPatientDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private EditCommand.EditPatientDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditPatientDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor \u003d new EditCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditPatientDescriptorBuilder(EditCommand.EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditPatientDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an {@code EditPatientDescriptor} with fields containing {@code patient}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditPatientDescriptorBuilder(Patient patient) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor \u003d new EditCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setName(patient.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setPhone(patient.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setEmail(patient.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setAddress(patient.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setTags(patient.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditPatientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditPatientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditPatientDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditPatientDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPatientDescriptor}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditPatientDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the {@code visitTodos} into a {@code Collection\u003cVisitTodo\u003e}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * and set it to the {@code EditPatientDescriptor}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditPatientDescriptorBuilder withVisitTodos(String... visitTodos) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Collection\u003cVisitTodo\u003e collection \u003d Stream.of(visitTodos)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .map(VisitTodo::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.setVisitTodos(collection);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public EditCommand.EditPatientDescriptor build() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 101
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/PatientBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A utility class to help with building PatientBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " *     {@code PatientBook ab \u003d new PatientBookBuilder().withPatient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class PatientBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private PatientBook patientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBookBuilder(PatientBook patientBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.patientBook \u003d patientBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Adds a new {@code Patient} to the {@code PatientBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBookBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patientBook.addPatient(patient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patientBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 34
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/PatientBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visit.Visit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittodo.VisitTodo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class PatientBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Collection\u003cVisitTodo\u003e visitTodos;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cVisit\u003e visits;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //Because visits need a reference to their patient in order to be created, this allows one to call the functions"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //\"withOngoingVisits()\" etc before calling build"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private List\u003cConsumer\u003cPatient\u003e\u003e visitsConsumerList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTodos \u003d new LinkedHashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitsConsumerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        name \u003d patientToCopy.getName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        phone \u003d patientToCopy.getPhone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        email \u003d patientToCopy.getEmail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        address \u003d patientToCopy.getAddress();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(patientToCopy.getTags());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitTodos \u003d new LinkedHashSet\u003c\u003e(patientToCopy.getVisitTodos());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visits \u003d new ArrayList\u003c\u003e(patientToCopy.getVisits());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitsConsumerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Sets the {@code Address} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Sets the {@code Email} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the {@code visitTodos} into a {@code Collection\u003cVisitTodo\u003e}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBuilder withVisitTodos(String ... visitTodos) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.visitTodos \u003d SampleDataUtil.getVisitTodos(visitTodos);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Adds finished visits to the list of visits."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBuilder withPreviousVisits() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitsConsumerList.add(patient -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            patient.addVisits(SampleDataUtil.collateVisits(SampleDataUtil.makeVisit(\"\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \"10-11-2019 1500\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \"10-11-2019 1700\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    SampleDataUtil.collateVisitTasks("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            SampleDataUtil.makeVisitTask(\"Apply Eyedrops\", \"\", true),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            SampleDataUtil.makeVisitTask(\"Top-up medicine\", \"\", true),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            SampleDataUtil.makeVisitTask(\"Check his diet\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    \"Stopped eating donuts\", true),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            SampleDataUtil.makeVisitTask(\"Check his sleep cycle\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    \"Could not sleep on Monday and Thursday\", true)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    patient),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    SampleDataUtil.makeVisit(\"Patient was very quiet.\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            \"12-11-2018 1500\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            \"12-11-2018 1700\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            SampleDataUtil.collateVisitTasks("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    SampleDataUtil.makeVisitTask(\"Check bed for bugs\", \"\", true),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    SampleDataUtil.makeVisitTask(\"Top-up medicine\", \"\", true)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            ),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            patient"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Adds finished visits to the list of visits."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public PatientBuilder withOngoingVisit() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        visitsConsumerList.add(patient -\u003e {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            patient.addVisits(SampleDataUtil.collateVisits(SampleDataUtil.makeVisit(\"\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \"10-11-2019 1500\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    SampleDataUtil.collateVisitTasks("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            SampleDataUtil.makeVisitTask(\"Apply Eyedrops\", \"\", true),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            SampleDataUtil.makeVisitTask(\"Top-up medicine\", \"Need more Vit. D\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                                    false)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    patient"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            )));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Builds and returns a Patient based on the functions called on this PatientBuilder object prior."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Patient patient \u003d new Patient(name, phone, email, address, tags, visitTodos, visits);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //populate with visits"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Consumer\u003cPatient\u003e consumer : visitsConsumerList) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            consumer.accept(patient);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 179
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/PatientUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A utility class for Patient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class PatientUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an add command string for adding the {@code patient}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static String getAddCommand(Patient patient) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the part of command string for the given {@code patient}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static String getPatientDetails(Patient patient) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        sb.append(PREFIX_EMAIL + patient.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        sb.append(PREFIX_ADDRESS + patient.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        patient.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the part of command string for the given {@code EditPatientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static String getEditPatientDescriptorDetails(EditCommand.EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 63
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (!(o instanceof SerializableTestClass)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        SerializableTestClass s \u003d (SerializableTestClass) o;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return this.name.equals(s.name)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \u0026\u0026 this.listOfLocalDateTimes.equals(s.listOfLocalDateTimes)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \u0026\u0026 this.mapOfIntegerToString.equals(s.mapOfIntegerToString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 11,
      "crazoter": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the middle index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the last index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns the patient in the {@code model}\u0027s patient list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static Patient getPatient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return model.getFilteredPatientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/TypicalCsv.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " * Csv String versions of {@Link TypicalPatients}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "public class TypicalCsv {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String TYPICAL_CSV_STRING \u003d \"name,phone,email,address,tagged,visitTodos\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"\\\"Alice Pauline\\\",94351253,alice@example.com,\\\"123, Jurong West Ave 6, #08-111\\\",friends,\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"\\\"Benson Meier\\\",98765432,johnd@example.com,\\\"311, Clementi Ave 2, #02-25\\\",\\\"owesMoney\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"friends\\\",\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"\\\"Carl Kurz\\\",95352563,heinz@example.com,\\\"wall street\\\",,\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"\\\"Daniel Meier\\\",87652533,cornelia@example.com,\\\"10th street\\\",friends,\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"\\\"Elle Meyer\\\",9482224,werner@example.com,\\\"michegan ave\\\",,\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"\\\"Fiona Kunz\\\",9482427,lydia@example.com,\\\"little tokyo\\\",,\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"\\\"George Best\\\",9482442,anna@example.com,\\\"4th street\\\",,\\\"Check first aid kit\\\"\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String INVALID_CSV_STRING \u003d \"name,phone,email,address,tagged,visitTodos\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"\\\"Alice Pauline\\\",invalid phone,invalid email,\\\"123, Jurong West Ave 6, #08-111\\\",friends,\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"\\\"Benson Meier\\\",98765432,empty address -\u003e,\\\"\\\",\\\"owesMoney\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"friends\\\",\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \",\\\"\u003c- empty name\\\",heinz@example.com,\\\"wall street\\\",,\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final String CSV_STRING_TO_MERGE \u003d \"name,phone,email,address,tagged,visitTodos\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            + \"\\\"Hoon Meier\\\",8482424,stefan@example.com,\\\"little india\\\",,\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 26
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Index INDEX_FIRST_PATIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Index INDEX_SECOND_PATIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Index INDEX_THIRD_PATIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final Set\u003cIndex\u003e getTypicalIndexSet() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        indexSet.add(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        indexSet.add(INDEX_SECOND_PATIENT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        indexSet.add(INDEX_THIRD_PATIENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return indexSet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 12,
      "crazoter": 12
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/TypicalPatients.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static cs.f10.t1.nursetraverse.logic.commands.CommandTestUtil.VALID_VISIT_TODO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.PatientBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A utility class containing a list of {@code Patient} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class TypicalPatients {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withTags(\"friends\").withPreviousVisits().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withOngoingVisit().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withPreviousVisits().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Patient ELLE \u003d new PatientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Patient FIONA \u003d new PatientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Patient GEORGE \u003d new PatientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withVisitTodos(\"Check first aid kit\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Patient IDA \u003d new PatientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ).withVisitTodos(VALID_VISIT_TODO).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    // Typical Patients, but without visits."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    // Used for CSV import testing, as visits cannot be imported."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final Patient ALICE_NO_VISIT \u003d new PatientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final Patient BENSON_NO_VISIT \u003d new PatientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final Patient CARL_NO_VISIT \u003d new PatientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final Patient DANIEL_NO_VISIT \u003d new PatientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final Patient ELLE_NO_VISIT \u003d new PatientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final Patient FIONA_NO_VISIT \u003d new PatientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static final Patient GEORGE_NO_VISIT \u003d new PatientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "            .withVisitTodos(\"Check first aid kit\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TypicalPatients() {} // prevents instantiation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Returns an {@code PatientBook} with all the typical patients."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static PatientBook getTypicalPatientBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PatientBook ab \u003d new PatientBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (Patient patient : getTypicalPatients()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ab.addPatient(patient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static List\u003cPatient\u003e getTypicalPatients() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    public static List\u003cPatient\u003e getTypicalPatientsWithoutVisit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_NO_VISIT, BENSON_NO_VISIT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "                CARL_NO_VISIT, DANIEL_NO_VISIT, ELLE_NO_VISIT, FIONA_NO_VISIT, GEORGE_NO_VISIT));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongsiuhong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongsiuhong": 28,
      "crazoter": 79
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/testutil/TypicalVisitTasks.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.model.visittask.VisitTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A utility class containing a list of {@code VisitTask} objects to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class TypicalVisitTasks {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final VisitTask SAMPLE_VISIT_TASK_NO_DETAIL \u003d SampleDataUtil"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .makeVisitTask(\"Descript!\", \"\", true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final VisitTask SAMPLE_VISIT_TASK_WITH_DETAIL \u003d SampleDataUtil"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .makeVisitTask(\"test Description\", \"with detail\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final VisitTask SAMPLE_VISIT_TASK_SPECIAL_CHARS \u003d SampleDataUtil"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            .makeVisitTask(\"Ensure he drinks 100% of it and pays $10.20!\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    \"I don\u0027t think it worked\", false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 18
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/cs/f10/t1/nursetraverse/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package cs.f10.t1.nursetraverse.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import cs.f10.t1.nursetraverse.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 15,
      "-": 99
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import cs.f10.t1.nursetraverse.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cfx:root type\u003d\"cs.f10.t1.nursetraverse.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1,
      "-": 5
    }
  }
]
